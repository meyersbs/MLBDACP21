ID,Description
CVE-2013-6665,heap based buffer overflow chrome resource provider google chrome handles bitmap textures vulnerability allows remote attackers cause denial service possibly unspecified impact via large bitmap texture size triggers improper memory allocation software renderer fix vulnerability place hard limit number bytes allocated specific situation regardless different kinds hardware vulnerabliity pretty simple oversight terms limiting resource constraints code would handled massive amounts memory allocation differently different pieces hardware leading buffer overflow situations think early way fixed hardcode reasonable limit code use magic number without constant still seems fishy good considered situation rectified interestingly trust fuzzer initially
CVE-2017-5093,ui spoofing blink browser engine used google chrome browser vulnerability makes possible display popup dialog front fullscreen permission dialog making impossible user know entered fullscreen mode enabling attacker subvert true identity url opinion coding design mistakes due overlooking potential use incorrectly validated inputs manipulate modals fullscreen feature fix looks proper involved additional tests deletion previous code additional checks input validation exiting web page initiated fullscreen dialog runs interesting even developers top tech companies overlook validating input serves prime example always make sure validate input may violate users confidentality
CVE-2017-5107,user information leak via svg rendering feconvolvematrix svg filter target iframe timing execution attacking page extract pixel values cross origin page iframe
CVE-2017-5060,url spoofing omnibox certain cyrillic characters look incredibly similar standard roman alphabet characters much certain fonts distinguish two registering domain punycode escape sequences causes characters display browser
CVE-2014-1748,scrollbar rectangles images properly clipped parent document interacted owning viewport non limiting effect allowed chiled documents draw cover respective parent documents passing extremely large dimensions scrollbar elements attacker could use creating transparent child document covered parent could allow attacker spoof content cause user click malicious links main mistake made less mistake oversight vulnerability introduced scrollview paint needed clipped visible content visiblecontentrect never checked scrollbar also clipped well leading inconsistency two parts feature likely missed due issue extremely large dimensions specified elements unclear big must trigger vulnerability originally test would probably needed manual possibly fuzzer investigation tests added specifically check issue code fixed order prevent issue popping fix appears proper fix scrollbar properly clipped size rect mentioned
CVE-2015-1296,could place special unicode characters url padlock character would displayed beginning url which could fool user thinking secure connection https attackers could post links anywhere web include special characters people click see padlock icon think safe padlock icon verifies server fact claim go facebook com see padlock verifies third party impersonating facebook could hide hyperlink characters appear link visible user click web browser would copy omnibox display padlock character omnibox address bar chrome call omnibox internally issue happened requirements phase considered complex unicode inputs people could use attempt spoof urls order type vulnerability caught would needed someone familiar unicode team person would know padlock character know rtl characters used move characters appear beginning string throughout development one must thought attack like really complex input understandable never considered originally though remove unicode characters though people speak languages whose alphabet fit ascii need able search things omnibox
CVE-2016-5157,heap buffer overflow bounds write vulnerability found openjpeg which used pdfium google chrome would allow remote attacker arbitrarily execute code user machine inspecting code seemed vulnerability due casting arguments method VERVER byte integer which could possibly cause integer exceed boundaries openjpeg open source library used display jpeg images dependency pdfium which open source library which google maintains used display pdf files google chrome bug openjpeg brought forth developer open source library attempting close another heap buffer overflow bug think vulnerability could stopped tracks unit tests section code unit tests openjpeg coding mistake lead vulnerability developer implemented section code thought possibility overflow next commit provided checks ensure overflow happen variables assigned think possibility casting variables could possibly cause overflow later vulernability introduced developer attempting fix another overflow bug which also casting seems like oversight developer think recheck output variables
CVE-2015-6583,google chrome browser display location bar hosted apps navigate away installation site example install app google chrome web store launch app open new window location bar would disappear may make easier remote attackers spoof content via specially crafted app therefore allow attacker perform phishing attack steal user credentials vulnerability appears introduced due coding design mistake coding design mistake made location bar properly handled navigating away new window also may requirements issue well due way hosted app initially defined bookmark app fix changed browser handled visibility location bar hosted app treated system fix corrects unexpected behavior location bar disappearing validates hosted app trusted
CVE-2016-1645,attackers could write metadata image information makes image way read certain programs tools potential create denial service attacks which would crash applications machines google used library interpret render images inside pdf viewing addition getting metadata things like image tags describing photos alt text screen readers accessibility settings crash caused incorrectly converting integers types negative positive would result integer signdness errors errors could lead bounds index writing attacker could inject execute code supposed able number casting errors which could violate integrity data vulnerability problem potential affect availability systems integrity data solution upgrade r3002 openjpeg which based intuition reasoning added checks data ensure run combination design mistakes coding mistakes either laziness constraints first team account buffer overflows originally coded method could avoided input sanitization checking input handle potential bounds problems top failing handle problem originally write unit tests attempt catch problem happened possible even unit testing could caught tests written period vcc fix 4 5 commits vcc fix which would make seem like writing test cases would good idea many others failed fix previously team set method way validated inputs properly handled expected buffer overflows problem might avoided start sure difficulties though appears openjpeg library chromium uses necessarily testing intending use things google eventually utilized
CVE-2013-6657,code used check possible xss attacks replaced blocked form elements blank internal page remote attackers could take advantage bypass origin policy instead force sensitive data submitted blank page checking character character which requests got blocked determine data value brute force mistake made likely case able anticipate every possible vulnerability multiple commits stating usage internal blank page safe ie vulnerable xss span several years different people perhaps familiarity specific implementation page could prevented ultimately developers learn everything everything nothing would get done code reviews different people may help
CVE-2010-3248,bug found chrome which retrict javascript copying clipboard context anywhere run javascript person found vulnerability wrote exploit would hijack clipboard constantly set clipboard malicious url exploit works first start creating invisible iframe element background turning design mode content editable gives iframe access execcommand js which copy function which copies current selected content clipboard attacker take advantage adding setting text element inside iframe malicious url calling focus select finally execcommand copy function copy clipboard exploit used settimeout make infinite recursive call function which would copy malicious url clipboard every 500ms link custom exploit https bugs chromium org p chromium issues attachmenttext aid 118061 bug present opera firefox reasonable assumption someone access clipboard outside dedicated clipboard events one important obscure vulnerabilities hard actively defend way prevent kind vulnerabilities would paranoid every feature unit tests whazoo testing code ground good way ensure safety say economical sane write software like
CVE-2011-2850,khmer characters causing bound error read bound error even caused file made one khmer character khmer technical certain characters khmer actually official language cambodia attack taking advantage vulnerability would remote attackers utilizing unspecified vectors upload khmer characters would cause bound error leading denial service issue cropped library using harfbuzz harfbuzz used convert unicode text glyphs seems like issue could caught earlier improved testing harfbuzz contains tests list languages khmer originally one additionally eventually caught fuzzer existed almost year person fuzzer caught properly bounding unit tests could discovered ease oob errors much earlier especially caused single character khmer tibetan
CVE-2016-1636,code handled subresource integrity checks flawed resource requested origin second time second check run instead code checked see test run considered success regardless result integrity check completely bipassed sri protection mechanism which chromium subsystem handles checking integrity fetched resources entire issue stemmed minor oversight middle revamp subresourceintegrity code major design failing seems like developer overlooked actual result check assumed happened everything kosher middle fixing another issue also involved checking cache
CVE-2010-1505,opening new tab one could take advantage race condition start loading page tab new tab process ntp completed resulted newly loaded tab sharing privileges new tab page vulnerability underlying cause another bug chromium bug 12718 which saw form submissions submitted get instead post since page loaded new tab process privileges new tab process attacker may able execute csrf similar attack taking advantage side effects privileges change form submissions post get vcc vcc fix appears extensive refactoring moving functionality new directories done batches massive commits which likely made challenging identify issues vulnerabilities files involved could classified mistake made version control practices vulnerability fixes simple seem appropriate developers foresight practice defense depth adding additional safety check initial fix made overall fix needed made additional check domuischeme vulnerability appears result simple coding mistake one could argue greater design mistake implied vulnerability since occurred due race condition condition could potentially lead vulnerabilities future however fix address overall issue rather specifics vulnerability
CVE-2011-2840,bug allowed remote attackers spoof url bar via unusual user interaction words url bar may stolen user clicking chrome interface user navigating view download page leave url bar which filled information may spoofed issue coding mistake browser originally function kill pending page statement looking many conditions call dedicated function
CVE-2013-6649,use free vulnerability svg rendering function blink engine chromium found unit testing vulnerability allows remote attackers possibly cause denial service e g crashing program exploits using vectors svg image zero bytes size blink engine attempted render image buffer unstable behavior remote code execution could occur referring address space via pointer definitely overlooking basic validation attributed complex functions rendering code nested statements which make hard sometimes accurately place validation conditions checking null empty values must especially low level language like c c which chromium written kinds mistakes commonly associated use free buffer overflows due memory mismanagement interesting note tests added none appear directly check zero size images code also reviewed vcc commit reviewing procedures probably revised especially review edge cases validation around changed code
CVE-2014-1713,memory addresses continuing accessed freed could allow remote attackers cause denial service unknown impact vulnerability result misusing c built pointers coding mistake made properly handling pointers author added code failed recognize code would continue access certain resources freed one way resolve dig code figure resources used free however difficult time consuming simple solution switch c smart pointers which automatically handle kinds errors
CVE-2010-0664,certain urls cause browser crash due stack exhaustion urls parsed recursively many nested protocols url stack run memory completely parse causes denial service browser crash oom memory message thrown personally expected anyone plan particular vulnerability since involved url call multiple protocols which would exhaust system resources would expect people test calling multiple protocols expect call many times exhaust stack resources understanding took several calls different protocols cause issue
CVE-2010-4039,one startup scripts linux build wrapper chrome line import libraries uses environment variable environment variable exist would hanging left causes system use current directory libraries malicious libraries placed attacker controlled directory unsuspecting user could libraries loaded chrome instance start think really mistakes led vulnerability developers aware variables making sure set using which cause vulnerability however application still runs expected even environmnet variable null takes close inspection thought realize attacker could place malicious libraries directory chrome run build script developers usually concerned checking security vulnerabilities making sure program always able run given environment conditons case
CVE-2016-1643,function google webkit blink web browser google introduced 2013 used ensure resource called shadow dom document object model synchronized properly current content page user would looking properly update model content changed unavailable sync resource would allow remote attackers cause denial service possibly unspecified impact arbitrary code execution hackers could craft code which program would run blindly function crashes gives attacker semi reliable control stack chrome system stack set instructions program run order control stack means user control program execute next reason using resource like shadow dom allow controllable boundary actual implementation various items like slider use rather requiring users code every last piece everything webpages shadow doms used give developers access elements implementers framework want access without exposing framwork think shadow dom way framweork developers let webpage developers work complex pre built items like various kinds input sliders video frames without exposing code reach framework allowing user utilize customize stylize elements problem encountered vulnerability shadow dom properly refreshed source images loaded img tag html component actually secret call items shadow dom magic reaching framework dom would suddenly refernce items actually current page memory gets allocated image image never actually loaded dom thinks image instead points mermory which exposed system hackers bug introduced one fell swoop large code rebase team seemingly decided best utilize shadow dom document object model silently take care loading images background interesting choice use shadow dom would maintained properly start pointing areas memory secure unfortunately happened one user worked implementing utilizing shadow dom first time account shadow dom missing sync seemingly oversight part user also users reviewed changes change impacted many files seems decision utilize shadow dom framework still use today commit introduced newly accepted framework system bug accompanied mistake could likely avoided change smaller split reviews coding reviewing fatigue real thing stated likely oversight
CVE-2015-1274,vulnerability took advantage chrome feature automatically open certain filetypes upon download user point downloaded executable file checked box automatically open type file future website could initiate download executable file browser would immediately execute described requirements mistake original requirements perfectly valid behavior filetype treated auto openable however unintended effect executables also candidates auto opening updating requirements longer correct behavior executable filetype allowed auto open
CVE-2010-3118,chrome web browser supports autocomplete functionality user entering url search box search box performs url searching well searching google com referred omnibox autosuggestion appears performed sending http call server containing text user currently typed requests possible completions text call http attacker could concievably sniff information see text partial url user viewing vulnerability cve 2010 3118 focuses case user includes username password https url enter search box something akin https user password host included auto complete request sent server unsecure http initial issue seems best fall design mistake autosuggest feature initially perform comprehensive checks see autosuggestion appropriate current url fix submitted covered many different cases autosuggestion would appropriate still allowed cases appropriate could considered requirements mistake relied upon poorly defined requirement comments issue tracker noted different ways urls could contain sensitive information many small edge cases relied upon still developing technology https new edge cases could introduced standard grows edge cases need updated file curated VERVER unsure edge cases found since vulnerability resolved
CVE-2014-7936,use free error within vulnerability use free attempt access memory already freed cause software crash potentially execute arbitrary code elevate privileges perform remote executions specific vulnerability zoombubbleview close function allows document input input cause denial service attack malicious parties addition could potentially utilize document input ways violate integrity system ways running malicious scripts lower levels chrome without user knowing due nature use free well could potentially see vulnerability elevation privileges change parts application malleable think another artifact earlier used piece code simple problem requires using depricated piece code fixed
CVE-2015-1217,v8lazyeventlistener listens javascript events given type event vulnerability occurred preparelistenerobject function listener class which responsible binding dom event types listener objects essentially VERVER engine needs bindings wrappers interact webkit which turn interacts directly dom content chromium app vulnerability category type confusion variable object previously declared one type accessed another type causes problems mainly c like languages memory safety check something like pointer trying point allocated memory another type case javascript code constructed compiled ran partially based dom element input listener listen result cast function although necessarily function causing type confusion could cause crash program another dos sorts malicious actor fixed removing testing assert statements replacing conditional checks whether context object document whether allows inline event handlers whether internal script ran result function ensures objects proper type null which could make exploits possible definitely case quick development code commits leading vulnerability code overlooked perhaps due miscommunication since appears different person involved step introducing fixing vulnerability rigorous code reviews common security standards especially pertaining c subsystems typically implemented chromium could add long run fortified application build fewer common easy check errors make sure everyone reviewing understands code trying accomplish validate verify fix checking certain conditions preceding create listener object seems appropriate kind vulnerability future rely heavily asserts runtime production environment converted actual checks handling errors exceptions
CVE-2015-1220,google chrome multiple occasions memory location freed location attempted used specific vulnerability location used gif decoder attempted used gif fails decoded remote attacker chooses attempt take advantage vulnerability could cause denial service users unpredicted behavior way anticipated attacker would take advantage crafted frame size gif frame size larger screen size device could cause broken gif triggers bug decoding code gif one thing found interesting vulnerability found two months fixed looked looked recreated labelled high priority larger bounty common vulnerabilities probably could done quicker schedule might release thing important employee workload reading vulnerability common issue many services gif loading chromium team internal comments mention issue also occuring firefox believe created coding mistake team also mentioned quick fix place cover edge case vulnerability first frame gif larger screen size cwe associated vulnerability concerned memory use free error occurs mentioned issue gif frame sizes two suggested mitigatons cwe entry first mitigation suggests choosing language provides automatic memory management engine blink quite large realistic rewrite rendering engine new language second mitigation sure set variables null freed even mitigation strategy mentions fix may useful multiple complex data structures blink complicated engine however considering fixed issue root cause mishandling gif decoding changed quick fix seems like fix handled properly
CVE-2014-7939,harmony proxy specific js proxy google javascript engine VERVER enabled disabled default allows remote attackers bypass origin policy via javascript code proxy create console log calls origin policy immensely important concept web means web page access data another web page unless origin calculated based uri scheme host name port number allows access victim url proxy potentially committing information disclosure user victim data right attacker console vulnerability seemed widespread problem involving mime sniffing issue mime sniffing rised browsers well notably firefox bug report google employees specifically referencing mozilla bug report forum proposed solution really quite interesting see collaboration two giant browsers chromium team debated options fix ultimately ended going firefox proposed solution locking window prototype chain fix originally ended quite simple adding nosniff option http headers eventually bug opened new complicated solution needed found mentioned seems http header option merely step correct direction default modern browsers cwe entry found diffiuclt pin exactly which broad cwe category fits much silent debate decided categorize xss ultimately external js code executed meant executed even via proxy aka via site directly also directly relates violation origin policy even though bit strange therefore necessarily mitigations recommended broad xss still aparent example think applicable mitigation actually strategy attack surface reduction basically involves keeping mind potential areas untrusted inputs possible including things read network url components external systems etc relates fact chromium team think harmony proxy area untrusted input
CVE-2012-5152,extra memory allocated playback rate video higher normal skip feature used think youtube c language allows direct references memory even reference outside intended buffer extra memory could used bounds read access coding mistake author correctly account change playback rate properly seeking would applied interaction two features seek increased playback unintended consequences
CVE-2015-1253,scripting allowed dom tree parsing result attacker could infect remote browsers malicious code via visiting website malicious javascript files file loaded browser upong page load script tag could beexecuted browser accessing html parsing tree executing javascript process generally unstable bypassed cross origin security policy which serve protection mechanism variety types attacks vulnerability obscure probably could forseen except seasoned security minded engineers said lack understanding attention lifecylce dom parsing probably root cause lead initial vcc paying attention vital points code system becomes subject script execution key preventing types vulnerabilities future
CVE-2011-2848,forward button backward button browser help user navigate previous next page history easier however cases user goes forward manually opens closes new tab url bar spoofed problem lies way google chrome updates icons url bar everytime user commits page ssl ev icon url bar changed navigation committed chrome changes browser starts navigating forward backward means icon changes even actual url may comletely loaded url bar reflect page loaded user user could redirected non ssl site phishing site still think safe url bar ssl icons good think vulnerability design mistake developer clearly come ideal behavior handling url bar well complete test plan user interactions actual fix unit test vulnerability quite simple
CVE-2013-6627,attack access information beyond length buffer storing http response headers web server use pecially crafted informational http response codes 1xx http response codes incorrectly processed nott removed front buffer parts code always assumes current http response parsed front buffer incorrectly processed 1xx response code produces length longer buffer responses attacker use read main process memory change execution vulnerability appears mainly stem design mistakes evident code shows developers know 1xx http response status codes different classes status codes also developers made lot assumptions without considering whether code written actually fit assumptions vulnerability shows miscommunication issues regarding assumptions made which influence which fix option used also seems little communication people team believe based defensiveness bug thread fact developer moved around code without knowing code actually works overall appears vulnerability caused relatively small number lines code vulnerability merely symptom larger issues including design mistakes assumptions miscommunications
CVE-2009-1413,vulnerability chrome 1 0 x chrome cancel timeout functions switching tabs which makes possible execute universal cross site scripting using javascript settimeout function run code new page site loaded biggest mistake killing timeout functions created one page navigating another page ultimately allowed uxss style attack occur fix problem protocol already way deprecation reasons stop processing chromehtml protocol ie uris chromehtml protocol deprecated different solution would needed
CVE-2013-6634,incorrect url used user authentication gaia subsystem user would login web application credentials saved chrome VERVER response recieved web app properly validated attempting redirect user following authentication chrome decides whether follow given url based information given conditional logic would decide whether redirect url followed flawed referencing correct url object question enabled remote attackers conduct session fixation attacks hijack web sessions triggering improper sync VERVER http status code vulnerability present master branch chromium source around october VERVER VERVER bug report opened year later october VERVER VERVER fix merged november VERVER 2013 another month later core cve 2013 6634 caused simple coding mistake programmer implemented vcc accessed wrong member object therefor passing wrong value function call approve dissaprove traversal VERVER redirect could mitigatted testing especially use code coverage tool could identified need testing conditional like resolve true appear tests place catch regression issue unlikely regression would happen location code refactor request object might useful prevent future similar errors
CVE-2010-0643,google chrome version VERVER defaulted direct connection proxies available which different web browsers handled issue browsers firefox ie internet explorer would display error page available proxies issue direct connection remote http servers website visit see ip address user agent information cookies stored personal computer serious vulnerability direct connections lose anonymity proxies provide attacker could exploit vulnerability obtain sensitive information identity user mistake led vulnerability design problem unlike browsers set use direct connection proxies available main reason problem exposed user identity which could used malicious purposes system designed prevent direct connection used without user knowledge however design specification acknowledge requirement cwe entry chose information exposure sent data direct connection user sensitive data may exposed attackers mitigate weakness define data software sensitive mitigation happens requirements phase support design however requirement missed evolved vulnerability
CVE-2016-5173,regular webpage using chromium standard javascript remote attacker able modify add functionality javascript core object prototype default prototype js objects inherit properties methods modifying object prototype normally issue chromium extensions subsystem also adds functionality object prototype restrict access concern chromium extensions subsystem access lots resources intended invoked loaded client webpage attacker webpage otherwise executed javascript exploit loading additional chromium extensions resources allowing things modifying happens objects garbage collected executing native functions typically require user interaction without interaction otherwise calling native functions attacker controlled data mistake design mistake developers used standard javascript implementation directly binding properties object prototype vulnerability obvious main concern comes fact code chromium extensions subsystem access many internal never exposed resources native functions javascript core notoriously lax kind access control default modifying object prototypes result attacker scenario able simply modify base object prototype add functionality carry exploit main takeaway expect attackers abuse tools give accounting understanding javascript works key preventing something like happening future case solved VERVER files better design extracting new function required property binding safely instead directly adding object prototype
CVE-2010-3247,google chrome properly restrict characters urls allowing remote attackers visually spoof url bar using sequences characters used different purpose intended use specifically homographic sequences common mistake led vulnerability lack internationalization localization url considered url spoofing usage homographic sequenced japanese characters would possible lack testing regards internalization localization also contributed tested foreign characters test case url could caught earlier lack testing google end meant take outside testing security company happen find vulnerability start get addressed
CVE-2015-1287,bug blink webkit used chromium allowed external resource loaded css interpreted without correct mime media type bug made possible attacker leak data using css string injection bug caused use method interpreting css called quirks mode which allowed parsing non standard css bug encountered past attempt made fix using strict mode parse css incorrect mime type however discovered attack still possible attacker could change charset utf 16 research looks like quirks mode removed caused issues tests added back eventually removed good browser refuses load cross origin resources css mime type incorrect seems original existence quirks mode first place purpose parsing non standard css non standard css seems sort legacy support bug discussion one main arguments drop quirks mode firefox already done vulnerability design mistake quirks mode added compatibility purposes turned css incorrect mime type could open opportunity attack possible quirks mode could fixed make secure however removing option entirely fixed issue minor impact compatibility
CVE-2014-3154,vulnerability chrome shutdown sequenece chrome running javascript window valid commands write files close current window window closed window thread properly remove thread writing files even though memory writer targeting freed code closed window thread assumed files accessed would longer used fix ensured shutdown sequenece window also properly shut file writing component mistake two fold erroneous assert statement along case thread shut properly unneeded assert statement primarily due miscommunication developer consider cases particular error could sent code later changed tests code changed along shutdown error due design problem thread planned shutdown components properly planned attached child thread left running parent shut rigourous documentation could prevented problem parent thread list child threads ensure terminated time parent thread
CVE-2013-2879,vulnerability occurs user signin process user tricked signing attacker account via cross site scripting effectively phishing cause user personal information revealed attacker attacker force account sync victim giving attacker ability run code victim privilege vulnerability stems trust sign process renderer process trust two processes points trust could used attack basis vulnerability trust file changed longer support non web based signin flow certain trusts verified leading trust sign process renderer process opened subsystem threats trust boundaries important reviewed things like removing features vulnerability found single small set lines rather within overall design subsystem non web based signin flow removed fix involved removing lines instead adding new logic needed loss previous feature design may fine shows good verify design removing decently sized feature
CVE-2011-1112,displaying type graphic known svg value infinity could used one attributes causing write invalid memory location would result segmentation fault vulnerability caused coding mistake coder consider specific edge case lead problem writing unit tests code probably would helped team consider edge cases
CVE-2014-3159,vulnerability allows malicious site spoof url another site phishing attacks origin requests properly checked malicious person could write short script script url location link could changed changed future clicking url navigate user new malicious url input chrome android validate origin urls which listed mitigation cwe fix looks proper ensures url renderer posting believe miscommunication design mistakes merely vulnerabiltity left improper code review
CVE-2014-1723,vulnerability actually really cool one malicious actors could insert right left rtl character url using keyboard create misleading urls rtl reverses characters string gui character completely insivible users chromium almost impossible detect example malicious user could use character create url like coolcamsj png however due rtl character url browser would actually read string coolcamgnp js load which potential malicious javascript personally think requirement mistakes made led vulnerability original coders either knowledge character could lead problems future eventually came luckily reported good samaritan hopefully malicious users chance use users
CVE-2011-3956,extension implementation properly handle sandboxed origins which may allow remote attackers bypass origin policy via crafted extension basically extension could gain permissions beyond initially given browser bug caused fact origin checked browser granting permissions extension caught using fuzzer try spoof origin request fix looks sufficient implement check add unit tests verify proper permissions granted
CVE-2011-3959,buffer overflow way google chrome implemented locale information vulnerability affects one dependencies google copied repository edited work code overflow could lead potential denial service attacks fuzzer someone works outside google discovered vulnerability bug affected seven hundred versions chromium likely since close beginning mistake trusting dependency way google handles dependencies cloning dependencies manually changing items needed chromium project missing bug fixed important updates also might issue could mitigated way implemented also dependency likely unit tested google team
CVE-2013-2839,user attempts copy paste image via dragging image typecasted htmlimageelement without proper checks performed make sure cast legal allows illegal types image elements svgs casted htmlimageelement right casting performed cachedimage method called casted htmlimageelement since htmlimageelement larger virtual table svg file adjacent memory around casted svg used part virtual table values memory could controlled heap manipulation performed triggering bug allowing arbitrary code execution mistake occurred developer properly validate inputs which would coding mistake although argument made developer may followed design correctly user input validated ensure system receives expects also directly casting user input another form data also fairly large risk lead issues memory example casting illegal types htmlimageelement allowed access parts heap could manipulated user which highly dangerous
CVE-2016-1707,iphones remote attackers make malicious web sites look safe masking url trusted website like https google com believe primarily logic error expect url invalid first time ios web controller included chromium making sure url expected really anything url expected furthermore interesting case spoofing attack improper input validation vulnerability instead commonly url redirect bug exploit works inputing invalid url force error chrome
CVE-2015-1216,implementation custom bindings related windows google VERVER javascript engine left potential vulnerability attacker could trigger denial service attack cause issues due entity freed properly cwe gives brief mitigations use free one use language automatic memory management making sure set pointers null freeing entire VERVER module chromium built mainly c would incredibly difficult move everything different language mention fact would probably create noticeable inefficiencies vulnerability bit different conventional use free seeing exploitable entity actually set null modified code later function main mistake seems original implementation programmer put check null value would prevented leaking code later use free one harder vulnerabilities catch often overlooked unit tests show places expect case use free unconventional clear textbook examples luckily fix fairly simple properly mitigated vulnerability
CVE-2010-3256,google chrome properly limit number stored autocomplete entries which unspecified impact attack vectors possible overflill system creating form thousands hidden fields added list autocomplete fields mistake design mistake autocomplete feature limit amount items could store per form coding mistake design limit input solution limiting set number items seems like patch eliminate issue
CVE-2014-1741,couple cases lower level code handles rendering characters offset handled overflow sensitive manner might unspecified impacts via vectors related ranges open dos attacks another example minor coding mistake overlooked huge commit offending code subtracts offset without accounting possible overflow which minor part major rewrite subsystem fix another bug fix accounts handles way consisitant dom spec
CVE-2011-2783,chrome developer mode using extensions interface chrome extensions prompt user dialogue box loading unpacked extension extension available chrome store contains npapi netscape plugin application programming interface interface allows plugins browser extensions developed directly web browsers plugin like extensions without prompt easier malicious user modify chrome functionality via something like trojan horse attack vulnerability oversight types extensions could loaded ideally assuming restrictions place types extensions loaded which otherwise risk breaking distrust input protocol list extensions tested incremental testing anything related extensions loader modified nice ensuring npapi extensions correctly prompt user leave bit desired specifically may extensions left problem best course action ensure every type extension prompts user loaded intended
CVE-2016-5165,vulnerability allows attacker send specially crafted url makes use settings parameter chrome devtools inject malicous javascript script executed next time user opens developer tools chrome attacker write javascript modify exfiltrate data whatever site user opens devtools url would look something like following chrome devtools devtools remote serve rev 180642 devtools html settings 22watchexpressions 22 22 22alert document domain 22 22 think main take away vulnerability think carefully exactly allowing user implementing new feature important consider abuse misuse cases possible feature adding could mitigate especially accepting user inputs
CVE-2015-1266,attackers able bypass restrictions chrome access gui components accessible certain permissions proper route could attempting visit malformed url chrome url bar major mistake vulnerability thinking ahead input could spoofed trusted input user expected match string would valid route simply distrust input users could accounted
CVE-2013-6625,vulnerability example use free bug means chunk memory program given back operating system used things refernce memory used later program execution reference used program attempt use whatever data put original value could hazerdous memory written read code case use free occurs rendering html dom bug happens child node object dom removed reference node still kept despite fact memory freed child nodes removed mutation blur events occur dom another reference child node kept somewhere else use free occur fix change scope nodechildrenwillberemoved entire document instead document within container ensure references child node outside scope document within node modified fact vulnerability existed code reintroduced fact much refactoring going area code leads believe primary cause vulnerability miscommunication
CVE-2010-1231,vulnerability chrome safebrowsingresourcehandler which controls chain resourcehandlers browsing safe mode processing url resource decide whether loaded implementation safebrowsingresourcehandler simultaneously protective parsing url retrieved resource http headers caused headers resource possibly processed identifying url safe load headers processed resourcehandlers chain could use post processing header response number actions load requested url load url header response tell downloadmanager download file url location apply cookies browser etc could exploited using custom http headers start download malicious file could exploit program os ex pdf file exploits know adobe reader bug straight malware mistake attributed mostly design flaw point time development safebrowsing generally new feature chrome VERVER released jan VERVER 2010 vulnerability discovered jan VERVER 2010 team recently set process checking blacklists blocking cookies parsing urls loading partial resources page likely specific steps process disjoint easily extendable easily added miscommunication get done steps ended order
CVE-2015-1269,attackers bypass hsts restrictions due lack canonicalizing dns hostnames comparing hsts list hsts security policy declares web borwsers interact page via https connections fix attackers could add dot character end connection string use string completely lowercase which would compared hsts hpkp entries already preloaded system comparisons would allow attacker bypass secure connection gain access content initially intended users mistake made developers tried rely whiteboxing alone attempt normalize inputs may originally felt whiteboxing unlisted inputs able used therefore making inputs secure fix implemented looks proper according cwe incorperating normalization methods along original whiteboxing method
CVE-2011-3045,lack controlled space use added image library allowed certain png images expand VERVER VERVER gigabytes size triggering 32 bit signed integer overflow leading denial service believe mistake made resulted vulnerability occurred due team acceptance third party library appears assumed library would take care vulnerabilities within without checking first introduced bug probably realize png file unpack overflow 32 bit integer additionally appear unit tests related library which means assumed open source nature would result security issues fixed without much hassle true length time issue fix special png images could dos chromium
CVE-2016-1623,due implementation html parser unapproved frame component could attatch page time approved component detatching allowed remote attackers piggyback current state approved frame execute commands remotely system example design mistake system designed check method possible never advance skip guard altogether designed use different guarding method exploit may occurred
CVE-2015-1262,width field totalwidth initialized used areas code could caused denial service unspecified impact via unicode text mistake mostly design issue initialized variable initialized condition checked condition passed would return value never set value needed set earlier point code which mitiigate prevent issue mistakes similar could code reviews catch design coding flaws potential harm system one another way prevent something like would use tdd test driven development way going conditions harfbuzzshaper shape function could check values certain fields fields even set correct issue anything
CVE-2010-0660,chromium sends https url referer header http site redirecting secure https site unsecure http site referer header address previous web page which link currently requested page followed unsecure http site may obtain sensitive information embedded https url password reset links even security site compromised user site may want information shared mistake essentially handling edge case request made secure site unsecure site using redirect fix VERVER lines code check see referrer header cleared redirecting clear developer knew beginning repository referrer sent https site http cases implemented redirecting cwe vulnerability mitigations suggest could avoided architecture design phase drawing unambiguous trust boundaries would interesting see updates security related design documentation show redirect used leave site secured https fix appears well enough hard tell lesson learned developers mistake since unclear case missed complexity even safe say instances referrer crossing trust boundaries handeled future functionality repeat mistakes
CVE-2010-3252,program opened notification chrome terminated actively running notification closed notification would try detach longer existent program came cause corruption memory reason vulnerability occurred software engineers working never covered case notification chrome outlives program spawned actual problem memory freed done referenced issue team working paid attention covering unlikely possible scenarios use cases end like race condition probably uncommon maybe even unlikely program makes notifications last least long notifications unreasonable required simple fix adding method gets called notification provider terminates simply going detaching live notifications first little bit effort planning ahead could helped system overal integrity
CVE-2014-3803,blink rendering engine used chromium feature which allows attackers enable microphone access obtain speech recognition text users done using input element which uses deprecated attribute vulnerability could prevented x webkit speech feature removed shortly becoming deprecated decided deprecate feature mention would later removed specific deadline date fix disable deprecated feature which successful fixing vulnerability
CVE-2017-5109,ui spoofing browser javascript related functionality causes notification window another domain page displayed caused improper unload handler handling which allows permission request displayed domain navigating new domain example malicious website button takes google maps request location fix close permission bindings render frame host changes messages longer received run code permission service design oversight may prevented considering flow permissions switching frames considering invalid states prior implementation
CVE-2012-5155,chromium check mac os xs sandbox successfully initializes which means malicious attacker compromises chromium damage isnt contained throughout system privilege restriction implications attacker uses chromium hack system run could gain access private files system possibly run arbitrary code mistakes led vulnerability considering sandboxing osx considered used windows linux could simple misunderstanding overlook developers side things lesson learned vulnerability check initialization important subsystems components could compromise integrity system initialized properly mitigation cwe entry used since sandboxing osx initialized properly chromium shut compromised
CVE-2015-6790,chromium properly use html entities upon saving page allowing offline xss anchor tags escaped html characters following href attribute would render regular html entities could also exploited double quote character inside single quoted string made possible steal content csrf tokens making victim save open page included crafted anchor mixed quotes mistake made basic lack santization vulnerability third party tool seemed recieve little review testing due code vulnerability quickly easily fixed reported vulnerability existed long time fix applied sanitizing data saving satisfies standard mitigation could improved mitigation adding unit tests make sure regress largest mistake made trusting third party tool recieved little review vulnerability overlooked times modified could improved adding unit tests conducting security review tool integrating
CVE-2016-1641,image downloading function file related web content could potentially grab info freed order way exploiter could cause denial service attack demonstrated fuzzer favicon download cwe gives brief mitigations use free one use language automatic memory management making sure set pointers null freeing majority web contents subsystem built mainly c would incredibly difficult move everything different language mention fact would probably create noticeable inefficiencies fix actually involved rewriting function avoid problem area third party service entirely main mistake made vulnerability realizing third party service touching pieces code working codebase large near impossible cover everything however special attention must made anything kept within internal systems luckily mistakes handled quite well found unlike vulnerability cve 2015 1216 one actually picked test sort case fuzzer along even though developer working bug reproduce realized code still appeared unsafe went assigning fixed important brush bigger vulnerabilities like recreate first
CVE-2010-4036,url spoofing related vulnerability occurs user navigates back current page interrupts action browser commits previous url omnibar current page still second website example user goes www google com goes www hack attempt go back chrome put www google com omnibar www hack interrupt action alert cancels navigation update omnibar
CVE-2015-6781,integer overflow allows remote attacker cause denial service possibly unspecified impact via modified values font data looking issue report seemed stemmed coding mistake since part fix make sure value question wrap around reaches maximum integer getting vulnerability fixed lot miscommunications which team responsible fixing mistake which led vulnerability exist longer needed
CVE-2013-0891,integer overflow google chrome blob url request leads buffer overflow allowing attacker control specific function bytes read attacker lead denial service information disclosure unforeseen issues mistake made improper checking upon limits input number value testing boundary conditions mistake vulnerability within sub system chromium ability release sensitive information mistake lack unit testing someone realized boundaries could exploited another author went back input proper proper checking fix mistake vulnerability seems resolved boundary checking inputted variable types changed proper type however since seem change testing lack testing sure way seeing issue totally resolved
CVE-2013-6635,vulenrability located editing implmentation blink underlying web browser engine editing possible attempt use previously freed dom node cause denial service attack impacts using javascript code results removal said node processing document object model tree document object model language platform independent interface allows scripts programs access modify style content structure document dom tree usually created using html tags hierarchy document main mistake made coding mistake implmentation web engine blink interaction javascript code authors code base ensure node pointer correctly protected removed reference expected freed authors code mitigated vulnerability switching pointer which automated memory management smart pointer which abstract data type acts pointer also come automated memory management someone experience may knew javascript code could executed allocation pointer freeing pointer authors implmentated smart pointer without undue trouble
CVE-2015-1252,vulnerability chromium common utility functionality specifically new implementation partialcircularbuffer which basically buffer could wrap around n number times continuous write data implementation which c handle wrap around buffer write case large amounts data properly possibiliy resulting data written memory intended invalid write corruption data crashes significant security aspect issue allowing arbitrary code execution functionally buffer overflow scenario way could exploited would attacker found way access web logging utilized pushing large amount data target log write buffer which would result denial service attack system since particular issue common utility potential attack possibilities widespread would also depend partialcircularbuffer used different modules chosen cwe VERVER bounds write mitigation strategies listed however mitigation strategies cwe 119 improper restriction operations within bounds memory buffer which nvd lists class cve issue chosen cwe 787 exact issue occured nvd listed cwe 119 would consider applicable specifically mitigations implementation stage fix specifically addressing mitigation checking buffer boundaries accessing buffer loop make sure danger writing past allocated space since issue core lack checking proper space checking buffer size vs input size handling wrap around case fix moves wrap around content initial write loop ensure safety writing given input initial implementation simply include thorough enough testing catch edge case
CVE-2011-5319,application restrict access accelerometer data high rates allows attackers capture keystrokes moitor speech website without permissions prompt keystrokes speech part website interaction think bug really much could done hand team know attack however could something around events try always prevent attackers getting data different ideas resolve issue work appear proper fix limiting fast data read
CVE-2011-3925,vulnerability comes chrome handled interstitial pages which pages load expected webpage ad ask older VERVER trying reload page interstitial page caused memory corruption browser process crashed chrome actual mistake made code freed link memory continued try access memory interstitial page refreshed classic example freeing variable actually done mistake caused number larger factors code led vulnerability refactored large number times includes extracting classes combining classes shifting responsibilities redesigning internally handle interstitial pages led inconsistent confusing documentation small pieces code made sense prior refactoring
CVE-2016-1689,heap buffer overflow vulnerability found google chrome implementation media capture dom elements dom document object model elements object includes html xhtml xml formatted media capture dom elements essentially capturing information users actions video image etc which streamed back application used various things google chrome added feature bug html media element given size parameters wrong would check would attempt use resulting heap buffer overflow vulnerability seemed stem lack design around desired feature lack design caused software implemented trust inputs which trusted also seemed software created temporary use due fact team waiting specific library libyuv argbtoa become available use understandable extent companies always wait around new functionality however excuse poor design around problem lack awareness potential input disparities
CVE-2016-1632,attackers bypass intended access restrictions using javascript code attack causes incorrect cast limited information vulnerability say probably coding mistake potentially testing could done beforehand
CVE-2010-3246,google chrome pop blocker could bypassed form submit opened window blank would allow site gain ability open x number chrome tabs hard say someone trust third party tool widely trusted webkit definitely tested however strong negative path test case would abuse case bug test implemented appears sufficient mitigation fix looks proper
CVE-2012-5108,design problem way chromium handled multi threaded audio output use audio output devices resulted race condition audio output device first created initialized could interrupted potentially deleted startup finished resulting pointer callback function null use memory freed allowed arbitrary code executed mistakes made considering design audio output device thread stopped execution deleted developers count multiple flows execution separate threads execution may interrupted audio device may deleted finishes starting another mistake checking null pointer trying use
CVE-2015-1228,update counter method called text updating method bug causing method updates counter set node layout reset result stale text boxes may left behind program complete causes variables initialize incorrectly fail initialize following sessions causing program crash tries use variable denial serivce attackers aware vulnerability could work trigger crash intentionally different text updating method marks node layout used replacement making sure right validations made stale uninitialized text boxes left behind mistake simple design mistake start project team used method clear stale data certain text boxes mistake probably due testing area proper unit testing would found likely found early mitigation build compilation used via change method vulnerability found fuzzer testing note may also implementation error initial method used similar fixing method except original method perform validation checking possible initial method used simply expected
CVE-2010-1503,cross site scripting xss vulnerability google chrome allows remote attackers inject web scripts html using chrome net internals users access net internals typing chrome net internals url field chrome web browser which return displays network log event stream vulnerability occured user input html escaped coding mistake made seems simple programming error programmer commit vcc used function escapeforhtml multiple times prior vulnerable line code seems though neglected string argument key needed html encoded well
CVE-2016-1647,navigation implementation google chrome causes use free vulnerability allows remote attackers cause denial service bug allows unauthorized disclosure information allows unauthorized modification allows disruption service mistakes led vulnerability coding design mistakes fullscreen widget created webcontentsimpl stores routing id fullscreen widget routing id wci assumes widget belongs process current main frame getrendermanager current host getprocess which normally compromised renderer swap process main frame keeping fullscreen widget alive normally fullscreen widget would deleted renderer navigates exception navigation within page fullscreen kept alive happens example url fragment changes case renderer sets framehostmsg didcommitprovisionalload params within page true browser mostly trusts even navigation within page process swapped renderer swaps process sets within page true fullscreen widget routing id end pointing wrong widget new process renderer closes fullscreen wrong widget deleted deleted manually renderwidgethostimpl destroy fullscreen widgets owned smart pointer normal widgets owned scoped ptr render widget host renderviewhostimpl though widget manually deleted attacker scoped ptr rvhi ends holding dangling pointer
CVE-2016-1667,web pages constructed using tree structure nodes objects tree structure constantly updates different events occur one updates happens tree stucture called node adoption nodes assigned ownership inserted document node adoption operations script execution disabled since document modified attackers may violate origin policy origin policy allows script execution web pages web pages originate origin policy broken external web page may execute scripting web page trusted origin allows attackers send data web page trusted page user believe vulnerability caused due poor design believe programmer responsibility think scenarios something could go wrong adopting nodes dom believe chromium team used something like state pattern whenever dom manipulation would occur system would state scripts executed without state pattern programmer responsibility think operation might need sort disablement script execution system scales proven similar vulnerability mentioned developers comments sort relaince developer think scenarios lead xss vulnerability
CVE-2016-1625,due lack checking intended target web addresses malicious extensions capable changing suggested links brought users clicked allows extensions navigate users malicious websites run flash programs host device remote attackers could use grab file host device vulnerability arose new functionality added ntp chromium provides user visited sites suggested ones without checking target link link ultimately design mistake developers never thought attack would possible exploit bug ever created could huge consequences ever additionally vulnerability introduced fix subsystem moved around allowing bug hide longer normal
CVE-2016-1687,vulnerability chromium involved exposure private classes related chrome extensions vulnerability exploited lead attackers obtaining sensitive information related extensions vulnerability seems like accidental leakage history code see initial code beleived hidden end fix solved mentioned ensuring privates private leading beleive initially thought private possibly misunderstanding technology actually hide information public feature originally used hide internal state javascript classes using utils expose ended opposite effect allowed extensions see private information
CVE-2013-2914,color chooser dialog chrome VERVER listener colorchooserdialog properly dereference color chooser dialog destroyed page destruction page close led stale reference attackers could use cause denial service coding mistake pretty simple one original author simply kill reference page closed destroyed essentially xss vulnerability stale reference attackers cause denial service attack using vectors reference vulnerability introduced initial commit exposed chrome tried initially make aura obsolete client meant provide notifications notification details client outside chrome original author must forgotten needed destroy reference used notice leaving stale reference color chooser dialog vulnerability could prevented easy thing overlook next time sure author make sure something like happen
CVE-2010-4035,bug autofill translation features which could allow attackers cause application crash remotely therefore introducing denial service vulnerability crash caused accessing pointer freed reason possible way chrome team using scoped pointer management infobar delegate pointer scoped pointers automatic memory management which seems cleaned pointer still use problem seems caused coding mistake subsystems vulnerability existed problem involved incorrect usage pointers low level languages memory management done manually tricky would shocking errors ever occurred inside project large chrome interesting bug fact automatically managed pointers which supposed make things easier actually caused bug happen team decided memory management which could explicit control
CVE-2010-4490,malformed video could cause application crash creating indexing error malformed video stream could stream index large attempt index stream index would cause buffer overflow scenario buffer overflow causing denial service causing segmentation fault resulting tab crashing buffer overflow also potentially vulnerable data corruption malicious code execution mistake made logic mistake which include edge case check malformed streams which allowed buffer overflow vulnerability exist due indexing may bigger stream size understandable would overlooked module complex bug log discussed concerns whether malformed stream could cause vulnerability got bad state due previous root cause
CVE-2011-2864,vulnerability google chrome VERVER way third party software harfbuzz handles tibetan characters harfbuzz software development library text shaping which process converting unicode text glyph indices positions implementation handle case character tibetan characters table bound best causes crash worst kind vulnerability lead arbitrary read write operations performed unauthorized memory locations buffer overflow possible cross site scripting xss scenario attacker may able execute arbitrary code unspecified vectors alter intended control flow read sensitive information cause system crash coding mistake made third party software led index bound error coding mistake made piece third party software led index bound error approach important hard investigate manually debug third party codebases memory corruption errors
CVE-2011-1305,vulnerability affects linux mac osx users attacker cause denial service via certain aspects use linked lists databases caused race conditions found webkit patch eventually lead crashes mutexes originally place prevent agianst race conditions removed thought webkit code interacting sqlite single threaded would need worry race conditions way came using faulty patch webkit interacting rest code interacts sqlite could avoided thorough analysis patch moving since fix revert things beforehand could avoided comprehensive test new patch integrating
CVE-2016-5166,using save page feature saves web page web resources also saves locally uploaded files page seems case start vulnerability technology got layered top like chrome extensions web workers became potential vulnerability using newer technology exploit older ideas started normal feature later programs life due expanding functionality became vulnerability later time would probably considered design mistake
CVE-2013-6643,improper authentification handling google chrome signin popup vulnerability allowed remote attackers send malicious url victim insert account victim google chrome sync victim private data without victim knowledge attacker could close untrusted signin confirm dialog which would sync user data fix vulnerability cancel signin untrusted signin confirm dialog closed without user clicking ok got vulnerability simple oversight untrusted signin confirm dialog closed without clicking ok got originally continued signin ok got pressed fix abort signin untrusted signing confirm dialog closed without clicking ok got
CVE-2010-3413,vulnerability browser built popup blocker functionality blocker sometimes attempt read empty list blocked contents results blocker reading null pointer causing browser crash one big exploit could arise vulnerability denial service dos keeping popup blocker protecting user browser potentially harmful popups vulnerability arose popup blocker checking value list blocked items trying access caused try read list even null checking situations like vital every secure program operation checks keep malfunctioning causing unintended potentially harmful consequences vulnerability coded right beginning popup blocker made discovered common user reported problem developers vulnerability reported caused serious damage users discovered late could frustrated others future
CVE-2010-4487,cve affects osx linux attacker could create page would serve response content disposition attachment file html extension content disposition attachment forces download dialog appear auto selects attacker malicious html file user clicks file name download dialog malicious html file loads downloads swf file user downloads directory settimeout used delay loading swf file finished downloading 5 seconds swf file downloaded attacker loads swf file which written grab contents etc passwd displays contents file screen sensitive information written browser easily transmitted back via javascript believe mistake happened developers finally finished download exe cc file forgot fill complete blacklist non windows operating systems two mitigations provided cwe first use blacklist whitelist good idea scenario predict exactly which file extensions people want pass content disposition attachment second rely exclusively blacklist validation particular cve believe blacklist fine use either mitigations add extensions file extensions blacklist order fix vulnerability
CVE-2011-1813,piece data created heap multiple pointers which point data browser used javascript allows certain parts webpage adopted others particular case iframe adopted pointer points iframe adjusted pointer points invalid piece data which crashes program developers written better comments maintainers developers catch pointers pointing able tell pointer left dangling quite difficult one writing c code complexity especially case pointers passed around result javascript code feeling valgrind another internal test able look data heap pointers check data freed pointers could danger growing stale also seems like test might enabled point ended catching crash perhaps disabled another commit vcc reenabled although find which commit
CVE-2009-3934,function webframeloaderclient allowed remote attackers cause denial service page local link page local link link redirects back page interacted directly related empty redirect chain which allows attackers endlessly redirect urls vulnerability taken advantage attackers abused page local link which would redirect back endlessly coding mistake fault cause vulnerability piece logic ds hasredirectchain always assumed exist vcc checking see logic existed allowed attackers take advantage denial service vulnerability redirectly urls without limit essentially single line code missing fix vulnerability running logic statement required make sure ds hasredirectchain existed continuing logic
CVE-2011-2834,vulnerability memory address freed twice called double free found libmxl2 xml parsing library chromium using vulverability allow attackers cause denial service attack set users longer able use browser known sequence activities could lead exploit vulnerability reason vulnerability existed coding mistake objects freed twice separate locations made hard detect double free vulnerability first place developers extra cautious freeing objects spent time tracing code identify issue static analysis tool could also utilized search double free instances another perhaps better mitigation would set pointer object null freeing ensure freed twice fix look proper error states added prevent code entering code block causes double free fix remove possibility double free attacker able manipulate state system avoid entering error state double free would still possible developers fixed multiple related double free issues within source code file would smart check rest file double free vulnerabilities fixing first issue instead fixing issues one one
CVE-2011-1196,ogg container allows streaming presenting digital multimedia users ogg container made byte sequence sections sequence represent different component ogg page header failure track index operations working lead buffer case heap overflows which cause multitude problems vulnerability starts html page loads another html page iframe ogg file loaded iframe html page whole iframe html page replaced different ogg file leads chrome crash due heap corruption entirely clear root cause vulnerability comment review VERVER stating stream index mysteriously becoming invalid leads think shared mutable data which mutated thread safe manner
CVE-2014-3190,use free vulnerability present currenttarget function event objects core events subsystem google chrome allowed remote attackers cause chrome crash unspecificed impacts via javascript code would access source vulnerability attacker would able construct vectors infect chrome user browsers remotely via download simple javascript program visited website result would denial service attack preventing user accessing functionality chrome coding mistake made essentially returning raw pointer memory rather reference using raw pointer access corresponding object memory freed resulted memory violation application crash mistake could avoided stronger sense awareness existing functionality subsystem worked simply knowing value returned raw pointer memory could inspired defensive programming approach seemed bit issue terms team communication original author code contained vulnerability still team time commit seemed reluctant admit vulnerability reported could cause code different team member took bug fix supervisor asserted someone needed claim responsibility bug fix supervisor seemed irritated major security vulnerability took month fix first reported
CVE-2010-4488,bug involves unhandled case which user behind proxy page requesting returns VERVER error proxy authentication required chrome handle situation causing app crash exploitation could ultimately cause denial service chrome app could coding design error obviously system designed handling case however coding developer see possibility failure took fix condition test whether connection behind proxy succeeded fix adhere cwe mitigations fix appears correct however recent versions file original fix present handling scenario still present differnt form makes seem original fix rock solid
CVE-2015-1284,vulnerability caused blink functionality chrome checking exceeding maximum frame amount amount set allows external attacker create denial service attack creating VERVER frames which reads memory freed mistake lead vulnerability checking value input storing value input instead way around allowed attacker create script VERVER frames which system allows would try access memory freed crash creates denial service coding mistake which caught code review fix looks proper adds check security consequences rather checking input potential mitigations cwe choose language provides automatic memory management which really option case mitigation set pointers null freeing however fault results part vulnerability
CVE-2016-1640,chrome user tries install extension website website could redirect another website still show extension installation dialogue started previous website example crafted website could show link install official extension service say google user clicks chrome take google support page prompted extension installation dialogue initiated crafted website presented extension could fake extension intended attack user would think official one given user official support website dialog show origin gives even credibility attack poor design decisions led vulnerability vulnerability would occurred first place thought showing origin install dialog considered killing dialog redirected different website believe vulnerability design requirements mistakes requirements mentioned behavior allowed code could implemented way however understand impossible think scenarios requirements proper design decisions made regarding handle scenario user navigates different page user redirected different page based bug report seems like made better design decision next version chrome vulnerability needed medium level security attention install dialog show origin users could tricked installing malicious extensions initial fix seemed like hack simply trying mitigate problem second fix improved previous fix however final solution redesign architecture dialog shown comment bug report indicated planning redesign dialog looks like knew proper mitigation problem
CVE-2014-3191,object called renderlayerscrollablearea called method updatewidgetpositions which performed various layout style updates render process object called renderlayer destroyed object parent renderlayerscrollablearea another object scrollanimator layout style updates finished code attempted destroyed renderlayerscrollablearea object call method updatecompositionlayersafterscroll causing memory error since render tree destroyed exploitation vulnerability may resulted dos due program failure based discussions developers bug reports sounds like vulnerability considered initially occurred far call stack failure consider might happen render tree able destroy inside probably design failure consideration misuse abuse cases may helped catch vulnerability earlier initial fix vulnerability first bug 322891 insufficient developers simply added assert attempt catch use free notes bug seems developers intended improve solution future get vulnerability occurred year later new fix moved call causing destruction object use free which appropriate
CVE-2008-6998,google chrome problem user typed VERVER chars url hovered url url preview show backend array held url typed would overflow shut system could also lead users getting pointer current method telling code go somewhere attacker code planted run arbitrary code system crashes design coding mistake think design mistake overflow problems followed commit url overflow problem missing crucial check array size code which means overlooking problem entirely could also fall category coding mistakes nit pick errors really belong design phase extra fixes add making sure user inputs always checked white black lists solve problems even come solving problem show system released much harder spot errors implement checks input validations programming
CVE-2014-7935,tts message filter cc file versions google chrome VERVER vulnerability would try use memory immediately freed would allow attackers use text speech utterances crash user current tab google chrome possibly execute attacks executing remote code looking fix code obviously coding mistake coding mistake used weak ptr class prevent uaf weak ptr class part code allowing use free vulnerability occur team done thorough testing unit tests automation tests believe would found vulnerability lot sooner looking possible mitigations cwe fix code change code language set pointers null freed second one excused though uses complex data structure
CVE-2013-2842,frame removed parent frame could still referenced could lead use free error could cause dos potentially give attacker ability interact user computer breaking assigned memory buffers memory locations computer mistake freed portion memory went along frame renderer remove references fix check frame used make sure freed yet
CVE-2016-1698,function allows extention create custom type createcustomtype actually validate module type since type ever validated risk loading arbitrary modules disclosing sensitive information attacker definition module handled properly big design mistake allowing use multiple types without validating types actually safe initializing parts code depend setup work exactly intended without validation parts code work way fix hard coded addition whitelist huge step right direction could better way implement whitelist rather hard code within type creation however although keeping data secure important
CVE-2010-3117,chrome crashes shutdown due notification ui manager closed early enough issue ultimately stems kept track lifespans object dependencies modifying object lifespan additionally impact issue enhanced providing potential sandbox escape attacker which need case
CVE-2015-1221,vulnerability found google blink engine allows attackers remotely impact service referring finalized objects using misordering database thread shutdown operations could lead denial service unspecified impacts vulnerability result small coding mistake create large security impact fix simple involving adding new function function call terminate thread
CVE-2010-4575,program extension created malicious intent close windows installed another user considered denial service may cause application crash user completes specific set tasks certain order case chromium user could install extension serves believe serves another purpose meant exploit vulnerability looks like simply coding mistake made
CVE-2011-2843,chrome handling media buffers correctly media buffer reading bound values attackers able cause denial service vectors avcodec open method read past allocated memory fixed allocating source buffers fix would cater chunked nature get bits function developers acknowledge ugly solution necessary function design coding mistake resulted problem accounted size ffpmeg videos could predicted possibility buffer overflow order prevent vulnerability could done detailed review ffpmeg data review would forsee possible buffer overflow
CVE-2013-6646,implementation database observer causes chrome crash due invalid pointer error multiple databases opened observer due script continuously reloading multiple shared worker methods scripts created multiple databases specifically variable passed observer worker thread already ended opens user free uaf vulnerability type memory corruption bug case opens possibility malicious users cause denial service attack shutting worker processes related worker methods although crashes attributed questionable coding practices one ultimately caused believe design mistake allowing multiple shared worker events occur simultaneously without understanding potential problems could present fact one two issues came involving uaf vulnerabilities regarding shared workers showed overlooked elements design corroborated fact one developers realize bug occurring process exit causing think priority bug lower realistically even point class worker bugs mentioned implying could even larger two issues said fix seem proper developers fixed core issue which understanding proper point kill worker process
CVE-2011-0485,speech data input properly handled unspecificed speech data processed speech input disabled arbitrary code executed creating pointers freed memory aka stale pointers attempts use stale pointers crash system cause unexpected behavior mistake handling case feature disabled intended function accepting input least part input expected finite part solution whitelist portion input recommended mitigation strategy
CVE-2015-1209,crash forced crafted java script exploitable crash occurs chromium underlying c code freed data accidentally read javascript causes crash adding element dom altering certain fields removing dom trying access modify certain fields element removed last step occur process removing dom without additional javascript code written user depending previous steps words html file uses javascript dynamically add elelement remove continues modify removed try access old element chromium access memory already freed using bad pointer trigger chromium addresssanitizer which stop chromium something even worse happens addresssanitizer may always caught error arbitrary code execution possible mistake considering possibilities first foremost design requirement mistake also coding mistake since designed possibility freed memory accessed additionally vulnerability touched two different people lifecycle one committed original bug another person fixed bug VERVER years fix set freed element null added checks satisfy mitigations mentioned cwe
CVE-2011-1186,chrome linux bug two calls open print dialog choose printer made parallel could crash bunch print commands issued time might executed parallel potential dos flaw one tough call mistake highly unlikely occur except debug printing almost never happens concurrently occasionally reproducable anyway mistake assuming printing always thread safe chose fix issue would required work worth instead fixed particular issue would go back looking like worked
CVE-2014-3166,provided vulnerability attackers would able leverage multiple domains access sensitive information pooling multiple domains allows attacker bypass public key pinning pkp sites bypassing pkp sites opens information disclosure vulnerability examples given show possible malicious actor pretend website exploiting vulnerability example reporter provides screenshot demonstrating www twitter com displaying content rather real twitter site main mistake lead vulnerability appears oversight check allow invalid certificates become pooling candidates two levels which mistake could likely taken place firstly checks seems thought nonetheless overlooked poor documentation risks requirements team management level could blame secondly coding level developers issue mind would likely accounted came fix vulnerability follows cwe potential mitigation say separating centralizing checks separation privilege however exactly directly significant specific vulnerability
CVE-2014-3169,piece data core dom containernode cpp which used chromes blink web engine could allow remote attackers cause denial service certain conditions well effects messing script execution node removal file used part blink domain object model which incorperates brower logic storing amd displaying html css team never really seemed pinpoint actual issue pinpointed solution seems never able reproduce actual bug said hard discern actually caused issue since never really pinpointed actual bug simple coding mistake though one likely could avoided proper unit testing however provide useful enough error message able fixed think biggest issue would seems like bug identified beforehand inserted proper workflow get fixed never bug could potentially never found fix submitted separate issue originally found
CVE-2011-0779,google chrome properly handle missing key extension which allows remote attackers cause denial service application crash via crafted extension extension packaged extension assigned unique key pair extension id based hash public key private key used sign version extension must secured public access variable gets initialized extension unpacking service sized based extention header signature size hacker removed signature providing empty key would get initialized zero cause crash system since unexpected leading denial service basically bug introduced process refactoring code pull logic unpacking extensions service complex writer new file handle new logic forgot check make sure variable initialized would initialized VERVER bytes many tests performed code around header size test check header size zero never included however far could tell author code refactoring large portion system could done better assume user provided content range unpredictable values like 0 header attached extension which developed users however checks place code check header size think edge case considered team especially initializing variables size checks always size based kind user driven input size driven user based input could user find way provide huge value overflowing buffer could user provide negative value even zero value team checked three use cases rather max size case
CVE-2015-1224,image decoder ensure alpha plane dimensions identical image dimensions allows remote attacker cause denial service attack bounds read vulnerability bit miscommunication design mistake initially support video streams alpha buffers larger image buffer library changed year first implementation introduced vulnerability account vulnerability introduced code written copy video data buffer assumed image alpha plane dimensions stride buffer width according video format dimensions must writer code assumed valid input without check video plane dimensions differed alpha plane stride also different code copy alpha plane used stride video plane incorrect amount data read causing overflow interestingly strides video alpha planes differ even dimensions means buffer reading issue may occur even valid vp8 video reviewers bug noticed issue fixed along dimension check check malformed vp8 data added check threw error alpha plane dimensions different image plane fix adds input validation which primary mitigation listed cwe 125 page
CVE-2011-3092,vulnerability google javascript engine v8 way handled regular expressions regexes implementation which javascript called native c code handle capture overrides properly resulted data written memory intended invalid write best causes crash worst kind vulnerability lead arbitrary code execution buffer overflow way could exploited would attacker access writing javascript possible cross site scripting xss scenario someone simply went attacker page javascript exploited vulnerability coding mistake made essentially integer overflow led miscalculating memory buffers mistake underlying native code rather misusing c api fix actually javascript implementation regexp vulnerability introduced two commits really one person working trying fix boundary condition working vulnerability per se working boundary condition still missed one condition part VERVER lot decisions made changing handled natively handled javascript navigating exactly responsibilities native code versus built javascript libraries going key preventing vulnerabilities
CVE-2015-6784,chrome offers feature allows download web pages local machine later open webpage files local machine download webpage chrome adds comment top show url page downloaded url escaped added document therefore attacker construct url contains code modify page exfiltrate data page major mistake made input accepted user added document without sanitized important think types input could cause problems sanitize always consider abuse misuse cases dealing inputs coming outside boundary trust application
CVE-2015-1361,vulnerability chromium third party tools image decoding consisted uninitialized variable utilized constructor found automatically fuzzer static code analysis tool analyzed code identified issue general sense vulnerability lead things like crashes trying utilize segment code calls upon unitialized value however case uninitialized value initialized constructor class used making functionally optional variable usage literally impact operations thing static analysis tool would unhappy vulnerability simply coding mistake simple one static code analysis tool picked assume reason fixed long literally effect uninitialized value initialized constructor given class making functionally optional variable usage literally impact operations thing fuzzing tool pick unhappy developer fix even says simply prevent tools picking comment initialize hasalpha value calling operator lest tools complain using uninitialized value mitigations beyond pay attention coding sure initialize variables
CVE-2016-5149,understand vulnerability important understand iframe html pages tag called iframe essentially loads different web page embeds parent page which current html document iframes used variety things like embedding media web page embedding applets document vulnerability related iframes allows attackers exploit slow loading times iframe run arbitrary content scripts iframe parent page specifically vulnerability related chrome extensions source url iframe set chrome extension url attacker inject javascript parent page frame loaded essentially spoof chrome extensions instance one would able access chrome extension apis steal authentication cookies bypass security measures even send fake messages extensions name legitimate extension think biggest issue came vulnerability life span far long took react according bug report took VERVER months resolve bug which unbelievable amount time high severity high priority bug like one fix involved simple validation new tests which may indicate oversight original vcc although vulnerability would difficult predict since relied race condition however severe lack communication lead vulnerability living long long periods time little effort put resolving bug which exposed application really dangerous spoofing attacks
CVE-2009-1414,google chrome 2 0 x allows global objects persist across page transitions allowing easier univeral xss attacks launching chrome uri overwrite gobal variables asynchronous load pages coding mistakes conjunction code rot resulted improper argument parsing allowing code injection use uris launching chrome required uri parser allowed misuse chrome though lauching unspecified pages outside script due unintended access use chrome uris deprecated removed fix
CVE-2010-3415,geolocation module causing memory corruption occur due able write location outside intended boudaries given design mistakes lead vulnerability happening issue storing object inccorect place accessed old values could prevented simple code design review
CVE-2014-1703,piece memory websocketdispatcherhost sendordrop function used freed file primarily deals creation web sockets server well sending recieving messages function question dealt specifically sending message comprimising function could allowed remote attackers control arguments deletewebsockethost memory reallocated issue pretty clearly issue allocating memory correctly something could avoided implementing proper unit testing issue really would detected fuzzer which found however appear effort made make sure issue would never happen new unit tests created
CVE-2016-1668,custom layout web framework chromium blink creates global proxy objects which changes type runtime changes bypasses origin policy allows one web page access data resources another webpage long origin which allow malicious attackers run arbitrary javascript code access private resources vulnerability occured original creator iterable h simple coding mistake fully understand software engineering security fully understand work code VERVER objects line code got job done came security implications used correctly malicious attacker lesson learned vulnerability fully know understand objects working defense depth
CVE-2011-2845,attacker use vulnerability spoof value url bar means victim could rerouted different website still see intended address url bar occurred navigating different area page known page fragment mistake proper communication navigationcontroller renderer since navigationcontroller needs communicate historycontroller figure go user presses back button allowed time race condition form confused navigationcontroller allowing stale entries
CVE-2013-2858,vulnerability versions google chrome VERVER html5 implementation audio would try use memory immediately freed would allow attackers crash user current tab google chrome believe design mistake part team looking fix vcc changed seems team never thought someone would try programatically change audio source redesign client implementation web media player include mutex states make sure memory used immediately freed
CVE-2010-4484,improper closure websql databases web page api storing data databases queried using variant sql incognito mode which allows attacker write script opens databases well quota limit thus causing denial service exanple script would look like script function runtest try var db opendatabase overquotaopen 10000000 catch err script body onload runtest fix simply close html tables incognito mode finished original issue code author actually negating line code closing databases mistake severe lead crashing chrome browser incognito mistake primarily coding mistake forgetting take negation applied closing html database use fix simple vulnerability mitigated freeing memory case freeing closing database called issue human error including negation one needed
CVE-2015-1234,vulnerability consequence gpu native client application interact essentially communicate using threads shared memory send commands receive return values problem specific block code accessed specific resource untrusted shared memory race condition multiple threads trying access modify size shared resource timing threads perfect would possible access resource validate later modify cause buffer overflow which means attacker could potentially execute piece code buffer overlow issue mostly race condition allows vulnerability feel vulnerability design mistake followed maintainability issues quite bit reliance untrusted shared memory way different processes communicate part architecture application which means difficult change reliance combined complexity comes naturally concurrent processes exposes application myriad issues may difficult identify moreover multiple code design flaws overlooked atomicity certain operations code words looking vcc comparing fix seemed like original code using easiest path retrieve data shared memory even operations atomic introduced possibility race conditions since code present years fix propagated parts system fact even discussion bug report volatile memory parts code identified vulnerability exposed maintainability issues required time effort developers finally fix seems implement proper ways deal race condition issue specifically use volatile type modifiers code indicate use untrusted shared memory addition fix also introduces better use atomic operations avoiding calculate access write shared memory times necessary
CVE-2015-6765,attacker could url accessed deleted hence causing browser crash user accessing url link case would crash due caused error storing entries fetchers allows attacker overload pending list entries crash browser running fetcher allows uaf user free vulnerability also known browser crashing bug example referencing memory say link freed deleted destroyed would cause browser crash seems another one mistakes developer forget complete test plan would say design mistake mix requirements coding critical vulnerability developer aware cases thinking tests plan design system lead serious issues
CVE-2010-4576,improper handling certain code calls allow denial service dos type vulnerability case dos vulnerability caused null pointer exception which could triggered using crafted javascript code creates web worker vulnerability result simple coding mistake writer include null check could avoided thoroughly checking input code reviews could also help prevent simple coding mistakes like
CVE-2014-1700,involves use free vulnerability modules speech speechsynthesis cpp file blink component google chrome vulnerability allowed remote attackers cause denial service using utterance data structure contained module utterance continuous piece speech without pause fitting since used speech module blink project utterances properly ended starting another utterance created use free vulnerability since utterances could still accessed even memory freed attackers able take advantage cause denial service attack system supposed asynchronous one utterance used time however next utterance queue would sometimes called previous one removed queue fix mistake involved changing logic ensured system would asynchronous
CVE-2015-1295,opening pdf file chromium client would pause seconds give message upon hitting ok escape chromium would crash due program handling icp correctly vulnerability seemed caused lack managing input file didnt correctly handle nested icp people potentially able cause crashes printing messages vulnerability alone already causing issues alone user loading specific file short always make sure design able handle potential input may recieve
CVE-2015-1281,chromium extensions adblock pro executed javascript would break csp content security policy checks attackers able load image would like possibly use image request access user sensitive data classic case bug fix causing another bug therefore best way avoid situations like make sure everything properly regularaly tested even though test general relating code tests specifically honed cause issue which allowed become problem engineers may felt rushed fix original bug which could caused fully consider implications fix
CVE-2014-7932,vulnerability refers attacker attempts access memory freed could cause program crash could allow full remote code execution capabilities case vulnerability consequences denial service pending updates detached elements could happen vulnerability found element detach function core dom element cpp dom implementation blink which found google chrome versions google chrome version VERVER main mistake lead vulnerability trying update element trying detach free memory believe mainly design mistake code element scheduled update detached code needed moved element update element detached fix simple dealt quite bit time discovered
CVE-2016-5174,browser window toggle requests go unprocessed which allows attackers remote sites create unsuppressed popups causing dos denial service spamming browser causing crash fullscreen mode would also get stuck unable leave origin vulnerability lack input validation remote target site certain conditions remote site able push popups user browser open without asking user consent lack input due improper handling particular use case flash objects filtered popups therefore opened forcibly user let vulernable dos attack spamming host browser redirects malicious sites likely due missing security requirements flash popup handling following yagni principle fix follows mitigations cwe however noticed fix partial resolved issue fullscreen stuck popups remain unhandled which leads believe proper mitigations followed fix proper
CVE-2016-1711,google fork webkit blink implements loading mechanism web frames properly prevent navigating frame detaching object helps load content documents frame specifically happens starting document load middle detaching loader object cause new loader object cleared prematurely attacker clever quick enough set loader object use load malicious webpage completely bypassing chrome origin policy which normally prevents webpages accessing data webpages originate place main mistake made vulnerability less resource management issue combined mistake logic first detaching document loader handled correctly leading functionality remaining system without normal protections exploits second necessary operations detaching document loader either occurring occurring needed combined make serious problem code base also clearly complex issue resolve took two separate bug reports consequently two cve entries vulnerability properly fixed
CVE-2015-1272,heap use memory freed chrome content renderer gpu vulnerability allows remote attackers deny service victim possibly allow unintended code execution vulnerability oversight terms properly freeing memory fix modify way gpu channel destroyed verifying always main thread properly handle channel null state
CVE-2015-1299,issue timers removed reference timer used timers set lived heap problem logic ended freeing removing timer due bad conditional conditional attempted compare 80 bit integer 64 bit integer would cause program update heap make duplicate timer eventually timer would deleted duplicate which pointer original would used fix complete overhaul timer file remove references heap use reliable scheduler vulnerability complex issue never really led defined solution started fact made decision create heap use scheduler issue needed added good amount complexity which makes security difficult addition relatively unpopular area people familiar section allowed bug exist quite sometime first found next issue fact unit tests solution found allowed plenty findable mistakes pass many three lastly way came solution problematic looked like git history properly test solution system whole led four reverts could stem fact instead investigating specific solution wiped entire subsystem
CVE-2010-0644,google chrome socks VERVER proxy server configured dns queries forwarded socks VERVER proxy specific version dns queries performed local network instead could allow remote dns servers obtain sensitive information identity client user via requets logging user sets proxy like socks VERVER expect send data secure line google chrome configure correctly use default resulting users believing set reality still sending ip dns servers
CVE-2015-1227,function dragging image reuslts improper initialization could result unallocated memory accessed turn causes failed image decoding remote attackers trigger impact unspecified default orientation image used vulnerability came design flaw situation allocation memory depended image orientation clause seem account allocation failed however state object allocating memory resulted improper initialization made sure specific function depend case
CVE-2013-0907,vulnerability involves race condition occurs google chrome versions VERVER vulnerability allows attackers remotely cause denial service system possible threats relating threads asynchronous threading race condition involves videorendererbase object destroyed main thread function interleaving videorendererbase stop outstanding asynchronous calls videodecoder would result continuing execute code e starting thread without intending stopped videorendererbase common manifestation bug crashing threadmain videorendererbase destroyed type attack could happen race condition allows temporary access shared resources shared resource modified another code sequence operating concurrently could allow attacker simiply modify resource modify things page create pop ups user click share private information cause denial services could crash chrome tab involves video page main mistake made led vulnerability using proper threading practices caused threads run much unit testing threading later detected crash future would recommended maintainability factors include unit testing topics like threading precise happne easily overall seems like oversight threading main issue
CVE-2016-5130,third party dependency properly handle forward behavior browser vulnerability gave attackers ability hijack button send users link retreat using back arrow interesting problem way spoofing vulnerability leads denial service whatever chrome supposed forward website supposed navigate reachable method forward page previously visit mistake simply used third party dependancy bug could lead spoofing falsifying forward button mistake occured developers understanding thorough enough know consequences using blink package would consider design coding mistake mitigation provided design architecture section mitigation carefully address permissions users system seems approach chromium solution carefully manage behavior forward arrow resetting clearing children appropriate
CVE-2011-3960,google chrome decode audio data properly allowing remote hackers cause denial service using unspecified attack paths mistake fault lack testing issue comes version ffmpeg using checked issues particular version ffmpeg incorporating chromium use thorough testing
CVE-2010-0656,webkit given false directory url section show page displays directories server response xmlhttprequest file actually directory based upon xhr requests chrome browser allows attacker scope server file system leading exploits origin bug really commit code error structural issue browsers safari got away allowing local directory access denying file directory access urls patch added webkit webkitgtk VERVER contains change problem depends browser ability generate local directory listings tomas hoger fix implementaion mitigation rather fully blocking security risk mitigated rather blocked availability usability removed directory listing sense
CVE-2014-3201,core rendering compositing renderlayercompositor cpp blink used google chrome VERVER android properly handle certain iframe overflow condition which allows remote attackers spoof content via crafted web site interferes scrollbar cve allowed applications iframe modify scrollbar via css allowing iframe spoof content website outside actual frame vulnerability came direct mistakes per say rather fact iframe able modify scrollbar use spoof content fixed bounding frames overflow likely could fixed somewhere else
CVE-2015-1211,privilege escalation using file system api store worker script allowed https http request specifying element trigger service workers caused privilege exploit service worker allow api interact https http violation least privilege principle
CVE-2011-2858,vulnerability function called handledrawarrays inside gpu subsystem which handles rendering function handledrawarrays handling properly triangular arrays triangular array length row one last problem caused properly handling conversion types hold positive integers unsigned types integers positive negative signed caused function access values arrays which bounds read array caused error prevented services running vulnerability caused improper conversion unsigned signed resulted bounds read array given which gave error led code crashing first noticed class vulnerability massive started migrating classes inside class outside classes additionally also noticed one person worked lot features related class ultimately caused vulnerability unit tests catch vulnerability therefore better tests might caught bug mitigated vulnerability updating functions casting values inputted ints
CVE-2016-5143,potential access control vulnerability devtools subsystem google chrome subsystem allows hostname parameters passed user system sanitize parameters properly which creates opening attacker supply hostname parameters passing specially crafted url main coding mistake attempted fix original path traversal vulnerability sanitizing input removing good first step input becomes complicated fix falls apart believe vulnerability could avoided using unit tests unit tests specifically runtime file which concern sending complex input unit test would shown developer sanitization algorithm may robust intended
CVE-2014-7934,user able crash chrome executing complex series javascript commands crash caused used free issue accessing memory longer available program crashed generated sensitive crash dump vulnerability simply rare abuse case broke assertion style rendering webkit vulnerability appears present far back google forked webkit repository apple blamed original code last author apple engineer least VERVER years bug identified much terms design coding mistakes made vulnerability extreme edge case however google engineers appeared issues finding correct patch commits made later reverted either fully solve problem broke features
CVE-2016-1671,google chrome android mishandles slash backslash characters which allows attackers conduct directory traversal attacks via using file containing urls begin coding mistake developer check specific escape characters e slash backslash fix pretty straightforward escape cc file vulenrability introduced new logical checks implemented developer mishandled slash backslash characters
CVE-2016-7395,part google 2d graphic library skia properly validate return values method call allows attackers craft graphics data cause denial service impacts main mistake developer made vcc forgetting validate input likely thinking expected use case likely happen within system which mistake many developers make comments bug one developers suggested alternate fix would deal uninitialized variable problem fuzzer testing would validated return value which actual bug another developer pointed since could figure actual bug worth fixing larger bug
CVE-2016-1709,attackers could cause heap based buffer overflow sfntly sfntly program lets users create edit custom text fonts buffer overflow could used denial service attacks basic coding mistake caused vulnerability get function check index within array bounds functions check index array bounds developers forgot add check get function caused buffer overflow errors sfntly subsystem vulnerability sfntly subsystem since first release looks like developers bigger bugs fix new features add
CVE-2015-6768,stopping html frame children point loader frame stopped point frame loader stopped instance uri called order replace action stopping frame uri called action suppresses final step fully closing frame due frame never fully closed attacker may load whatever elements desire coding mistake involved accounting edge case scenario within edge case scenario developers could taken extra measures ensure code fails securely attacker take advantage vulnerability like otherwise realize beginning caught
CVE-2010-4574,pickle function google chrome chrome os perormed pointer arithmetic improperly maliciously crafted pickle data allowed attacker modify system files without control modifying execute denial service attack coding mistakes issue caused easily overlooked difference VERVER VERVER bit systems hardcoded offset pointers worked VERVER bit systems however tis offsetwas larger VERVER bit systems
CVE-2013-2837,scalable vector graphics svg library used failed properly handle deletion raredata which would sometimes accidentally delete svg data intended since modifying data iterating would cause program hang vulnerability due improperly deleting data fix made sure data deletion handled correctly fix efficient change effective guaranteeing program crash hang
CVE-2015-1279,integer overflow vulnerability found pdf reader process allows attackers use large height stride values caused memory corruption issues memory modification attempting expand image certain size resulted integer overflow mistakes seemed stem largely coding mistakes clear lot bugs fixed inside one large commit which possibly rebased commit multiple fixes even reverts intial fix which points fact code maybe tested degree could input image maniplation affected VERVER bit VERVER bit platforms which especially dangerous allowed modification memory overflow vulnerabilities
CVE-2015-1256,remote attacker craft svg file exploits chromium shadow tree way hiding creation complicated web elements shadow tree begin rendering smil animations which svg adds smil animations rendered smil animations added rendering causes infinite rendering loop crashes browser least denial service attack even worse potential opinion vulnerability came developers implementing svguseelement cpp file vulnerability thought finished writing file wrote functions necessary file simply forgot call particular function isdisallowedelement target every place needed called VERVER VERVER places necessary vulnerability fixed quickly adding isdisallowedelement target statement VERVER mitigations cwe first choosing language provides automatic memory management which choice written c second setting pointers null freed however would also apply malicious svg file exhausts chromium allowed ram crash fix made proper which blacklisting which elements rendered preventing special elements reproduce rendered
CVE-2013-2844,use free vulnerability occurs css renderer attempts use pointer freed causes chrome crash attacker use style resolution vulnerability access cause unspecific impact done placing css file server wait client fall bait consequence memory might accessed something supposed happen data chrome might lost another cause vulnerability could denial service make chrome unavailable believe coding mistake person think checking pointer ensure freed using essential think cases pointer process even becomes complex code becomes complex try apply practices check pointer valid rather figure cases pointer
CVE-2014-7923,regular expressions package used within chromium international components unicode opcodes represented 32 bit integer first VERVER bits represent type opcode remaining VERVER bits represent optional parameters one parameter urx lbn cont opcode requires max length lookbehind regex match pattern eventually assigned variable range checked therefore value large enough could overflow parameter bits change opcode type would potentially allow attacker execute machine code vulnerability seems issue maintainability configuration file updated needed issues able exploited icu regexp engine used
CVE-2016-1631,vulnerability google flash player module pepper way flash message modal basically windowless pop ups handled nested modals implementation suspend script callbacks resource loads inside nested modal box result cross origin documents could loaded arbitrary javascript execution point vulnerability bypasses origin policy could used cause denial service loss sensitive information execution arbitrary code vulnerability essentially design mistake gave nested modals privledge bypass origin policy interesting two methods used mitigate vulnerability repository six years discovered possible similar vulnerability found past also possible similar functionality implemented different system developer may knowledge awareness security appears trust boundaries drawn around components may cross proper analysis architecture really mitigation kind vulnerability since vulnerability found someone outside chromium team unclear done lesson learned discovery vulnerability warrents audit existing subsystems may also susceptible vulnerability could done fuzzer manual inspection code design
CVE-2016-1634,javascript script creates input element inside form element adds dom web page forces style recalculation removes input form element due synchronous order execution asynchronous would cause use free error occurs becausehere memory address freed attempted accessed style recalculation element removal executed wrong order vulernability exists third party webkit source seems design code mistake processing dom operations ooperations handled correct asynchronous order handled synchronously which allowed operations occur invalid order caused use free error mitigations offered use free cwe suggest using language offers automatic memory management webkit performance key use c makes sense whereas using language manages memory automatically would hinder performance much therefore valid mitigation one webkit team practices second mitigation suggests setting pointers null freeing based results vulnerability exploit case seems practiced code able find concrete example code due complexity
CVE-2011-3024,versions google chrome causes empty client certificiate due unvalidated null value certificate used chrome browser make authenticated requests server attackers take advantage empty certificiate bypass hostname check certificiate cause denial service issues mistake made inserting null checks throught process one variable passed null causes another variable null which causes empty certificate recommended implementation mitigation cwe consider potentially relevant input possibilities including empty input fix used mitigation
CVE-2016-1622,remote attackers could bypass origin policy via maliciously crafted extension since extensions subsystem google chrome prevent use method override intended extension behavior origin policy states web browser scripts access data second web page origin bypassing origin policy means data confidentiality integrity could lost cwe id vulnerability VERVER titled origin validation error vulnerability caused due enforcing origin policy order prevent types vulnerabilities potential mitigation would separate privileges following principle least privilege design coding process would fixed issue order ensure issue occur make sure source checked malicious websites loaded preventing origin validation errors testing origin lead safer system prevent attackers gaining access undesired functionality
CVE-2013-6622,vulnerability use free bug fork webkit used chrome engine provides ability move elements documents frees memory used element first document moving element second document found certain timing freed memory used element first document could loaded destroyed creating potential denial service fix vulnerability tweaks made chrome tracks load delay rather checking old document present original load delay occurs method changed make checks old document current document mutually exclusive addition old document present load delay document increased ensure memory loaded back old document load delay old document decremented element old document guaranteed destroyed vulnerability appears result oversight part vcc contributor reviewer commit touched many files unifying two methods complexity made hard track smaller errors commit instead split separate files vulnerability might fallen cracks say would found vulnerability use free vulnerability occurs load event sent old document element destroyed would difficult find code alone developer would benefited documenting process using comments like person fixed vulnerability would eventually documented sequence events probable vulnerability would never made initial review
CVE-2011-2836,malicious websites would use windows media player plugin run malicious code would required manually allow run via infobar popdown bar knew windows media player plugin backdoor solve bug open month someone took ownership started fix seems one took ownership bug people new fix busy projects
CVE-2013-2875,method code changed clear following text boxes whenever called happens whenever underlying strings change fix method cleared specific text box account following text boxes may references initial one attackers could use uncleared text boxes cause denial service attacks attempting read text data first text box which longer exists resulting program crash design mistake implementation error would likely found resolved running proper unit tests time project started memory problem related language used point would occured languages like java python better memory allocation built cwe entry list mitigations error ensuring possible write beyond memory part program solid start
CVE-2017-5038,view based related javascript objects able inherit global prototype related objects include view implementations containers objects able inherit prototypes global javascript could allow arbitrary user code attached vulnerable objects code attached could executed causing many problems design mistake system compartmentalized safe areas guestview would trusted everything available access guestview allowed cross boundaries potentially bring malicous code
CVE-2011-0784,issue spawns audio render issue logic check performed audio item verified already exist inside value added issues specifically playing game z type crashed one four sound effects due timing issues multiple sounds playing biggest issue program coding issues obviously project implemented multiple years issues appear main concern failure check input confirm expected addition took actually discover causing issues hard reproduce fix implemented small seems prevent issues occuring reddit thread chromium thread modified time
CVE-2011-1413,linux malicious user could remotely construct relatively long string upon creating string user could use javascript alert function use input could displayed alert result display server could crash lock open chrome windows target device requiring reboot denial service coding mistake made essentially unmanaged javascript alert allowing remote users create large inputs displayed alert causing browser x server crash unexpectedly vulnerability introduced looks boundary case long input used alerts covered allowing vulnerability expose chromium team adherance mitigations documented cwe page vulnerability fix inputs used javascript alerts checked length thus working around previous crashes part ui dealing alert window width sanitizing validating inputs used alerts necessary order keep linux x server working intended
CVE-2014-7924,vulnerability occured one cursor tries access blob binary large object indexeddb resulting heap use free error error occurs program attempts access data location memory already freed could lead multiple harmful exploits include execution arbitrary code corruption stored data biggest coding mistake made vulnerability code never checked duplicate pointers whether locations heap indexeddb freed allocated memory fix implemented works limiting heap access one thread rather two synchronizing mapping memory freed heap
CVE-2016-5148,vulnerability found older version chrome made widgets vulnerable xss attacks widget updates attackers could inject custom html files via vectors widget updates say fault developers design professional developer always deal peoples code make sense spend time write 100 project plugin library purchasing cots software almost always good idea financially sometimes way create reasonable project timeline however believe onus developers using third party plugins healthy distrust plugins design system mind
CVE-2015-6786,content security policy csp used prevent attacks cross site scripting xss defines approved origins content loaded site policy script src used chromium allowed content loaded explictly banned standard mistake made fully supporting standard standard implemented special case wildcard sources left team seemed actively working adding support standard time report fix may come later fix may related incomplete planning bug reported first comment asking someone else already fixed assuming working person responded never worked may indicate work fully planned implementation informally assigning large parts standard different people leading missed detail implementation
CVE-2010-2898,chrome looks mime type long filename underlying library crashes accessed javascript meaning malicious scripting situation e g xss attacker would potentially able construct exploit corrupts memory memory corruption vulnerabilities lead arbitrary code execution bad things vulnerability exploit ever written possibility way fixed simply limit filename lengths b work third party library handle long filenames main mistake made vulnerability testing third party library thoroughly assume filenames could given abritrary lengths javascript therefore ended crash simple unit testing diabolical tests e g super long filenames distrusting inputs would prevented issue
CVE-2011-1113,chrome uses byte stream deserializer called pickler pickler function reads information header byte stream size read function checking size header reading payload infomation could lead buffer overflow scenario someone sent header wrong size simple mistake developers make time original developer assumed input class would good validation sanitation required instance memory directly affected buffer sizes must always checked anything larger maximum buffer size must disallowed
CVE-2014-7946,chromium rendering engine blink vulnerability rendering table webpage would skip captions certain situations table rendered would render table sections needed rendering engine account table captions part table layout therefore would read past defined size array allowed remote attackers cause denial service attack could corrupt sensitive information cause crash code execution fix vulnerability appears temporary workaround fully address root problem vulnerability instead meant resolve crash rather fully address issue rendering table properly appears vulnerability introduced author account table captions which needed laid table rendered could found earlier unit tests tested tables captions
CVE-2015-6788,handler functions improperly implemented allowed attackers cause denial service utilize potential type confusion could shut browser using type confustion trying access values wern expected fix used new method grab data safe hidden fashion major mistake made lead vulnerability slight trust input received either user another system sometimes designing application assumption input trusted issue chain lead way otherwise might trusted code fix changed much since put VERVER today would lead believe fix indeed proper
CVE-2011-1059,vulnerability allows remote attackers ability cause denial service enticing user resubmit form user filled form went back browser forward would result crash simple case trying access memory freed took VERVER days discover bug took VERVER days reproduce happens rare boundary condition every developer makes memory management mistakes like vulnerability scanners identify use free vulnerabilties one tools used committing new code
CVE-2016-5132,vulnerability allows insecure pages iframe secure page intercept communication secure page browser service worker service worker controls things like push notifications background sync period sync geofencing appears testing mistake vulnerability takes advantage specific scenario seem accounted unit test
CVE-2015-3334,vulnerability way website permissions displayed user microphone camera permissions implemented way requested individually website displayed single media permission page info dialogue cases two permissions value ui instead showed default value often something unhelpful like ask default meant user way knowing which media devices website access code introduced vulnerability contained mistakes rather based upon mistake ui design relevant feature discussion original bug report vulnerability seems significant confusion information exactly user needed privy regards media permissions ultimately choice made allowed ambiguity ui choice reconsidered filing bug report found mistaken
CVE-2011-2361,dialog box basic auth used mislead user giving credentials done using domain intends mislead user believing authentication request coming trusted source fix specify domain realm string also making sure strings clearly labelled user vulnerability oversight design devs anticipate malicious domains used abusing dialog box realizing possibility attack quickly rectified
CVE-2015-6766,appcache destructer calls function ondestructionimminent appcache update job cc notify pending cache update jobs happening new master entry url host expected stay variable susceptible change compromised renderer causing browser crash mistake led vulnerability seemed mainly design mistake also testing mistake test case made sure browser checks whether new master entry url host changing browser finishing cache update jobs cache deleted
CVE-2011-3061,implementation code handling creating socket connection intermediary request handling server recognizes certificate error exists appears ignored since disconnect error caught could allowed man middle attack one could spoof server potentially get sensitive information created certificate mistake could came design mistake issue requirements code initially written make sure notice certificate mismatch found mistake disconnecting immediately code disconnect written first confuses may stated requirements could also made accounted unit testing could even slipped code reviews well fix look proper immediately disconnect
CVE-2014-3196,shared memory resources windows property known discretionary access control list dacl which keeps track authorized access accessed typically resources also given name instantiated case windows automatically assigns resource null dacl which means authorization controls attributed resource thus limits accessed access windows implementations google chrome occasionally use unnamed shared memory resources meaning susceptible problem specifically shared memory resource properly restricted read meaning clever enough attacker bypass protection mechanisms windows chrome sandbox mechanism used isolate potentially dangerous programs otherwise adversely modify resources chrome leading slew unintended problems main mistake made related implicit security requirement imposed windows handles objects memory shared memory resources anonymous windows would make securable thus vulnerable elevation privilege attack described cve entry prevent resources named clear initial developers either aware property windows think would pose issue problems present code went largely unaddressed several years
CVE-2011-1434,opening suitable pages sometimes causes chrome crash various places startup due lack thread safety handling mime data mixture coding design mistakes since thread saftey ensured handling mime data attacker entered unknown vectors system would crash
CVE-2013-6658,vulnerability occurs javascript executes multiple triggers layout refresh attempt render page hand intermittently fails handle multiple triggers causes use free vulnerability triggered component attempts use another one destroyed memory freed another component caused javascript code which causes crash dos believe vulenrability could avoided mitigations use free followed seems vcc fix noted review area particular high risk area may induce vulnerability however action taken mitigate issue vulnerability originated due lack risk mitigation high risk area well proper unit tests place despite system critical component
CVE-2013-6624,google chrome susceptible use free vulnerability involves accessing pointer freed lead variety things segmentation fault execution arbitrary code leverage vulnerability attacker would need idea use free taking place attacker may able hijack freed pointer use execute code case code attacker may able alter rendering dom document object model aka page seeing code refers id attribute html tag vulnerability introduced early code seemed long time coming judging commit message exposed lifetime issue strings id attributes simply need use atomicstring seems though people aware issue either could figure good solution time additon fixed seemed simple leading beleive people time fix anything design mistake could caught earlier
CVE-2011-3880,google chrome VERVER neutralize invalid character 0 http headers which lead many opportunities xss crsf attackers receiving interpreting request message server responds http response message 0 character inside headerline interpreted terminator 00 also work attacker bypass web application filters like location str replace r location location str replace n location location private data html 00access control allow origin 20attacker com coding issue chromium server properly whitelists user data inserted headers current fix ensures chrome neutralizes invalid character 0 http headers xss crsf attackers
CVE-2014-1714,used part exploit potentially allowed code execution outside sandbox environment windows method wrote objects clipboard validate sanitize format objects passed instead wrote directly clipboard potential cause issues inter process communication ipc malformed objects could read ipc handler may cause denial service vulnerability case missing code incorrect code function copying clipboard worked perfectly abuse case malfunction takes lot domain knowledge functionality clipboard write function ways clipboard data used application applications ipc realize possibilities malformed data consequences sanitizing potentially issue arose lack tests tests involved would thought possible failure cases method instead ideal case
CVE-2013-0841,content blocking funtionality google chrome vulnerability array index checked content blocking important protect user unsafe scripts vulnerability could potentially allow remote attackers cause denial service dos could also cause disclosure information unauthorized modification data array responsible logging type content settings accessed fix vulnerability prevent array index going lower zero higher size array vulnerability introduced implementation phase development believe vulnerability result coding mistake could result design mistake well due relatively simple nature vulnerability believe could simply mistake done programmer properly checking array indexing something easily forgotten input validation part design design mistake well order prevent vulnerability going forward must remembered array indexes always validated use chromium also consider improving unit testing plan array indexing vulnerability usually caught unit testing
CVE-2014-9689,chrome mobile exposes device accelerometer gyroscope data websites ios andriod due precise nature instruments extremely accurate measurements theoretically possible attackers monitor keystrokes taps screen track users movement even obtain low frequency speech signals vibrations phone current technology mobile devices allow precise measurements yet mistake made realising types vulnerabilities created giving anyone access user extremely percise gyroscope accelerometer level precision obtained everyday mobile devices permission user give
CVE-2014-3161,playing video video tag chromium android uses native media player video url sent media player chromium longer control opens attackers bypass orgin policies origin policy web browser allows scripts one webpage access data another webpage web pages origin policy bypased allows outside sources access data particular website example attack would go something like VERVER user logged myvideos com visits evil com which video tag VERVER user plays video evil com evil com handles request browser serves response VERVER browser sends url evil com native video player play video browser lost control interaction VERVER evil com recieves request redirects video myvideos com allowing play cross origin videos myvideos com access origin policy believe thought design mistake part design product securely handle browser requests every level browser actual native android videoplayer current fix time fixed issue always treating media urls cross origin proper although approach resolve issue still sacrificed functionality trusting url origin
CVE-2015-6767,appcache implemetation google chrome VERVER vulnerability content browser appcache appcache dispatcher host cc named use free which means referencing memory freed cause program crash use unexpected values execute code scenario memory question allocated another pointer validly point freed original pointer freed memory used points somewhere within new allocation data changed corrupts validly used memory induces undefined behavior process therefore vulnerability allows remote attackers cause denial service leveraging incorrect pointer certain callbacks think coding mistakes developer may forget host pending callback raw pointer dispatcher dispatcher dies deletes hosts pending callbacks deleted exception hosts transferred old backend new one which clear pending callbacks case leads uaf browser process old backend deleted callback fires examining mitigations think ths proper fix
CVE-2016-5142,due poor handling data buffers inside cryptography api used chrome webcrypto attackers could remotely cause denial service via crafted javascript code caused use free error pointer related buffers mistake led vulnerability fact google assumed vulnerabilities inside web crypto library used chromium despite unit tests vulnerabilities went undiscovered inside webcrypto lesson learned necessarily trust every external piece software system depends luckily regression bug unlikely occur unit tests created test case causes
CVE-2011-1465,response bodies certain type http stream drained stream left idle which causes system crash without user visible error message vulnerability exists system close type http stream went unnoticed long period problem arose rarely core reason vulnerability improper design result poor analysis functionality added properly analyzed team working would prevented vulnerability first place person created fix certain proper related problems since likely correct
CVE-2016-1638,remote attackers bypass access restrictions using platform web apis e editing underlying html dom extension editing load js scripts via google chrome apps think mostly contributed vulnerability coding mistakes developers try fulfill requirement preventing restricted access via chrome apps still cases missed believe misuse abuse cases would helped situation would noticed another way bypass restrictions
CVE-2013-0881,google chrome allowed remote attackers cause denial service incorrect read operation via crafted data matroska container format manipulation unknown input calling function matroska parse laces which turn led bounds reading memory specifically caused heap buffer overflow matroska multimedia container file format able hold unlimited numbers video audio picture subtitle tracks one file mistake led vulnerability developers checking outputs file formats decoding instance vulnerability developers allowed remote attackers cause dos due carefully crafted data matroska container format developer checked function related matroska specifically matroska parse laces moved pointer file forward subtract size file which caused bounds read could easily prevented developers checked use cases formats support made sure file outputs accounted support media formats matroska also developers noted vulnerability old dated back three months prior unit tests robust requirements fleshed use cases covered
CVE-2015-1293,vulnerability dom implementation web browser engine lead remote attackers bypassing origin policy use forged security credentials vulnerability arose oversight developer implementation secure default which provided easy means potential attackers exploit system vulnerability unnoticed code reviews even though relatively obvious hindsight developer responsible creating vulnerability implementing resolution focused patching vulnerabilities around time fix however developer spent large amount time implementing efficiency improvements fix committed means found external user would likely made deep production
CVE-2016-1630,refers containernode parserremovechild function webkit source core dom containernode cpp blink used google chrome VERVER which mishandles widget updates taken chromium developers page root view hierarchy widget which native window native window receives messages windows converts something view hierarchy understand passes rootview mishandling widget updates results easier medium remote hackers bypass origin policy allowing access data second web page normally origin webpage second destination webpage must combination uri scheme port number host name data second webpage accessible origin webpage vulnerability combination coding design mistakes widget updates improperly handled causing delay could facilitate manipulation dom tree solution simply implement method would effectively run updates prevent acquisition resources external actor multiple fixes combined targeting prevention unauthorized dom tree manipulation initial fix account update issue widgets
CVE-2013-6659,ssl certificates used hosts connecting browsers know encrypt messages host trusted new session started logging site ssl must renegotiated reverified encrypted renegotiating host ssl certificates would reverified checked previous certificates see match allows remote ssl servers use new certificate chains unexpected user consequently lead different information linked website shown user making user believe different company owns site vulnerability exists due unforseen scenario server could renegotiate connection new still valid ssl certificate since second certificate still valid would accepted reality host one certificate certificates verified renegotiation likely assumed host one certificate vulnerability went unnoticed specific scenario thought designing checks certificates could avoided likely engineers believed validity checks would sufficient vulnerability fixed entirely two commits fix mitigations already place validating certificates none place particular vulnerability two commits completely fix vulnerability checking current certification matches old certification comments throughout source suggest functions originally based browser projects unclear browsers similar issue patched times
CVE-2010-3251,websockets implementation google chrome allowed attackers cause null pointer dereference resulting crash websocket protocol used real time communication client server without need client continuously send requests websocket connection closed host resolved null pointer dereference would occur function question check null pointer present source code since file first created almost year seems automated testing used specific error which according cwe page exist judging response issue reported appear severe issue which may justify lack automated unit tests additionally problem could definitely addressed design
CVE-2015-1218,moving script element new document context document removes script completely moving script document different context script context document non context document allows attackers cause denial service event unspecified impacts move script element different documents affect integrity system vulnerability result maintainability mistake scripts loaded properly new context documents vcc pushed also means coding mistake made point unfortunately cloudfuzz detect issue
CVE-2011-2859,vulnerability allowed extensions downloaded chrome browser without user consent using man middle attacks attackers could use http redirects make victim land page automatically install browser extension browser extension allowed attacker elevate permissions permissions extensions victim system resulted unlimited priviledges would say would design requirements mistake paths extensions could downloaded included many possibilities former controls place moved gallery urls instead allowed extensions installed pretty much anywhere http redirect successful
CVE-2016-1661,blink web framework previously used chrome ensure content frames passed check render process along origin policy check meaning objects source origin policy defined combination url scheme host name port number origin allowed attackers cause denial service attack impacts using fake website frame content mistakes led vulnerability mainly design mistakes authors code assumed frames passed securityorigins canaccess method local frames hold true frames occur result renderer initiated navigation since frame origin see frame remote frame allowed content frames external rendering processes which pass level security checks appears fix attempts implement third potential midigation checking frame ancestors ensure local frame fix looks pretty good problem many people know
CVE-2013-6629,image segment reading function jpeg files check chunks data comprising image repeated possibly allowing images stolen across domains maybe even non image memory mistake ensuring data leakage possible data accessed processing image data chunks ensure data processed twice remaining data leaking mitigations enforce data processed tests appear sufficient
CVE-2014-1744,integer overflow audio component occurs remote attacker sends overflow value cause denial service large shared memory allocation attacker send audio file integer overflow value cause segment fault attacker add input end audio file modify memory alternatively attacker desire crash chrome done audio file alone happen buffer value audio component means vulnerability buffer overflow whoever tasked cyclic buffer change since left chromium appeared either intern new employee given comments tasked decently large change much pushback approach dominated conversation code review instead noting lack tests looking issues
CVE-2014-1733,bug chromium sandbox way detected merge two blocks code via pointercompare tailmerge executing compare merge code properly account next pointer next lines code execute blocks finished executing two blocks jmp jump ret return instructions creates edge case two blocks code could identical except next pointer different two blocks get merged anyways merge introduce cycle program cause crashes compilation worst case scenario lead illegal system calls via attached bpf program biggest mistake made causing vulnerability developer question think edge cases developer think would need compare next blocks code executed created edge case code allowed illegal merge look deeply enough would argue coding mistake although could caught multiple levels better requirements testing design would potentially caught issue ultimately fell developer ensure case accounted which failed
CVE-2015-6775,static method which use signatures could allow remote attacker cause denial service possibly access secure information creating fake object passing static method chromuim team inital commit contained bug snippit code went multiple code reviews tests yet still manages exist system code noted confusing several times commits yet nothing simplify code separate multiple files easier readability complex code tends hide vulnerabilities one needs carefully reviewed sent production
CVE-2015-6772,previous implementation dom subsystem blink chrome rendering engine protect url navigation document detached allowing attackers attack internal plugins javascript attaching false document opinion mistakes vcc fix originally fixed vulnerability making sure detaching document attacker attach another document frame problem arose fix installed installed navigationscheduler cpp regression made fix moot new fix simply moving old fix navigationscheduler cpp localframe h
CVE-2015-8480,function creates video frame pool memory structure video media frames zero initalize memory video frame data structure large unitialized sections memory contain sensitive information relied bounds memory access also allows denial service attack read write access issue comes coding mistakes neglected zero initialize video frame problem addressed lot ambiguity interaction video library ffmpeg used time team seem clear answer library would interact code awhile originator assumed sending memory without zero initializing would safe speculated library could handle
CVE-2011-3882,use free vulnerability allows remote attackers cause denial service possibly unspecified impact via vectors related media buffers impacts may include overwriting data pushing confidential data output based code looks like case accidental buffer overflow occurs load testing denial service possible due poor memory management would hard blame programmer real way avoid cultivating safe memory allocating practices fix properly mitigates locking resources via threading freed memory used allocated program
CVE-2011-1817,two vulnerabilities google chrome VERVER way implement history deletion first vulnerability implementation removing old event observers properly which leads observers looking event already deleted specifically user try clear browsing data event observer created handle deleting browser data however process somehow discrupted ex user cancels clearing browsing data event delete observer browser reloaded stale observer try listen non existing event which make browser crashes second vulnerability stated directly cause bug bad coding implementation removing browser data event calls methods wrong thread which certainly could make browser stall crashed way could exploited would attacker somehow disrupts history deleting process ocurring users intuitively reload page restart process browser crash coding mistake developer deleted event without thinking living observers althought fix simple finding bug first place easy noone thought situation deleting user browsing data process interupted
CVE-2015-3336,url consistted file browser would ask user going allow deny fullscreen mouse lock problem allowed remote attackers cause denial service since user chance allow page access mistake associated inverse check allowing client notiified default statement managing notified problematic fixed still assumed file would user code which turn means user likely knows want however possible another program loaded file brough chrome directory which use vulnerabliity
CVE-2011-3964,drag drop feature within google chrome properly implemented specific action dragging url url bar allowed spoofing legitimate urls javascript link dragged address bar mistakes made stripping javascript schema navigate link allowed social engineering take place spoofing websites occur design mistake use case dragging dropping link url address bar carried fully end would expect browser navigate link stop based cwe entry vulnerability exactly carrying architecture design mitigation warning user leaving page javascript ran behind scenes sanitizing javascript navigating url prevent spoofing real website
CVE-2013-0887,developer tools process google chrome VERVER windows linux VERVER mac os x properly restrict privileges interaction connected server which unspecified impact attack vectors allowed developer tools process access web ui bindings which neeed access opened numerous attack vectors although easily resolved simply removing bindings web ui bug caused devtools process allowing access web ui bindings which necessary likely came planning ahead devtools development assumption web ui bindings would needed clear binding fact needed fix quick involved simply removing binding
CVE-2010-0662,memory struct allocated based value provided untrusted source elsewhere code dangerous source may correct value amount memory needed resulting bitmap initialized correct amount memory allocated could lead two attacks first denial service causing integer overflow second able read potentially sensitive data extra allocated data fix recalculate amount memory bitmap require instead trusting input issue caused design mistake developing function parameter made available struct passed developer believed need recalculate value set untrusted input elsewhere code value calculated trusted source
CVE-2016-5161,google chrome issue merging certain css styles together old implementation serialized css property value reparsed which preserve name custom property test example css causing issue var b float var c applied two spans styles merged would create case system could end reading memory allocated which could result segmentation fault which could denial service design mistake failed consider certain type input which entered potential break system considered css properties custom values desiging merging functionality people experts css looking code make sure implementation conforms standards stakes high project like google definitely resources also could written tests different types css inputs make sure merging worked expected variety inputs
CVE-2013-2845,heap use free vulnerability web audio implementation google chrome playing audio chrome web browser allows remote attackers cause denial service possibly unspecified impact kind denial service caused memory corruption fix vulnerability ensure variables used free released also pointers passed reference developers know buffer used freed see checks place ensure buffer cleared properly looks like design mistake ownptr design decision change ownptr refptr recreate corresponding functions required seems like fix simple took creation new refptr functions replacing many ownptr refptr many files realizing functions returned audiobus free
CVE-2010-3250,vulnerability allows remote attackers access private list functional plug ins added application user looks like classic example software minor vulnerability likely developers wanting put time fixing evidence vcc made day christmas near end west coast workday vulnerability fixed first commit contributor made system highly evident minor annoying work given new hire fix required new development made well minor changes different areas subsystem vulnerability existed within system VERVER years
CVE-2011-3961,race condition google chrome allows remote attackers execute arbitrary code via vectors triggers crash utility process seemed VERVER clents could lead crash utility process indexeddb webstoreinstallerhelper profile importer posix plugin loader fix seemed race condition caused utility process host variable becoming null appropiately dealt though uncertain seems variable null calls required defined would work causing bunch calls thrown unsure attacker would cause utility process host become null coding mistake made locking certain sections code multiple threads talked allowed race condition happen fix see check see specific variable existed which assumed thread case though seems like thread already existed would execute code either stops previous thread continuing stoping new thread taking original thread accessing data looking specific thread crashing main utility process google chrome seems certain variables set null process know handle either treats condition crash protocol crashed could handle certain statements null
CVE-2011-3049,web requests made time browsers looking retrieve content post content like case api question allows developers view requests take analytics block requests modify problematic case web extension goes rogue api allows rogue extensions block incoming requests specifically allows rogue extension block request calling blacklist web extensions which could include overall opinion enough code review went vcc merging difficult think cases analysis might revealed possibility blocking important connections rogue extension furthermore seemed alot misunderstanding dealing updates blacklist handled looking bug comments good amount debate updating extensions initially planned system call meaning using profile ended using web request retrospect followed initial design choice vulnerability would avoided
CVE-2016-1706,vulnerability resulted improper implementation ppapi which plugin management api adobe flash player plugins broker process two methods handling messages brokerprocessdispatcher handles browseroperations messages managing browser functions locally stored flash cookies camera mic permissions brokerdispatcher handles connecttoplugin messages which manage inter process communication data plugin connecttoplugin messages treated untrusted sanitized validated browseroperations messages browseroperations messages intended use browser settings ui connecttoplugin messages sent behalf plugins flash renderer able send types messages behalf plugins meaning compromised renderer submit unsanitized data access powerful browseroperations functions primary danger several browseroperations message variants include absolute file system path argument validation allowing access local files renderer exploit could capability write overwrite local files reporting user described potential exploit os x vulnerability used mount remote file system target computer relevant code appears written single developer modified almost two years vulnerability found presence vulnerability appears simple ovesight among largely robust code given lasted long without requiring modification original code fix appear use unit testing believe issue sufficiently complex would feasible detect extensive unit testing defense depth approach would useful case which would involve sanitizing validating received messages flash renderer rather expected vulnerable
CVE-2011-2358,extensions completed installation without first prompting user ui confirm installation completion could lead user downloading malicious extensions without realizing clicked fake download link something similar malicous changes user system could occur without user knowledge think problem brought requirements issue seems one thought impact downloading extensions without prompt similar ssue happened android damaging fix straight forward makes sense adding prompt free extensions ensures user least understands downloading something showing confirmation paid extensions also makes sense user put payment info ensuring understand buying downloading something
CVE-2016-1675,prior fix vulnerability remote attackers able bypass origin policy mishandling document attachments frameloader localframe document attachment process essentially allowed elevation privilege creating issues security within software along cross site scripting vulnerabilities could allow malicious code executed give attacker privileges could harm rest system general design flaw problem seems stemmed attachment functionality outlook process strange used way time interesting see high coupling really affect software system long period time sometimes makes sense use older functions accomplish common tasks becomes depricated getting way needs removed
CVE-2011-3096,vulnerability linux machines would allow remote hackers cause denial service attack use free particular error gtk implementation omnibox web browser address bar also acts search engine gtk toolkit used creating graphical user interfaces sifting commits posts vulnerability would say mistake came misunderstanding gtk handles object removal unfortunately programmer impression gtk would handle closing signal listeners misunderstanding third party dependency vulnerability slipped code would expected test see could still call signals even destroying object tests
CVE-2015-6774,vulnerability found one functions relating loading time within chrome renderer subsystem modification pointer javascript give remote attackers ability cause denial service specifically pointer used reporting load times data modified javascript use unexpected values occur remote use would create specific content loaded target system execute arbitrary code target user system mistake made assuming type input carrying execution variable working programming language programmer handling memory explicitly written code prevents vulnerablities based cwe entry mitigate vulnerability one try use language provides automatic memory management done execution optimal comes speed carrying memory management gives flexibility implementation fix programmer set pointer null carrying implementation pointer would seem proper fix problem
CVE-2016-1657,method force focus address bar allow user overwrite contents address bar would misbehave user site uses method generate blank page method would append new url onto existing blank page url would allow page url appear different page allowing attacker spoof site gather information unsuspecting user vulnerability due trusting users allowed append url blank page essentially spoof website fix prevents address bar focused appended blank page created startup page prevents attacker creating blank page appending url fix permanent
CVE-2011-2345,vulnerability exploited based improper handle string application programming interface api which allows remote attackers conduct denial service attack based bounds cwe 125 read using unspecified vectors example without input validation verification attacker pass arbitrary memory address read sensitive data system arbitrary snippet code execute inside application case arbitrary code attacker cause significant harm system retrieving sensitive data modifying application internal data even affect users vulnerability first introduced netscape plugin application programming interface npapi google chrome version VERVER passed function npapi value read arbitrary memory address memory address read outside address space computer gives current process bounds read bounds read causes process crash enough crashes system resources unavigateailable user mistake led vulnerability lack defense depth principle developer forgot validate verify inputs api module which used everyone overall coding mistake original code basically read whatever string user passed without validating result user passed arbitrary memory address vulnerable function returned user data stored memory location developer careful validate inputs unsafe inputs avoided
CVE-2013-6653,certain aspects google chrome handles displaying web contents allows remote attacker generate webpage attempts access operating system color chooser think dialog open windows paint select color conflicting manner essentially concurrency bug causes race condition e two threads processes try access resource time instance color chooser one webpage accesses color chooser color chooser memory resources freed leads known use free error seems cause chrome crash example denial service though potential cause serious issues main mistake made throughout vulnerability history essentially resource management issue instantiation color chooser dialog handled properly result race condition could occur cause browser crash though exactly recommended mitigation cwe 416 developers used null indicate failure color chooser dialog already opened least prevents issue happening vulnerability introduced two developers across two commits although signs miscommunication two seems though attempting address issue different points time which led vulnerability
CVE-2013-6628,google chrome checking servers digital certificate which exists part ssl authorization process renegotiation client socket renegotiation renegotiation way adjust parameters ssl handshake without needing make new ssl session means remote web servers could interfere trust relationships session example attack would involve starting renegotiation authentication server client changing certificate sent server gets authenticated client either design mistake coding mistake leaning towards design mistake point know renegotiation sockets happens know certificate proving renegotiation one considered design point renegotiation certificate could changed point renegotiation got handled code one included cases added code saying could
CVE-2016-1652,cross site scripting xss vulnerability modulesystem requireforjsinner function extensions renderer module system cc extensions subsystem google chrome VERVER allows remote attackers inject arbitrary web script html via crafted web site aka universal xss uxss attacker inject scripts able spread malicious code various end user attacker could compromise user browser data even alter content html page mistake leading vulnerability simply rooted within privacy issue regarding getters setters modified deal private properties instead regular properties done make interception harder outside privatizing properties become less accessible attackers helping eliminate acquistion data publicly transmitted mistake truly simple coding mistake corrected conjunction additional files support fixed within matter days which attests fact much needed change mitigate vulnerability
CVE-2014-7937,multiple one errors libavcodec vorbisdec c resulting loop execution vorbisdec c decodeder vorbis data vorbis open source project produces audio coding lossy audio error allows possible denial service attacks vulnerabilities information disclosure unauthorized modification may also exist crafting vorbis data error cause simple coding mistake one error theses mistakes bound happen thing prevents error like extensive tests include boundary edge cases mitigation simple look proper one quite easy identify correct fixed according cwe fix making sure loops stay within range working languages like c
CVE-2014-1747,certain file types embedded html page would automatically downloaded user prompt javascript code contained within file would executed fix whitelists acceptable location input limiting mhtml documents loaded frame except top major mistake allowing files downloaded automatically enabling javascript code execution areas necessary
CVE-2010-4033,chrome verify user one submitting data saving auto complete data chrome stores data automatically overflow chrome able handle crash browser attack targeting vulnerability would malicous site continously filling submitting form overflow possible storage auto fill data crashing browser google employee determined matter seconds form would able crash browser vulnerability appears oversight potential line attack which caught later infobar originally designated form data saved longer appered user would know data saved infobar longer existed possible fill overfill store data malicously crash browser
CVE-2011-2786,pop screen speech input bubble google chrome moved screen google chrome fails ensure screen shown product screen might make easier remote attackers make audio recordings via crafted web page containing input element web page start speech recognition whenever user clicks anything web page problem chromium relies popup showing recognition started popup moved outside screen use ability attacker could use platform phising attacks instance attacker cause ui display erroneous data otherwise convince user display information appears come trusted source attacker could trick user performing wrong action hence causing source original window obscured spoofed really seems mix requirements design issue engineers clearly think enough cases requirements ability speech input bubble whether could dragged outside window complete test plan actual fix complicated involved adding checks
CVE-2014-7929,use free vulnerability occurs moving script old document new document function function cause denial service impact user moves old document new document chrome move script old document new document chrome check script allocated cause crash attacker add input overwrite memory person working adding feature moving running script across documents check use free vulnerability case seems original code unit review cases vcc apply unit tests vcc cases vcc focusing moving pending async script loader new document introduced use free vulnerability document pointer
CVE-2014-7948,google chrome caches pages despite ssl certificate error which allows man middle mitm attacks spoof html pages via certificate attacker create mitm intercept web pages replace site page malicious one malicious server site fix vulnerability refuse application cache responses ssl certificate errors basically ignore ssl certificate errors unless flagged think vulenrability interesting difficult find test made vulnerability design issue developers failed reject caching page ignoring ssl certificate errors also may requirements issue devs know execute something non trustworthy certificate may overlooked thus non google employee discovered human main thing practitioners learn vulnerability code product properly handle errors never ignore given errors lead possible execution intend mitigations team properly check ssl certificate errors validates whether valid tag allows certificate errors ignored
CVE-2011-0776,mac chrome sandbox escaped obtain information local files issue ultimately derived mac allowing calling stat arbitrary paths expected required chromium adjust access call issue also could avoided mac interface stat system call line user expectations
CVE-2016-1656,download manager check file name make sure attacker download file unwanted directory outside chrome folder downloads vulnerability occurs user downloads file website website change file name relative path cause chrome put file wrong directory http request team apply filename sanitizer however part http request content disposition sanitization learn working download manager make sure manager sanitize filename file path http content disposition would say part requirement mistake download manager critical part browser task people use download manager daily makes manager security risk
CVE-2014-1715,path traversal vulnerability lead creating junction point alias another directory valid directory within sandboxed path root system partition critical files kept valid directory within sandboxed path explained follows imagine program running directory called safe directory valid directory user access files directory within sandboxed path e g usr program safe anything outside sandboxed path considered unsafe therefore invalid directory ultimately vunerability direct cause coding mistake however coding mistake obscure could easily overlooked someone either inexperienced nitty gritty specifics file systems someone may aware super vigilant particular issue proper mitigations making sure still sandbox directory taken however vulnerability simply went step beyond simple mitigation also noted vcc single person adding 900 lines code which definitely error prone think really goes show mitigations far perfect say based done class seen mitigations regarding path traversal steps taken even steps vulnerability case still disastrous something niche likely would require outside sources security expert case competition clearly identify vulnerability handle mitiagtion properly
CVE-2014-3157,decoding video buffer allocated frame decoded however buffer large enough hold decoded frame heap overflow occurs which allow data written heap based buffer overflow inside function get video buffer decoding allows remote attackers cause denial service causing system crash exploited abuse could malicious video file embedded web page coding error buffer overflow caused allocating enough space ffmpeg use decoding mistake buffer provided chrome use calculations allocating space buffer would provided ffmpeg vulnerability caused misunderstanding ffmpeg allocates handles video buffers team changed code chorme provides buffer ffmpeg use instead letting ffmpeg allocate buffer used slightly different calculation determine size buffer solution implemented allocate ammount space ffpeg would buffer ensuring enough room overflow buffer
CVE-2014-3173,webgl web graphics library ensure clear calls interacted properly state draw buffer could allow denial service attack reading uninitialized memory which causes weird states code also leaked virtual ram sampled textures much concern issue appeared coding logic mistake potential problems caused uninitialized buffer called thought initial implementation patch created caused buffer overflow much issue leaking sensitive data however accessed sampled textures potential risk denial service attack unwanted states caused exploit solution bug one possible mitigations cwe page still effective check buffer see uninitialized trying clear
CVE-2016-1651,vulnerability causes information leak denial service rendering jpeg images pdfs exploited embedding specially crafted jpeg image which read memory past end allocated space due mistake implementation type conversion function fix involves checking size image prior allocating memory parsing jpegs relatively small portion pdfium application seems like something requires specific skill set believe developers used previously written tested jpeg converter parser instead trying write besides clear jpeg parser unit tested relatively late project existence which mistake lot harder detect bugs vulnerabilities without unit tests
CVE-2010-1504,problem found early chromes development good reason passed html script tag url inputting url url bar would directly place script code chromes internal html code would exectute script example website www website com script blah script would execute script appended end url due vunerability design mistake led bug intial code taken account user may provide bad link html code directly bug also old likely unknown exactly kinds attacks possible time fix correct complete later complete solution added essentially making impossible use xss attack nowadays using attack original developer also perhaps understand line code url innerhtml url would set actual web pages executable html whatever user inputs which course bad
CVE-2013-0884,initially code allowed specific urls run native client applications special privileges added special privileges added code removed granting special privileges http urls good idea https public keys forced subdomain mistake occurred designing system think subdomain added fix VERVER months special privileges granted users
CVE-2016-1696,remote attackers could bypass origin policy via unspecified vectors since extensions subsystem google chrome properly restrict bindings access origin policy states web browser scripts access data second web page origin bypassing origin policy means data confidentiality integrity could lost cwe id vulnerability VERVER titled origin validation error vulnerability caused due enforcing origin policy looking code review see developers depth discussion recognizd files used new native handlers made extensions order prevent types vulnerabilities potential mitigation would separate privileges following principle least privilege design coding process would fixed issue order ensure issue occur developers expanded bindings access checks checks enforce origin policy make sure source checked malicious websites loaded preventing origin validation errors testing origin lead safer system prevent attackers gaining access undesired functionality vulnerability similar cve 2016 1622 regards type malicious actions attackers perform
CVE-2013-6663,svg implementation google web engine blink allows use object freed memory caused resizing svg image could destroy renderer which would cause use free crashing engine vulnerability could cause denial service impact limited beyond due fact resizing image free use which causes crash coding mistake occurred due fact original author function realize forgot resizing container could destroy renderer misplaced check chromium developer originally wrote method also added fix additional test case vulnerability part initial creation function thus could small design mistake which led familiar svg renderer likely could prevented mistake appeared stem misunderstanding unintended side effects resizing container could chromium team uses modern code review mcr process whose effectiveness come question recent years original author vcc pdr also ever one documented code review code related vulnerability two factors may also contributed vulnerability going undetected source http ieeexplore ieee org document 7781793
CVE-2011-3898,users version java VERVER applets allowed run without confirmation user due code checking java versions VERVER choice ultimately lead vulnerability choice add upperbound java version necessary caused real security issue java version VERVER released
CVE-2016-5152,function inside openjpeg which used pdfium google chrome prevent integer overflow giving attackers ability cause denial service heap based buffer overflow attacks occured svg element rendered iframe heap based overflow attack could allow malicious users access memory write data locations program expect run time situation consequence one attacks chromium handle corrupted memory stop working which example denial service believe design mistakes made chromium team incorporating open source openjpeg2000 project chromium exposed vulnerabilities project security seem big concern developers openjpeg compared chromium likely many vulnerabilities found exist result use third party software like openjpeg2000
CVE-2014-3189,bounds read occurs data read past intended boundries case particular vulnerability function responsible copying image known destination able preform bounds read allowed checking size image want copy makes sense done checking negative x values also making sure size wise could contained within data passed source data checks place allows either buffer overflow occur reading trying store mass amount unintended data well possibiliy producing segmentation faults reading outside program assigned memory which could lead denial service importantly vulnerability could leveraged allow leaks sensitive information since able read outside intended boundaries one could read around try find sensitive data contained within particular processes assigned memory region mistake led vulnerability sufficiently testing pdf plugin source introducing chromium codebase terms plugin one could also say design mistake implementing proper boundry checking incoming parameters
CVE-2011-2785,issue extensions chromium allowed attackers cause various issues caused attackers abusing fact extensions validate urls home pages way attackers could use custom extensions damage lot poor sanitization urls restricting privileges design side rather requirements communications fix looks like might work could work arounds ending fix validate homepage http https
CVE-2015-6782,document open function webkit source core dom document cpp google chrome VERVER improper input validation which product validate incorrectly validates input affect control flow data flow program page dismissal event handling compatible modal dialog blocking which makes easier remote attackers spoof omnibox content via crafted web site think coding mistake developer accidently create vulnerability makes possible display arbitrary content url website user trying access attacker page omnibox examining mitigations think ths proper fix
CVE-2016-1618,vulnerability pertains pseudo random number generation specifically code question uses poor method generating random number making vulnerable external attacks say proper random number library case two developers knowing previously widely understood secure library longer standards compliant retired might classified maintainability issue since developers trust libaries always
CVE-2015-6779,user opens pdf file chrome pdf viewer pdf file link url open link new tab allows scheme restrictions pdf bypassed prohibited html also even possible pdf file would say vulnerability culmination design mistakes potentially poor requirements say vulerability like normally occur html prohibits pdf documents normally allow behavior guess niche design decision made allowed behavior also fair say design decision may made due poor requirements
CVE-2016-5145,blink rendering engine used chromium allowed remote attackers bypass origin policy restriction images written javascript code origin policy concept web browser allows scripts first page access data second page origin uri scheme host name port number able bypass policy blink ensure taint property preserved structure clone operation imagebitmap object derived cross origin image means blink cloning imagebitmap object keep property determined whether would taint canvas cross origin data which would prevent interactivity primary mistake made led vulnerability result oversight implementation structure cloning operation whoever wrote original function clone bitmap forgot include taint peoperty important realizing whether scripts first page could access data second page overlooked fact origin policy important writing bitmap code include checks verified bitmap origin vulnerability prove problem future code appears fixed reviewed carefully added test case which check make sure happen well
CVE-2016-1693,downloading cct chrome cleanup tool binary http used allowed attacker spoof identity cct consequence man middle attacker would able send malicious executables http session unable view bug report vcc fixed sure author usage http instead https miscommunication across team members could lack knowledge difference http https https used situation case think really coding mistake mistake would domain implications well understood developer although https completely man middle attacks encrypt information sent accross connection third person intercept data view modify given time vcc fix year several chromium developers saw code mistake automatically realized http used
CVE-2013-0843,mac os buffer size small running VERVER khz sampling rate allowing remote attackers cause denial service dos attack turn cause memory corruption application crash well cause impact third party site provides webrtc audio increasing risk sensitive information disclosure believe since vulnerability due considering use VERVER khz sampling rates macosx additional cases increased rates 96 khz VERVER khz included unit testing scripts platforms ensure type vulnerability repeated important good boundary testing order determine code works within outside expected value ranges cause issues system may prepared
CVE-2013-2926,use free vulnerability indent command rendering engine blink vulnerability could used cause user assisted denial service attacks simple coding mistake occurred indent command function refactored developers refactored code make readable however accidentally made incorrect assertion one statements original indent command made correct assertion developers made simple coding mistake overlooked little bit automated tester able find incorrect assertion bring team attention vulnerability fixed team simply removed incorrect assertion function
CVE-2015-6789,blink open source rendering engine used visualize web content loaded chrome affected code uses mutationobserver objects monitor log specific events mutationobserver objects stored using raw pointers which cause use free issues object longer expected location memory pointer referenced exploiting vulnerability requires creation subsequent deletion mutationobserver object which result denial service crash caused developer removed support specific heap memory testing which relevant vulnerability resulted heap related error discovered removal support may resulted six month discovery time vulnerability issue may discovered robust unit testing developer implemented fix added testing mutationobserver hashshet improved testing capability testing could lead earlier discovery issue
CVE-2011-3876,file downloads trailing whitspace characters end file name handled properly download warning given users explicitly downloading exe file users could download exe 25c2 25a0 file without warning trailing characters stripped file name which may lead user downloading something like exe file without knowledge seems like coding mistake one initially caught occurs specific circimstance happen often developers probably recognize issue created bug fix replaced whitespace file download names hyphens instead wiping completely better solution although still gives user download exe without warning user would manually alter file name case order allow file act maliciously which better potentially converting file exe without warning
CVE-2011-1435,implementation permissions browser extensions properly secured plugins utilizing file system could use error access files outside designated sandbox allowed attacker access files user system using malicious code inserted browser extension assuming knowledge user file structure able access files level permissions would sandbox e read write permissions feel design mistake made lead vulnerability design decision allow unrestricted access file system lower level permission led vulnerability seems oversight disallow file access outside plugin sandbox
CVE-2017-15405,symlink traversal cryptohomed allows persistence established malicious code race condition cryptohomed able execute commands root execution elevated privileges example opinion coding design mistake race condition symlink vulnerability coding mistake involved path traversal therefore would difficult pinpoint code avoiding symlink using value config file using string code could prevented vulnerability
CVE-2016-5171,webkit source bindings templates interface cpp allows constructor calls used constuctor allowed able get constructor make one illegal calls cause particalar system crash stop working causing denial service seemed lead vulnerability found using testing class methods instead incorperating already created testing options seen final commit code custom testing methods mode deleted created one person part think person either know testing packages want use think shows using packages reliable code others ok right situation would saved lot time effort done right away unable really figure going seemed simple fix get vulnerability fixed defining local VERVER template variable made funciton value without specifing parameter v8objectconstructor isvalidconstructormode maybe extra parameter added later allow specific constructors specific functions unclear code saw
CVE-2015-1268,document object model wrapper could returned incorrect scope allowing remote attacker bypass origin policy policy limits scripts webpage access information second webpage protocol domain host vulnerability vccs made course VERVER months two people one which patcher vulnerability tells could design mistake led passing type intended intended consequences understood design mistake suspect lack knowledge effects type passed
CVE-2016-1619,pdf file containing malformed jp2 image cause bounds read openjpeg library remote attackers able cause denial servie bounds read via created pdf document error occures pdf parsed jp2 image found rendered codex code complex generally created left alone software engineers want continuously look pdf rendered prefer assume works intended leave alone may problamatic changing systems vulnerability could led denial service attack crashing server software engineers must wary libraries using protect system outside vulnerabilities
CVE-2015-1260,attackers execute arbitrary javascript code upon completion getusermedia request object question destroyed within subroutine called allowing memory accessed freed mistake vulnerability made engineer decided remove default case switch well move critical function call executed none cases match function moved function changed thereby object deleted memory accessed certain use cases
CVE-2014-7941,one functions applications uses int data type certain value get particularly large since int variables smaller maximum value variable going max looping back negative values negative values could cause denial service vulnerability caused coding mistake developers fully think data would stored variable bug see useful fuzzers two different fuzzers able find bug which shows super difficult make useful fuzzer
CVE-2009-2060,vulnerability authentication false positive improper checking done validity identity someone http host header used responses proxy server certain response given someone passing response along able change content man middle attack occur relatively undetected main root cause oversight testing scenarios could happen never accounted way caught observing result one specific input often difficult catch every situation developing
CVE-2011-2849,websockets implementation chromium vulnerability due referencing null pointer browser tab closed would make current web socket null however tab still stacked sending jobs sendpending would attempt reference null socket pointer resulting browser crashing vulnerability could used cause denial service attack coding mistake edge case which closing tab would destroy websocket websocketjob would continue sending multiple sending jobs resulted use null pointer which could cause denial service mistake came result three commits two individuals first commits added majority code which vulnerability vulnerability likely due developer thinking edge case since anticipate issue individual working code notice automated unit tests catch bug slipped future vigorous test likely could caught bug familiar use intricacies using websockets would aid preventing mistake chromium team uses modern code review mcr process whose effectiveness come question recent years original authors vccs many code reviews time bug introduced fixed which code base containing vulnerability brings question either effectiveness mcr effectiveness reviewers source http ieeexplore ieee org document 7781793
CVE-2016-1648,vulnerability occured google chrome extensions specifically getloadtimes function renderer loadtimes extension bindings cc attempt access memory made memory freed causing use free vulnerability attackers use crash system cause denial service problems use memory access perform action memory defined system using technique like cross site scripting xss attackers write javascript run system research would mark vulnerability result big design change one time allowed simple big mistake slide file almost enirely rewritten improve performance update techniques used likely something like happen fix changed lot code file look changes overall flow code really change design modified check failed set instead relying successful set well nulling incoming arguement automatically instead frame data source document state failed retrieved angles look seems like design mistake performance update takeaway remember basics designing bigger chunk code small mistakes chain together cause bigger vulnerability
CVE-2013-6660,extra information gathered wesites uploading file which data leak extra information gathered location file local filesystem which information website need information available becuase file dropped chrome fills url data attribute object local file path looks like vulnerability could prevented team developing drag drop functionanlity kept information leaks mind little
CVE-2015-6780,vulnerability allows remote actors cause denial service damage chrome issue use free vulnerability exists infobars version google chrome use free refers memory allocated used freed able used supposed infobars displayed url bar related information important inform user case malicious actor could abuse freed memory chrome infobar tear whole browser vulnerability caused mistake made code level ultimately developers never reset pointer attackers would able leverage cause denial service chrome pointer freed attackers would able use memory address bring service
CVE-2014-1745,vulnerability svg implementation blink chrome rendering engine allowed denial service attack change made enhance performance implementation allow browser selectively update font rules page rather reload entire fontselector things changed vulnerability caused removal method wherein references removed element cleared even said element memory freed program would still attempt use elements would either crash unspecified behavior analyzing bug report comments followed well discussion vcc seems clear vulnerability simple coding mistake author vcc simply overlooked reference major enhancement renderer fixed vulnerability reported
CVE-2015-1258,specific webm file able crash chromium opened tab webm caused negative size parameter error chromium dependency libvpx understand technical solution discussion issue report negative size parameter caused buffer overflow libvpx side likely coding mistakes allowing vulernability exist communication mistakes making importance size limit flag obvious enough chromium team side would say thorough enough research libvpx flags available building used within chromium omission size limit allowed vulnerability since niche vulnerability mainly caused configuration issues third party dependency mitigations cwe particularly relevant useful
CVE-2017-15412,embargoed use free libxml
CVE-2017-15387,embargoed content security bypass
CVE-2015-6778,heap overflow bug chromium pdf reader image format called jbig2 similar jpeg pdfs store internal jbig2 images specially crafted jbig2 images would cause image decoder write uninitialized memory primary fix issue listed using c std vector instead manual memory management which listed common mitigation strategy believe issue caused subtle mistake anyone could made simple coding mistake
CVE-2015-6761,function ffmpeg used google chrome VERVER relies coefficient partition count multi threaded operation allowing denial service unspecified impact via crafted webm file main issue arose issue ffmpeg resulting race condition caused ffmpeg terminate fix involved updating version ffmpeg used well updating dependency tests ensure issue repeat issue coding mistake ffmpeg results race condition bug directly inside chrome
CVE-2011-2821,google using libxml2 library chrome way using library allowed attackers cause double free entering certain types code query double free result memory changed anticipate which result denial service attack additionally memory freed twice also cause malloc get called twice resulting pointer returned location memory two different malloc calls could also allow buffer overflow attack vulnerability introduced use libxml library use libraries make work easier remember libraries introduce many vulnerabilities code looking changes lxml library looks coding mistake assumed data structures could never modified turned incorrect
CVE-2017-15410,embargoed use free pdfium
CVE-2017-15403,command injection network diag
CVE-2016-2845,content security policy csp implementation blink used google chrome VERVER ignore urls path component case serviceworker fetch which allows remote attackers obtain sensitive information visited web pages reading csp violation reports related framefetchcontext cpp resourcefetcher cpp
CVE-2016-1692,downloading style sheet checks style sheet insufficient actor could carefully craft style sheet could inject scripting could executed could access native functions could lead attacker executing scripting native functions believe vulnerability caused due poor design believe programmer responsibility think scenarios something could go wrong processing stylesheets believe chromium team used something validation subsystem whenever stylesheet files used must go validation imagine many places chromium use stylesheets would need validate using validations fix would better single location validation occured rather multiple places project without subsystem developer responsibility think operation might cause sort vulnerability allow script execution system scales sort relaince developer think scenarios lead xss vulnerability
CVE-2017-6991,embargoed pointer disclosure sqlite
CVE-2015-1229,cookie injection attacks via crafted response could occur VERVER error raised caused design mistake security throughly thought issue created curiously user didnt remember close ticket took fix listed
CVE-2014-7908,integer overflow multiple media file types overflow vulnerability allows attackers cause denial serivce mov quicktime mpeg4 container defect could cause performance degradation potentially used vector denial service attacks biggest mistake lead vulnerability focusing efforts higher priority bugs existed within file coding bug initial check integer overflow however robust enough cover cases working solution bug using input validation done ensuring input within expected bounds expected fix looks proper changes following two lines int atomsize read32 buffer offset uint32 atomsize read32 buffer offset atomsize 0 atomsize VERVER atomsize static cast size buffer size fixes show uses checks see input within proper bounds well paying close attention variable types calculations given language
CVE-2010-0663,vulnerability described buffer overread which attacker force array index read beyond bounds array attacker use induce system crash potentially read memory access vulnerability occurs chromium bitmap buffers bitmap buffer row size bitmap buffer given two different sources which fall sync causing bitmap reader read beyond contents actual buffer e g given buffer small problem arose fact certain properties data used derived different sources truth namely size bitmap buffer could calculated buffer however one instance function accepted parameter which used source truth buffer size led possibility actual size buffer could different size given parameter which led logical inconsistencies potentially allowed buffer overread well limited escalation
CVE-2017-15399,embargoed use free v8
CVE-2017-5132,embargoed incorrect stack manipulation webassembly
CVE-2017-5043,embargoed use free guestview
CVE-2014-1702,vulnerability free use nature task running thread task ends thread shutdown vulnerability could allow attacker creat denial service leverage improper handling threads terminated appears code mistake one line code one file caused vulnerability leads belive simple function programmer overlooked use mitigation setting pointers null freed prevents attackers gaining accesss improper termination terminating thread clean process
CVE-2017-5073,use free print preview
CVE-2017-5067,url spoofing omnibox
CVE-2016-1639,based report cve 2016 1639 use free vulnerability webrtc audio private api implementation google chrome use free memory problem memory referenced freed developers usually face problem many application allocate memory previoused memory freeed may cause program crash use unexpected value perform certain action use free vulnerability dicovered file webrtc audio private api cc path browser extensions api webrtc audio private webrtc audio private api cc webrtc api vulnerability may cause denial service unexpect result dependent resource context pointer use free simple oversight issue system deal pointer however seem like vulnerability ignore commit f9583f83523a0ad7c2c97300dfe303066bcb1ec0 system attempted retrieval media device id salt even resourcecontext longer available design may work well lead vulnerability important solid design handle memory allocation free afterward
CVE-2014-7930,vulnerability blink google chrome browser engine dom implementation tree data structure written c dom model represents document logical tree branch tree ends node node contains objects dom methods allow programmatic access tree cause vulnerability possible variable called treescope which represents dom object root node deleted still use another context created use free vulnerability use free refers attempt access memory freed which cause program crash best case potentially result execution arbitrary code even enable full remote code execution capabilities furthermore crafted javascript code could trigger improper maintenance treescope data vulnerability user committed vcc introduced vulnerability code however since concern different event contexts require treescope different times argued design mistake first foremost pointers root node dom object null root deleted case mitigation solution store backup rootnode tree developers taken account tight coupling two contexts possiblity actions one scope would catastrophic effects another band aid fix fully adress fact scope variable tightly coupled
CVE-2015-1210,exception thrown dom exception object created inheriting object method called even comes different origin created object conduct checks whether supposed allowed access said origin exposing potential attackers case code small hole easily remedied without serious structural overhaul fixer ended creating fix essentially server side scenario browser vulnerability exactly typical scenario modifying throwexception class order apply fix potential exploit scenarios
CVE-2017-5040,information disclosure v8
CVE-2016-1633,typical use free pointer pointing location heap location free call free delete memory location longer considered valid pointer attempts read memory address back may get correct response memory allocator free put whatever wants back location usually possible programming languages specifically use garbage collection looking changed order fix cve two lines deleted checks performed actions performed line happens often mistake actually simple commits make case checking pointer datatype verifying pointer valid performing action relies pointer integrity project c c guidelines reference bounds checking pointer checking pointer operations performed tests written make sure pointers data checked operations could result errors performed stricter code review team members also able catch potential problems like future
CVE-2016-1708,chrome web store inine installation implementation extensions subsystem properly consider object lifetimes progress observation allows remote attacks cause denial service modifications system files information possible attacker direct control modified chrome browser extensions tab helper cc check frowned upon allows trivial dos chrome browser extensions tab helper cc dcheck install observers find webstore item id use install observers count webstore item id VERVER testing added new functionality tab helper cc
CVE-2015-6792,race condition checked midi subsystem google chrome VERVER properly handle sending data which allows remote attackers execute arbitrary code cause denial service application crash via unspecified vectors related midi manager cc midi manager alsa cc midi manager mac cc different vulnerability cve 2015 8664
CVE-2017-5057,type confusion pdfium
CVE-2010-4008,invalid memory access flaw found libxml2 library providing support read modify write xml html files remote attacker could provide specially crafted xml file processed application using libxml2 would lead read invalid memory address causing application crash denial service read xpath expressions method used navigate elements attributes xml file attacker could craft xml document malformed xpaths would cause application crash due way libxml2 reads xpath expressions which method navigate elements xml file libxml2 parses xml creates contexts looks similar concept scope goes tree structure xpath likely cause reference invalid null context resulting invalid memory access could done creating xml file forces parser attempt read invalid memory location leading crash example given reporter vulnerability mistake made trusting xml node null null would correctly formatted depending situation extra check ensure node contained correct information e malicious malformed fix appears proper checks xml nodes correct type returning performing extra checks additionally due happening xpath processed additional validation nodes performed file involved vulnerability related test file discovered testing additionally related test file updated include specific tests vulnerability which likely oversight dev working possibly adding fuzzer different xpaths xml structures could implemented help find prevent vulnerabilities like
CVE-2017-5044,heap overflow skia
CVE-2017-0561,embargoed broadcom wifi soc remote kernel code
CVE-2017-5034,use free pdfium
CVE-2014-7925,chrome tab crashes audio nodes blink webaudio component destroyed disposed garbage collector caused racing audiocontext thread garbage collector thread means audio node traversing graph mutation garbage collector which causes chrome crash tab close opinion design issue way threads handled which allow data processes used chrome also cleared garbage collector process
CVE-2017-5039,use free pdfium
CVE-2016-5160,vulnerability chrome extensions utility every extension manifest json file which holds web accessible resources field field states every internal resource extension accessed via web system would allow user open iframe settings page extension attackers could use vulnerability trick users changing settings extensions mistake coding one design requirements one correct behavior extension functionality needed revised fix involved removing old code writing new code match new requirements interestingly find records requirements
CVE-2015-6759,origin localstorage resource google chrome verified unique allowing remote attackers obtain sensitive information via vectors involving blob url unit testing properly cover possible cases allowing incorrent validator used
CVE-2017-5085,inappropriate javascript execution webui pages security pov seem terribly interesting attacker must convince user add dangerous bookmarklet navigate privileged page invoke bookmarklet
CVE-2017-15389,embargoed url spoofing omnibox
CVE-2015-1247,chrome allowed file url descriptor opensearch xml document file urls forgotten added check valid urls appears good fix whitelisting urls allowed
CVE-2017-5129,embargoed use free webaudio
CVE-2014-1727,vulnerability web color chooser ui object removed wrong class allowing attacker access freed memory cause denial service attacks possible attacks unknown vectors related forms vulnerability related resource management take account paticular object may deleted ensure ok deleted time something hard protect many different times object deleted figuring posible interactions tough best limit possiblities object iteractions ensure needs easy fix bug could big implications since use free vulnerability
CVE-2017-15395,embargoed null pointer dereference imagecapture
CVE-2017-5030,memory corruption v8
CVE-2014-1746,function relies integer data type large enough vulnerability allows attackers cause denial service using vectors buffer larger integer data type mentioned leads bounds error bug caused developers realizing changing data type int would allow variable sufficiently large error would would classified coding mistake making changes developers take time contemplate things way unless developer intimately knowledgeable source code good idea consult colleagues potential changes
CVE-2011-0783,faulty logic checking volume audio caused browser crash potential large scale attack oversight validating data replicated across functions files caused vulnerability developers considered edge cases types potential input avoid vulnerability
CVE-2017-5095,bounds write pdfium
CVE-2017-5127,embargoed use free pdfium
CVE-2017-5100,use free chrome apps
CVE-2011-1807,heap based buffer overflow google chrome blob url handling code vulnerability allows remote attackers execute arbitrary code via unspecified vectors trigger bounds write fix vulnerability free memory last step affected function vulnerability seems coding mistake first glance obvious one functions involved frees memory called mentioned earlier size commit rather large 1721 lines 64 lines affected VERVER files perhpas author reviewers would caught fewer concurrent changes consider
CVE-2010-3411,google chrome VERVER linux properly handle cursors which might allowed attackers cause denial service assertion failure via unspecified vectors example user login safaribooks click link book move mouse around user still able move mouse around continue use chrome however happens instead fatal assertion failure message backtrace cause vulnerability coding mistake issue hotspot bounded custom cursor size custom image dimensions result using linux chrome crashed bounds hotspot cwe entry chose bounds write hotspot bounded cursor custom dimension cursor moves outside hotspot ui crashes mitigate weakness check verify hotspot bounded custom cursor mitigation happens implementation phase however case realized became vulnerability
CVE-2017-5118,embargoed bypass content security policy blink
CVE-2012-5149,integer overflow audio layer google chrome allowed remote attackers cause denial service possibly unspecified impacts via unknown vectors
CVE-2015-6777,versions google chrome VERVER vulnerabilty would cause application crash due memory referenced freed application problem could leveraged cause denial service attacks unspecified results vulnerability apart containernode portion core webkit code specifically triggered container node inserted containernode notifynodeinsertedinternal function without checking node shadow tree error definitely simple coding mistake original commit introduced error meant optimize node insertion notifying leaf nodes inserting node detached tree lack foresight checking node question shadow tree references freed memory made
CVE-2016-2844,ability determine anonymous block wrapper existing work properly caused vulnerability could allow remote attackers cause denial service major cause vulnerability environment working another section corrected automated tests started failing also comments shown people understand layout access one subset people could fix issue
CVE-2010-2107,error caused chromes memory become corrupted issue would occurr user attempted connecto site marked malware longer existed clicked continue anyway refreshed page long loading time would cause memory corruption could used execute code outside original memory space seems coding error vulnerability possible mainly extra check would enter error state specific method called twice
CVE-2013-2878,lack bounds protections input sanitization allows remote attacks cause denial service attacks
CVE-2011-2837,google chrome linux specific bug based compiler options compiler configured use pic position independent code pie position independent executable since code compiled expected attack surface unpredictable plausible security attack could related denial service certain machines due compilitation related crashes memory positioning involved vulnerability information disclosure could also issue case overflow chrome team conversation seem concerned details possible attacks security severity bug low security wise seemed like better safe sorry situation seems vulnerability caused overlooking finer detail compiler configuration missing proper compiler flags unpredictable behavior introduced system cwe 684 simply code function due published specifications which bit vague mitigation suggested also brief make sure code adheres specifications appears google team found issue hard tell ultimate cause vulnerability outright design mistake coding mistake creating configuration file improved communication proper settings specific platforms would definitely helped team
CVE-2016-5158,two places int overflows occur pdfium openjpeg int overflow targeted cause denial service done thorough heap based buffer overflow also could unspecified impact jpeg data mistake really seemed manual change made chromium diffrent software peice relayed updated seemed like easy automate fix would prevent happening
CVE-2017-5053,bounds memory access v8
CVE-2017-5069,cross origin bypass blink setting header x xss protection 1 report cross domain uri possible send cross origin post request content type value application json request containing content type application json trigger pre flight request happening imagine situation application expecting parameters endpoint https app com user 1000 delete post request csrf protection based cors would bypass restriction
CVE-2017-15391,embargoed extension limitation bypass extensions
CVE-2015-1273,vulnerability caused incorrect data image file which creates heap buffer overflow heap buffer overflow different regular buffer overflow heaps dynamically allocate memory usage memory contains program data overflow occurs program critical data corrupted overwritten pointers generally victim causes instability denial service crashing services subsystem one called openjpg whose purpose interpret render images specifically images within pdf file used pdfium pdfium chromium tool interpreting pdfs data read openjpg interpreting image subsystem expected received improper input resulted heap buffer overflow solution upgrade r3002 openjpeg which based intuition reasoning added checks data ensure run cve similar cve 2016 1645 which also curated found interesting one problem could require two different solutions two different similar areas biggest mistake lead vulnerability properly validating inputs allowing invalid data dynamically allocated larger buffer size prevent heap buffer overflows failed use unit testing phase early development except seeming add large unit testing file included checks vulnerability may able look seems failure multiple fronts original developer writing proper test cases future developers writing verifying method worked intended looking ways could broken company proper code review catch could exploited
CVE-2017-15420,embargoed url spoofing omnibox
CVE-2017-15407.yml,embargoed bounds write quic
CVE-2014-3156,inside clipboard implementation buffer overflow vulnerability trying copy certain things clipboard renderer cliboard would return something null pixels causing overflow solution seeing seems simple coding mistake developer allocates arithmatic values never checked problem arose quickly
CVE-2010-4034,handle form input safe manner allowing attackers crash application dos due stale pointer bug programming error dynamic memory allocation first seemed minor coding mistake issue chrome needed check frame created frame however quickly fixed engineers pointed still crashing began label error release blocker one point engineers discussing backup plans current fix risky easiest way around issue remove autofill engineers decided removing useful consumer tool eventually team found issues lie webkit interestingly even though found memory leaks happened one see code VERVER onger even uses form manager
CVE-2014-1568,attacker could spoof rsa signature via bleichenbacher low exponent attack tls handshake certificate signature forgery due fact network security services small abstract syntax notation one decoding main mistake trusting asn 1 which bleichenbacher low exponent attack problem project cross multiple applications one solution creating every component however realisitc best solution testing aspects library using staying date information creator library releasing
CVE-2016-5133,vulnerability comes lack foresight initial development misunderstanding process used vulnerability effectively way attacker mislead users obtain credentials vulnerability appears came mostly requrements error initial investigation transmitting vpn password well obtain vpn password prompted yielded information concerning os support lack time without piece information beginning design process taken information accurate
CVE-2009-1441,vulnerability heap based buffer overflow accessible via google chrome ipc messaging could allow attackers malicously access bitmap renderer cause denial service application crash possibly execute arbitrary code via vectors related large bitmap arrived ipc channel means arbitrary data inputs properly verified sanitized data passed renderer overflow could allow arbitrary execution meaning attacker could control system perform advanced attacks know inputs controlled user system handles input data vulnerability would accessible attacker gained control system jumped another previously discovered vulnerability due subsystem customer facing actual user input passed attacker would exploit inputs system utilize heap overflow due ipc messages mainly input sanitization verification mistake probably lazy coding common fix verifying inputs methods done vcc however flaw design system team later mentioned vulnerability would possible interactions systems via ipc messages therefore trusted data given well formed case lead vulnerabilities
CVE-2017-15386,embargoed ui spoofing blink
CVE-2016-1699,lack proper distrustful decomposite design led inclusion bug which allowed client script access read contents computer entire filesystem design chrome devtools allowed run unsafe eval unsafe inline javascript execution issue trusted dev tools hosted chrome devtools frontend appspot com url whitelisted javascript code browser believes came source allowed run typed permissions security model allows devtools power freedom average web page allowed reasonably little attack surface exploit vectors enter omission proper sanitization src attribute attatched iframe elements page however exposed elevation privlages vulnerability executing code may may come whitelisted source
CVE-2015-1270,function ucnv io getconvertername file ucnv io cpp parse strings beginning x correctly leading potential dos attacks development team consider inputs beginning certain combinations characters could cause problems better validation inputs would prevented becomming issue
CVE-2016-5144,vulnerability chrome devtools previously url passed function function attempted sanitize url sanitization algorithm insufficient allowed attackers bypass access restrictions inject arbitrary html tags page bug allowed chrome extensions google tone used execute cross site scripting attacks chrome devtool urls coding mistake failure properly sanitize inputs vcc author think different inputs wrote sanitization functions vulnerability introduced two commits author wrote sanitization function check url certain prefix failed realise html tags could injected site input whitelisted essentially allowed malicious javascript code inserted user page url xss thought potential url inputs
CVE-2017-5041,address spoofing omnibox confirm form resubmission box appears form submission sent another web site location bar shows url ssl indicator website targeted content previous webpage continues shown
CVE-2017-5113,embargoed heap buffer overflow skia
CVE-2015-6755,issue found chromium reported august VERVER VERVER found mariusz mlynski webkit source core dom containernode cpp parserremovechild run script remove nextchild dom move node around happens tree inconsistent state insertbeforecommon call allowing attacker bypass frame restrictions attackers exploit issue execute arbitrary code bypass certain security restrictions perform unauthorized actions gain access sensitive information may aid attacks really boils improper testing one edge case original author check original user wrote code check parent nextchildnode simply see potential vulnerability took fix simple check failed return statement issue really severe security risk could used perform attacks users executing arbitrary code gain access private information seem like dire consequences missed check take much attacker gain access system making fix maintains integrity dom tree insertion newchild node aborded addition return statement rectifies ability attacker exploit vulnerability edge case
CVE-2011-2787,failing lock unlock gpu allows reentrancy issues allowing remote attackers execute denial service attack crashing application using unspecified vectors would likely best fit design flaw likely overlooked edge case concurrent operation gpu likely overlooked code review qa result missing vector looking potential flaws
CVE-2017-5032,bounds write pdfium chrome browser vulnerable bound write invalid pointer write vulnerability due improper pointer arithmetic parsing malformed pdf file due incorrect validation could used gain remote code execution
CVE-2015-1292,blink rendering engine google chrome since VERVER defect internal navigation function verification origin request allowed malicious attacker perform arbitary cross site scripting able call function coding mistake made excited implementing new feature checking entities using feature say design mistake mostly code written library intended designers subsystem think case untrusted users accessing worker never thought check principle defense depth applies mostly since service workers heavily integrated component modern web browsers malicious user could injected arbitary code browsers able somehow invoke service worker wrong context
CVE-2013-6645,vulnerability pointer used already freed called use free vulnerability vulnerability allow attackers cause denial service attack set users would longer able use browser sequence activities could cause exploit involves specific actions related speech input element chrome browser coding mistake led vulnerability seems developer implementing quick fix different bug realize introducing use free vulnerability fix mistake look proper issue created developer properly handling parent object properly handling pointers children parent fix involved iterating child objects handling properly well
CVE-2013-0925,missing check see extension permission tab allowing access tab url potential leak user visited tabs attacker searching cve long time unable find exact vulnerability know somewthing checking extension permissions updating tabs could somewhere following files chrome browser extensions browser event router cc chrome browser extensions extension tab util cc potentially tabupdated extensionactionexecuted functions browser event router cc createtabvalue function extension tab util cc
CVE-2017-5045,information disclosure xss auditor attackers exploit xss auditor blocking mode leaking information webpage different origin
CVE-2017-15400,embargoed crlf code injection printer zeroconfig
CVE-2017-5063,heap overflow skia
CVE-2017-15426,embargoed url spoof omnibox
CVE-2017-5097,bounds read skia
CVE-2017-5102,uninitialized use skia uninitialized value created allocation color stack frame readbuffer function
CVE-2017-5075,information leak csp reporting adding content security policy header containing report uri lead leak current url fragment web server even though never sent turns otherwise active attack serving evil javascript file user make leak fragment passive deferred attack using mechanism otherwise made improve security
CVE-2017-5079,ui spoofing blink usually window open deactivates origin window validation bubble origin window closed however window print executed suspends message loop window deactivation noticed print dialog closed
CVE-2016-1616,vulnerability attacker could spoof url using unfocused button ui via accelerator keyboard shortcut unfocused button button currently focus web browser one button focused time hitting enter essentially clicks currently focused button button become focused clicked selected pressing tab issue unfocused buttons allowed interact accelerators keyboard shortcuts malicious actor could force user navigate arbitrary website bug result mistake planning given test case could caught issue never considered vulnerability discovered lesson taken determining obscure edge cases help determine potentially dangerous vulnerabilities oversights inevitable bounty programs good way get many eyes code possible vulnerability reported community member could languished source code years come
CVE-2013-0831,path traversal vulnerability allows remote attackers unspecified impact leveraging access extension process opinion coding mistake author code account file names present code returned unintended filepath
CVE-2017-15393,embargoed referrer leak devtools
CVE-2010-2903,security information dialog chrome incorrectly displayed hostname windows hostname became merged following line linux truncated could potentially result attacker using long hostname spoof another website bug due simply validating hostname extremely long hostname may even considered design however become issue later present begining method written two commits vulnerability considered low severity discovery likely oversight design implementation initial disagreement issue required fix still considered unlikely enough important frequently used websites long enough hostnames allow exploit existed establishing spoofing indeed possible filed low severity
CVE-2016-5131,vulnerabilitywas caused implementation function handled range function xml code memory freed attempted used which cause chrome crash freeze could abused intentionally make chrome unavailable users allow remote code execution think misunderstanding range xml markup language led vulnerability since commit message seems imply range real function special type location step which handled xpath c
CVE-2017-5082,insufficient hardening credit card editor flag secure used within chrome android putting prefilled credit card numbers would allow another application device see screen capture numbers comparison android pay android wallet use flag secure credit card entry
CVE-2013-0895,google chrome linux mac os x properly handle file paths copy operations copydirectory method copy operation properly strip trailing separators creating target path which makes possible remote attacker execute arbitrary code path traversal primary culprit vulnerability copy paste styled implementation file paths first iteration copydirectory method posix operating systems input checking path assumed malicious file path would used interesting gap VERVER years first implementation copydirectory method vulnerability vulnerability fixed series edits made problematic lines code google employees one which addressed may problem path implementation leading characters scratched surface greater problem fix ended utilized generic appendrelativepath function could utilized operating systems worked sanitize validate file path inputs constructing file path copydirectory function
CVE-2015-1297,webrequest api properly consider request source accepting request allows bypassing access restrictions introduced bug fix VERVER years prior fixing similar bug permissions bug introduced
CVE-2016-1682,checks verify content security policy csp request missing function registers service workers allowed attackers bypass csp register service workers even able seems though developer think check csp registering service workers fix simply adding statement registration check csp mistake made original developer forgetting make check
CVE-2017-5133,embargoed bounds write skia
CVE-2015-1257,graphics module used chromium engine contained bug fecolormatrix cpp file caused lack check amount values matrix passed createcolorfilter method specifically method passed empty vector object would cause crash bug proven least cause denial service also potential worse impact crafted document ultimately led bug assumptions made design stages developers put less trust surrounding code could avoided vulnerability together
CVE-2015-1267,scripts pass objects api chief context meaning cross origin scripting possible therefore information one system passed another considered another system mistake chiefly design architecture domain developers failed recognized context needed validated mitigation accordance cwe recommendations which involved obtaining origin request passing global instance additional mitigation could whitelisting trusted applications using manifest xml however chrome intention limit others applications plenty plug ins apis necessary assume risk order reach broader audience
CVE-2016-1700,creation array views extension nothing prevents setters destroying view one array indeces which triggers unexpected behavior said destroyed view attempted accessed parts extension browser vulnerability simple coding mistake take account deletion single member array affects access data within said array fix takes account runs checks validate integrity data stored
CVE-2011-2332,universal cross site scripting exploit possible abusing window execscript
CVE-2017-5072,address spoofing omnibox url bar reliable security indicator browsers reliable security indicator could controlled attacker could carry adverse affects instance potentially tricking users supplying sensitive information malicious website due fact could easily lead users believe visiting legitimate website address bar points correct website
CVE-2015-1237,google chrome susceptible use free vulnerability pointer used freed accessing pointer freed cause unintended behavior like program crash unexpected runtime values change program execution attacker could exploit vulnerability specially crafted website cause renderer crashes arbitrary code executions vulnerability resultant coding mistake vulnerability required two sloc change which indicative vulnerability sourced oversight author fix required following mitre recommended mitigation which set pointer null freeing
CVE-2011-3022,javascript used chrome translate web pages downloaded http script executed context web page translated translate translate manager cc google chrome VERVER 19 x VERVER uses http session exchange data translation which allows remote attackers obtain sensitive information sniffing network small coding mistake made page url could contain javasript could potentially executed general important sanitize urls whenever obtained regardless providing urls still could contain malicious content
CVE-2017-15408,embargoed heap buffer overflow pdfium
CVE-2012-5154,integer overflow web browser could allow attackers cause denial service attack could also allow impacts vectors related allocation shared memory requirements use buffer laid completely programmer may known check size upon implementation phase programmer however could possibly forgotten check buffer size which coding mistake
CVE-2016-7549,reciever ipc message never validated meaning messages could sent null invalid dead processes created opportunity denial service attacks well opening arbitrary code execution vulnerability stemmed design flaw assumed object state reason design flaw summed comment one developers see frame destroyed sent message thought never happen type assuming lead oversights design flaws one mitigation cwe use static analysis tools check unreleased resources sums fix introduced vulnerability checking state object instead assuming
CVE-2011-2782,drag drop implementation google chrome linux properly enforce permissions files allows attackers create file link website e x href file etc passwd user drags link onto something like file upload upload file users device vulnerability clearly design flaw developers conversation bug clearly anticipate drag drop working properly url linking file dragged opposed file
CVE-2011-3026,function called expand size png within google chrome value associated size png large requested meaning size limitation reason arbitrarily large process inflating compressed image holds need throw away chunks data decompressed output arguement VERVER due vulnerability malicious users exploit create value data expanded greater type value png size hold causing overflow obviously leads memory allocation issues heap buffer overflow possible entry point malicious attackers implement dos possibly unspecified impact tampering integers via truncation overlooking input due face value input image opposed data taken strings characters fairly complex vulnerability even catch relatively simple fix
CVE-2017-5115,embargoed type confusion v8
CVE-2017-5065,incorrect ui blink form input validation bubble go away page reload
CVE-2016-5150,properties variable attributes object like color property bird properties also inherented perent class example bird inheret properties animal parent class key paths way storing uninvoked references properties means refer property rather property value vulnerability google javascript engine v8 api implementation written c getters using key paths restricted inherited properties allowing getters prototypes executed created use free vulnerability use free specifically refers attempt access memory freed which cause program crash best case worst case since vulnerability javascript feature attackers could execute arbitrary code even enable full remote code execution capabilities bug report available clear whether known issue library specific v8 implementation latter mistake causing vulnerability improper implementation 3rd party library indexeddb google developers failed restrict certain key path evaluations specically getter calls made prototypes hand library unknowingly contained bug indexeddb would fault testing edge cases came library security
CVE-2017-15418,embargoed use uninitialized value skia
CVE-2016-5127,vulnerability allowed remote attackers attack google chrome version VERVER released remote attackers cause denial service possibly problems specified attacks done using javascript code code involves import rule css token sequence along rel import attribute link element means attacker able attack html file user trying import file seems similar cross site scripting xss vulnerability discussed class vulnerability caused due lack design developers design updating layout tree appropriately cwe 416 use free weakness someone references memory freed causing program crash presumably pending files free memory scenario mitigation set free pointers null freeing pointer situation main fix making intial check previouslineposition use dangling rootinlinebox ensures memory longer free vulnerable developers seem done fairly good job patching issue quickly effectively
CVE-2017-5121,embargoed bounds access v8
CVE-2016-1660,problem library attackers could cause dos attack input would cause overflow error crash service function would try assert index specified actually within bounds array however fix assert would throw error index range would throw error debug mode fix caused error thrown debug production mode believe real vulnerability led mistake chromium side fact trusted outside source library secure even though outside library well established believe chromium team looked source adding project however size webkit repo know likely impossible look everything
CVE-2013-2916,blink used google chrome VERVER allows remote attackers spoof address bar via vectors involving response VERVER aka content status code conjunction delay notifying user attempted spoof
CVE-2017-15428,embargoed bounds read v8
CVE-2011-3965,google chrome crashed program internally called function function tries access data null variable allows remote attackers cause denial service application crash general null pointer deference problem occur application deferences pointer expecting valid null causes program crash exit null pointer dereference one commonly seen vulnerabilities important validate data received outside module acting upon sanity checking using could nearly prevent null pointer dereference problems however impossible sanity check data times thus writing strong unit tests check scenarios whenever possible could go long way
CVE-2013-0889,chromium browsers properly check users performed gesture required downloading file made possible remote hackers run arbitrary code crafted file simple mistake looks like developer missed input validation fix add one check input make sure request download one came user remote hackers
CVE-2013-2904,use free vulnerability google chrome VERVER allows remote attackers cause denial service attack
CVE-2011-0477,google chrome VERVER chrome os VERVER properly handle mismatch video frame sizes which allows remote attackers cause denial service incorrect memory access possibly unspecified impact via unknown vectors attacker could provide webm video decoded via ffmpeg would cause segmentation fault causing chromium cease running seems instance decode engine would uninitialized circumstances possibly leading mismatch frame sizes fix seems always uninitialize decode engine
CVE-2017-5037,multiple bounds writes chunkdemuxer
CVE-2011-3094,input validation vulnerability properly handle tibetan text thus bounds read could occur tibetan handling tibetan letter followed tibetan cantillation sign global buffer overflow would reported vulnerability located method called tibetan form vulnerability could exploited remote attackers could execute arbitrary code system cause denial service via bounds read use unspecified vectors accomplish persuading victim visit specially crafted web site javascript program using chromium VERVER could exploit vulnerability trigger bounds read order execute arbitrary code system mistake allowed bounds error variable c which which represents tibetan unicode char hex value used find index involvement math allowed either less equal 0x0fc0 which turn allowed bounds error occur appeared oversight boundary cases addressed thus limited incorrectly
CVE-2017-5106,url spoofing omnibox similar cve 2017 5105 spoofing occurs inserting cyrillic characters url
CVE-2013-2900,windows version properly handle components path name containing VERVER dot white space characters remote hackers utilize directory traversal crafted directory name main take away cve investigations need done changing security case additional secuirty check put place handfull different files solved vulnerability would argue lack organization path traversal mitigations which may caused issue overlooked believe vulnerability caused lack proper design case many different files logic handling file paths securely cases missed sanitation logic split many different files makes harder track sanitized properly
CVE-2015-1236,process function web audio api function allowing attackers access sensitive audio sample values offline website containing offline media element seemed coding maintainability mistake could mitigated vulnerability difficult one discover would required extensive testing components system impractical would require lot resources know exactly looking one thing could looked since audio object handling sensitive data subsystem handles object focus unit testing common practice evauluate areas assets accessed vulnerability perfect example mistake trusting api secure web audio api responsible hosting vulnerability would google responsibility evaluate api implementation involved handling sensitive data
CVE-2014-1718,integer overflow possible finding area frame swap could happen height width frame set large enough value formula multiplies values VERVER check size resulting integer thiss could allow web application potentially escape memory space allocating large amount renderer memory overwriting controling memory space applications running within chrome sandbox escape also allows denial service attack forcing crashes issue seems come coding mistake appears variables leading section code properly checked avoid integer overflow calculation done variables considered
CVE-2016-1617,feature webkit tool implemented blink function called cspsource schemematches issue http policies regarding security site applied https secure http well web services web service security policies https lowers level difficulty remote attackers learn whether specific header files hsts website visited terms csp report terribly dangerous vulnerability still detail accounted prevent malicious attackers exploiting user information n
CVE-2017-5124,embargoed uxss mhtml
CVE-2016-1655,VERVER denial service use free vulnerability exists google chrome crafted extension used create infinite amount new hidden windows observer tied deleted frame removal mainly design mistake slight requirements mistake design mistake using observables able cancelled never explicitlly stated however believe ability easily cancel available developer would thought protect vulnerability requirements mistake specifically stated test however requirements mistake within reason beacuse exploit extremely well crafted required many layers exploitation reasonable plan exact vulnerability beforehand believe fix correct balance invasive well thought designed
CVE-2011-1809,accessibility ui attempts use memory freed allows exploitable memory corruption denial service impact via unknown attack vectors vulnerability looks result design oversight combined coding mistake introduction part large change almost VERVER lines another issue bug missed ultimately found day later fuzzer
CVE-2013-2873,loading error VERVER page vulnerability webkit which object called weburlloader used deleted weburlloader originally released received inter process communication page finished loading subresources VERVER page transitioned finished state may signaled error resulted message nested message loop subresource already finished weburlloader freed use free crash occurred subresource attempted proccess body received nested message loop fix vulnerability simple enough adding protective pointer main mistake developers failure reinstate reverted test would caught vulnerability months earlier unclear test reverted never reexamined comments thread reverting commit stop days likely team busy pressing matters simply forgot test since fix bug landed fine process mistake possibly due miscommunication emergence higher priority bugs
CVE-2016-1613,referencing memory freed lead variety behaviors including crashing corrupting data specific cve due improper handling tracking VERVER objects destruction objects memory accessed cause use free vulnerabilities found allow remote attackers cause denial service availability attack well potential unspecified impact implementation design mistake since working memory management writing code begin handle proper accessing objects create destroyed first cve seen done makes wonder use free vulnerabilities commonly thought coding plan security procedures
CVE-2017-5084,local access local files via dbus
CVE-2016-5163,english many languages processed left right ltr languages like arabic hebrew processed right left rtl unicode supports characters classifications strings made ltr rtl characters must displayed specific order using bidirectional text bidi algorithm vulnerability chrome android user entered url address bar first strong character character clear direction either ltr rtl usually alphabetic character url rtl attacker could construct url displayed reverse introducing address bar spoofing constructing urls appear visiting one domain actually visiting malicious site example url 127 0 0 1 http example com first strong character ltr character causes neutral characters numbers punctuation preceding take rtl direction http example com remains ltr result url displayed http example com 127 0 0 1 ltr segment appearing rtl segment displayed url example address bar spoofing leads user believe visiting example com actually navigating localhost vulnerability found omnibox which responsible things like url auto complete instant search search suggestions nearly impossible find source vulnerability introduction urlbar suggestionview omnibox code repo buried deep within 1000 file commit may contributed vulnerability developers consider breaking future refactoring efforts across multiple smaller commits improve traceability team clearly considered issues bidirectional text code vulnerability seems slipped therefore would classify coding mistake support bidi seems already part requirements design fix seems proper developer specifically chose force ltr solution order align behavior similar modules system
CVE-2011-3953,user performed paste operation attacker could use malicious code webpage could start loop would continiuously monitor user clipboard could allow attackers steal password information sensitive data clipboard primary mistake simply oversight implementation product none developers thought attack possible issue years introduced therefore directly mitigated quite time developers good job design product applying defense depth area users least notified something wrong could possibly gone simply notifying users likely design tradeoff developers knew going allowing sites remain infinite javascript loops order prevent total crash mitigation cwe states priveleges extended complete exact task hand fix issue follow exactly access clipboard terminated directly paste complete terminated contents clipboard changed however seem direct negative security implications fix since site still restricted see clipboard contents already read paste operation still thought could put fix order sure attacker exploit method stealing clipboard data using permissions given
CVE-2014-1740,vulnerability example trying use memory discarded could lead crash chrome thus giving denial service attack potentially others issues exploit affected ninety three versions chrome discovered google addresssanitizer able find issue detect leak vulnerability fixed tests never added due code depended ready merged error found lack testing test case seemed fairly obscure case easily see team missing evidence obscure edge case supported code remaining unchanged VERVER years area indeed unit tested lack testing per say found cursory internet search lead find script reporter used likely created script looking specific case made script afterwards confirm
CVE-2015-6757,trying access data serviceworker freed creating denial service vulnerability c data freed use complete save memory allow unused data picked garbage collector data struct pointer freed longer able acces block data creating seg fault crashing system many cases also freeing data use complete system denied service unable access serviceworker serviceworker freed early callback function thus creating use free vulnerability mistake made basic c coding mistake which freeing data trying access freed data longer exists far mitigation using data aftering freeing goes fix looks proper data freed done used
CVE-2017-5046,information disclosure blink
CVE-2017-5092,use free ppapi sandbox process sends ipc message browser browser unable verify authenticity results browser reading uninitialized memory heap crashing
CVE-2015-1255,chromium blink rendering engine used almost one one relationship browser tab instance takes responsibility rendering content browser tab case vulenrability blink trying use particular object instance stop playback music content browser tab process instance destroyed use free vulnerability webaudio implementation chromium allowed remote attackers cause denial service possibly unspecified impacts fix adds empty destructor call newly introduced function which removes instance particular pointer blink renderer engine instance used later blink even though initially vcc destructor empty c time destruction still destroy member variables class which caused use free issue addressed appears mistake design approach since instance webaudiocapturersource could shorter life blink considered things need done time destruction case fix adding destructor webaudiocapturersource remove pointer blink solution
CVE-2014-1743,attackers could cause application crash exploiting use free vulnerabilty blink use free vulnerabilty use previously freed memory creates unexpected behavior code vulnerability exists seemed changing multiple began pushing commits use free operation code seemed introduced miscommunication one user removed check another user added feature without said check
CVE-2017-5042,incorrect handling cookies cast user starts browser immediately sends udp multicast ssdp request 239 255 255 250 1900 purpose request gather info local network devices chrome could later use screen casting problem effect functionality browser asks network suggest set urls run http get requests startup runs requests without user interaction awareness
CVE-2014-3198,scrolling using arrow keys subsystem pdfium check first visible page case yet visible page check return 1 check scenario which caused attempt index 1 resulting buffer overflow app would crash causing denial service buffer overflow also exposes app potential data corruption malicious code execution vulnerability caused simply overlooking case visible page 1 returned which causes logic try index 1 fuzzer found issue simple fix interestingly case returning 1 visible page checked file entire file checked first visible page VERVER times first VERVER occasions check see 1 returned third time due fact vcc added lot functionality leads beleive thouroughly check commit happened consider edge case third scenario unit testing notice simple mistake fuzzer found able add checks 1
CVE-2017-15397,embargoed use plaintext network protocols chromevox
CVE-2017-5059,type confusion blink
CVE-2013-2855,vulnerability google chrome developer tools api chrome inspector which lets user view html page way user set setter get access object called injectedscripthost implementation which done c class methods elevated privileges common user which could accessed could result crash best integrity violation worse way could exploited would attacker found vulnerability used purposely crash site could prevent people accessing site also known denial service vulnerability oversight programmer intended class used inspector think consequences user able access object also javascript code sanitized console which made vulnerability possible surprisingly fix simply use methods object elevated privileges unless specifically inspector get root problem console let user set setter javascript which made object vulnerable first place believe sanitizing console input could improve fix
CVE-2017-5080,use free credit card autofill duplicate instances savecardbubble fail get cleaned
CVE-2010-4485,VERVER google chrome vulnerability allows attacker create infinite amount file dialogs crash browser consuming available memory vulnerability proven present crafted extension coding design mistakes led vulnerability started design mistakes refactor untrusted code handled turned coding mistakes refactoring exposed function content scripts directly executed windows visible allowing attacker create new invisible windows open file chooser dialogs believe fix correct balance invasive well thought
CVE-2017-5114,embargoed memory lifecycle issue pdfium
CVE-2015-1222,use free vulnerability present check null unexpected input causing program delete space memory try delete space left door open denial service errors impacts attacker would enter null value object unexpected input believe coding mistake caused vulnerability think programmer would validated input put checks place vulnerability never would come think fix put place good mitigation problem context null system would try delete start null space memory causing use free problems resulting denial service implementing null check makes sure freeing trying delete null space check memory address null try free delete
CVE-2017-5081,extension verification bypass approach bypass extension content verification mechanism chromium based browsers approach used malware adware writers malicious extensions droppers which use mechanism itw nutshell bug lack verification extensions locale folder possible create extension which consists content script example script located locales folder
CVE-2014-1719,vulnerability found allowed already used memory used web workers api implementation vulnerability allowed remote attackers cause attacks could bring system well possibly inputs trigger termination shared web workers script loading mistake came coding flaw caused would denial service attack well potential errors could avoided knowing function properly placed moving position one lines code made fix may potential vulnerability fixed design phase module code review seemed like discussion sparked regarding correct placement line discussion brought implementation implications placement line code known could mitigated
CVE-2013-6655,vulnerability heap previously freed would attempt get accessed scripts running pages loaded limited knowlege area sounds like really design mistake sounds like scripts run layout devs thought needed order maintain performance however scripts causing bugs security risks place actually executed testing research done ahead time designing bugs would never happened end devs ended changing certain events fired fix bugs risks
CVE-2011-3079,inter process communication implementation correctly validate messages allowing attack vectors possible create fake listener process proper permissions connect pipe started browser process cause privledge escalation mistake trusting pipe input given process assigning random id process adding system trusting default fix worked giving specific id could controlled properly introduced child process hosts refactored interface content public rather inheritance
CVE-2017-15411,embargoed use free pdfium
CVE-2017-5071,bounds read v8
CVE-2017-15422,embargoed integer overflow icu
CVE-2014-1701,cross site scripting xss vulnerability located generatefunction function path bindings scripts code generator v8 pm blink existed aforementioned function implement specific cross origin restriction eventtarget dispatchevent function events processing component able properly filter user input html code displaying input way vulnerability exploited remote attacker trigger universal xss uxss attacks via vectors involving events essentially force execution arbitrary scripting code target user browser within context different domain affected iframes permitted page arbitrary site retrieve document element target page long following conditions concerning target page met 1 may imbedded iframe 2 handler window event 3 gets sets property event jquery listener 4 returns dom node handler mistake seemed stem lack proper security checks place stated previously description events processing component able properly filter user input html code displaying input
CVE-2015-1282,chromium pdf handled open sourced library called pdfium pdfium developed along chromium however library remained closed source VERVER vulnerability discovered VERVER adobe creators pdf standards includes javascript api allow pdf embed execute javascript code order enhance pdf functionality ex pdf include buttons typically written javascript code vulnerability allows crafted pdf term taken chromium bug report contains specific javascript code crash browser javascript code cause delay dofielddelay functions document cpp call free twice vulnerability caused javascript causing pdfium pdf engine enter method multiple times causing document level field level javascript interact using field delay property would free previously freed pointer results denial service attack since chromium defaults crashing detects use free bug mistake design mistake coding mistake one thing developers well followed fail securely principal freeing pointer twice could cause undeterministic outcomes result best terminate error occurs however people consider vulnerability fix good coding practice also something exploited malicious purposes case scenario knowing foolproof mechanism crash browser lead malicious pdf could simply invoke failsafe writing pdf forced browser free pointer twice intentionally crashing one potential solution could considered forbid javascript pdf entirely js pdf enormous security risk debate whether benefit javascript api worth security headaches mitigation restrict js api acrobat api prevent attacks much possible difficulty approach need maintain security reducing api much longer useful users
CVE-2017-5058,heap use free print preview
CVE-2010-2108,vulnerability allows remote attackers bypass whitelist acceptable plugins whitelist part host based settings whitelist works intended navigating webpages host issue new tab first created host thus plugin whitelist applied fix vulnerability new windows inherit host based settings parent think mistakes went creation vulnerability first believe may miscommunication within team reading thread detailing vulnerability seemed disagreement whether ui decision possible vulnerability first introduced programmer considered ui design decision also lead mistake requirements possible default blocking plugins requirement also could result programmer understanding system whole programmer completely understand creation new window works vulnerability would gone unnoticed going forward vulnerabilities like avoided couple steps first teammates always need page comes requirements next something unclear requirements developers review team finally developers also make sure understand system working completely making changes
CVE-2014-1726,file drag drop feature could exploited user performing drag drop action file containing malicious code would allow attacker bypass origin policy forge local pathnames html files loaded file urls able read local files chromium would automatically grant target drop action read acess file vulnerability seems caused design mistakes incorrect uses methods addition number missing handlers fix seems address issues related matching cwe entry
CVE-2017-5116,embargoed type confusion v8
CVE-2017-5108,type confusion pdfium
CVE-2017-15413,embargoed type confusion webassembly
CVE-2011-2835,cache race condition used x507 certificate difficult problem would probably need significant changes one already existing apis use believe main mistake improper knowledge systems using raw certificate caused race conditions end easily mitigated use os specific wrappers around certificates obvious solution elegant one
CVE-2017-5126,embargoed use free pdfium
CVE-2016-5139,heap buffer overflow vulnerability present jpeg2000 vulnerability memory dynamically allocated used passed bounds simple mistake buffer sizes calculated correctly pdfium
CVE-2014-1732,original design speech recognition bubble view google chrome fault slower computer could delete view web page critical items could deleted first causing denial service occur coding mistake design mistake speech file could attempted played yet caused denial service right conditions legacy issue specifically slow older window xp showed mistake design error ensuring order closing tasks took priority fix looks proper implements correct design pattern job however since unit tests push limits code physical test could created see issue resolved specific situation opposed trying solve future issues hand
CVE-2017-5125,embargoed heap overflow skia
CVE-2017-5070,type confusion VERVER problem related crankshaft jit
CVE-2015-1277,remote attackers cause denial service data checked validity attacker user open specially crafted page memory resources user computer could exhausted data tree gets serialized nodes checked validity serialized code developed way tree nodes could point freed memory
CVE-2017-15417,embargoed cross origin information disclosure skia
CVE-2016-1673,navigating new document empty document using google blink engine engine loaded request without checking whether navigation allowed due possible execute xss attack via request bypassing browser protections vulnerability introduced method containing anything would allow code adhere origin policy area took time parts system adhere policy would surprised related uxss cves surrounding code area especially second navigate method ultimately appears vulnerability persisted due series oversights developers vcc understand risk validating request loading subsequent developer made error making second navigate method right first vulnerability passed twice code reviews first unrelated code review accidentally reverted code second code review merely sought restore reverted code adding additional parameters method user gesture support vulnerability remained untouched successive failures recognize vulnerability allowed critical universal cross site scripting vulnerability continue exist almost VERVER years surprises commit making changes adhere origin policy second navigate method overlooked occurrence four lines perhaps lasted long developers laser focused tasks set accomplish would credit task related tunnel vision maintenance vulnerability time
CVE-2017-15404,symlink traversal crash reporter crash handler non chrome processes copies files tmp crash reporter crashed pid root
CVE-2017-15392,embargoed incorrect registry key handling platformintegration
CVE-2017-5099,bounds write ppapi sandbox process fails verify authenticity message fake data inserted resulting elevation privilege
CVE-2016-1679,tov8value function unneccessary calls setter functions may crash google chrome web browser due lack necessary restrictions getter setter functions tov8value function tov8value never call setter functions behavior unneccessary execute intended purpose flaw manipulated trigger use free crash google chrome denial service design coding mistake made section code setter introduced area need reason which lead denial service crashing site
CVE-2011-3083,vulnerability allowed remote attackers intentionally cause application crash means specialized web page attacker placed ftp url src attribute html video tag browser crash would inevitably result user visited web page loaded video caused failure properly create ftptransaction objects media delivered ftp ftptransaction object handles ftp transactions web page client majority non media content delivered ftp used ftptransactionfactory object create transactions media content like videos delivered ftp use ftptransactionfactory which resulted null pointer dereference subsequent application crash used original reporter noticed issue ftp url within video tag application would similarly crashed user placed ftp url ending media file format avi mp3 etc chrome address bar hit enter also case malformed ftp urls file extension simple coding mistake seems cause vulnerability throughout file many lines code which main media context variables modified together one example function set http transaction factory called main media context variables however seems developer writing code call function set ftp transaction factory accidentally forgot media context variable set ftp transaction factory main context variable led ftptransaction objects created media ftp might prevented developer careful creating file practiced pair programming code undergone thorough code review released
CVE-2017-15409,embargoed bounds write skia
CVE-2017-5064,use free blink certain conditions setting z index animated node animation webkit animation removing node dom end animation cause crash
CVE-2015-1285,brute forcing xss injections secret values contained scripts site guessed xss filter trigger value guessed correctly site must provide x xss protection mode block header attacker knows blocked rudimentary understanding seems notification something triggers xss filter additionally developers allowed issue sit around years without really addressing source problem long run probably cost time resources addressing core issue xss filter
CVE-2010-4494,double free vulnerability libxml2 VERVER version used gogole chrome VERVER vulnerability allows one pop xpath object stack since object null popped double free vulnerability common memory corruption error developers free memory location twice calling free allocated memory vulnerability may allows remote attackers cause denial service possibly unspecified impact relate xpath case double free vulnerability common memory corruption error developers write proper check case free memory case seems like developer simply forgot aware also hard catch chromium code base incredibly large easily combed believe vulnerability fixed correctly understood complete problem fixed properly
CVE-2016-1710,architectural problem existed way chromium deferred loading pages problem involved pages created frames pages deferred also deferred made possible attacker craft transfer frame across deferral boundary different pages essentially allowing inject malicious code across origins sources data violates origin policy design mistake simply oversight developers consider attacker could take advantage way deferred page loads consider consequences someone potentially bypassing page deferral code kind mistake really takes high level thinking outside norms catch however prudent validating origins data loaded pages could mitigated vulnerability without knowing even present begin
CVE-2013-6636,versions google chrome VERVER made incorrect check empty document presentation modal dialog which allows remote attackers spoof address bar via vectors involving document write method vectors involved calling document write window opened window open chrome correctly setting url omnibox navigation search bar error malicious websites could create windows spoofed urls omnibox leading users believe information given trusted destination even securely transmitted mistakes made coding mistakes author think every situation code could exploited specficly realize effects unnecessary environment checks bugfix specfic issue involved removing single line limited functionality notifyifinitialdocumentaccessed operate statemachine isdisplayinginitialemptydocument returned truthy value allowed vulnerability url omnibox properly updated document write function used hence allowing users spoof address omnibox perfect setup phishing schemes
CVE-2017-15429,embargoed uxss v8
CVE-2017-15427,embargoed insufficient blocking javascript omnibox
CVE-2011-0470,issue reported oct VERVER VERVER chromium user eroman fixed user johnnyg dec VERVER VERVER chromium notifications subsystem google chrome properly handle extensions notifications thus allowing remote attackers cause application crash denial service use unspecified vectors vulnerability result chrome properly handling extensions notification allowing remote attackers cause system crash root problem could found notifications subsystem generally something open code finish using important properly collect close anything left issue occured notification balloons properly collected attempting close led race condition happened shut browser would stop rendering force windows close code notifications subsystem would detect renderer shut well attempt close window second time fix introduced properly collecting notification balloons shut closing first way nothing left try close window second time window already shuts looks like proper fix addresses issue multiple points system
CVE-2013-2861,part chromium image rendering system allows attackers cause memory reference already freed memory could cause memory corruption crashes allowing attacker make resources unavailable mistake appears coding mistake original author failed check view already freed using fix process appeared lot miscommunication regarding reproduce issue impact quite late fix still confusion vulnerability actually impacted system
CVE-2017-5029,integer overflow libxslt xslt file which generates big text nodes possible trigger integer overflow xsltaddtextstring transform c libxslt library function handles memory management new data added text node vulnerability exists check overflow calculating new size buffer hold data text node issue exploited trigger bounds write
CVE-2017-5055,use free printing cross process navigation occurs onunload event iframe calls print printpreviewhandler handlegetpreview called manipulates freed memory printpreviewdone got called multiple times failed internal state dcheck mistakes found team created unit tests fix
CVE-2017-5052,bad cast blink
CVE-2010-1502,attackers able traverse local google files using vectors related developer tools chromium browser major coding mistake two years chromium sanitize url input allowing attackers access local files vulnerability introduced initial commit unnoticed developers eventually exploited two google employees asked review code security vulnerabilities came across ran problems fixing since function could changed without updating system resulting messy solution unit tests check vulnerability prior fix prompting developers add future updates security issues
CVE-2014-7926,regular expressions package issue handling empty responses zero length quantifiers allowing remote attackers cause denial service memory corruption well possible unforseen impacts coding mistake identified tracking process especially various operations happening case check put place ensure variables correct state prior operation caused information lost peculiar things started happen
CVE-2017-5131,embargoed bounds write skia
CVE-2013-6666,pepperflashrendererhost onnavigate function verify sanitize headers which cause cross site request forgery allowing remote attackers bypass verification standards attackers get around intended cross origin resource sharing restrictions using custom unexpected header request vulnerability likely caused archetectural design mistake content within headers post request always verified well sanitized prevent mitigate csrf which seem done scenario
CVE-2016-1644,blink layouter heap memory used freed could result arbitrary code execution data corruption mistake made ended resulting misunderstanding code work particular case one point variable supposed false however code removed verified miscommunication requirements later clarified fixing vulnerability
CVE-2017-5103,uninitialized use skia uninitialized value created allocation src stack frame readbuffer function
CVE-2011-3884,timing issues dom traversal cause denial service attacks remote vector issues possible unknown issuess crafted document dom stands document object model tree like structure used represent html webpage dom traversal runs 50ms pausing allow webkkit thread run frame removed traversal resumes attempt access deleted webframe fix ensure webdocument null interesting note vulnerabilities client side phishing detection model developers consider consequences adding time appears attempting make process quicker since even reduced limit one time managing resources important part security since allways sure resource object available check edge cases attempt prevent possibility freed resources accessed
CVE-2017-5117,embargoed use uninitialized value skia
CVE-2015-1243,google first wrote dom implementation use free vulnerability intoduced iterated copy structure observer class never checked conditions original attempting use based copy caused tab used crash could allow denial service attack unspecified impact remote attacker trigger trying force freeing non registered observer also becomes data integrity issue memory freed may allocated somewhere else causing corruption data coding mistake made code first created code modifed bug found time bug found cause bug possible fix short less day simple mistake coders assumed object made copy changed would remain identical copy mistake mostly coding mistake coders made assumption state object assumption ended incorrect which resulted vulnerability reviewers likely looked code thought along lines code author unit tests check part code behavior added defensive check put place one anticipated would issue
CVE-2017-5086,address spoofing omnibox
CVE-2016-5134,proxy auto config pac feature google chrome ensure url information restricted schema host port allows remote attackers discover credentials operating server pac script major mistake which lead vulnerability requirements result imporper understanding pac script resulting vulnerability overlooked could also result good enough programming indicated issue browsers well
CVE-2016-1686,specific function pdf renderer which properly handle failure initialization causes denial service bounds read via crafted pdf document contained malformed jpg image attacker knows exploit could potentiallycause function halt crash meaning browser utilizing function may issues resulting problem opinion mistakes mostly coding mistakes ways avoiding issues already known coding world however developer originally wrote functions put use simply adding wrappers distrusting input fixed issue overall interesting vulnerability which might obvious engineers tasked think goes show scope vulnerabilities always larger initially expect
CVE-2010-4205,vulnerability google chrome check data type event object returned page click implementation which done c properly check event object got back mouse event executing could result crash unexpected events way could exploited would attacker found vulnerability used purposely crash site could prevent people accessing site also known denial service vulnerability simple oversight programmer expected always get mouse event object put conditional make sure one even though reasonable expect always get mouse event mouse click always good distrust input checking input provides defense depth attacker purposely injects different type object function fix simply adding conditional looks proper specific vulnerability developers keep mind always check returned value type cases also writing tests different types objects inputs could help prevent future similar vulnerabilities future
CVE-2010-3111,workaround created windows kernel bug triggered hinting malformed fonts hinting process rasterizing vector fonts bitmaps specific display resolutions applicable compact font format cff since raster information stored ttf format
CVE-2014-3155,implementation network transfer protocol queue write function check entrancy called interrupted shrinking queue happens results bounds read which remote attackers could use cause denial service seems like basic coding mistake developer consider iterating mutable data requires careful thought environment prone change
CVE-2017-5076,address spoofing omnibox canadian syllabics unicode breaks urls
CVE-2017-5061,url spoofing omnibox
CVE-2017-5128,embargoed heap overflow webgl
CVE-2017-5122,embargoed bounds access v8
CVE-2017-5111,embargoed use free pdfium
CVE-2017-5083,ui spoofing blink
CVE-2017-5094,embargoed type confusion extensions
CVE-2015-1251,use free vulnerability speech subsystem allows remote attackers execute arbitrary code via crafted document use free vulnerability occurs pointer freed accessed thereby allowing arbitrary code execution one able craft exploit vulnerability error replicated initializing speech recognition object closing window window close calling speech recognition object causing browser access freed memory main issue caused system removed managed pointer method automatic garbage collection failed set pointer null freed major mistake made removing pointer management system replacing appropriate solution problem document longer existed cases speechrecognition object used document freed solution seems check document still context recommended solution cwe says set document nil freed would make check needed important lesson consider pointers owned parent element removing parent
CVE-2015-1302,vulnerability existed google chrome web page could read pdf content web page xss vulnerability mistake lead vulnerability likely design mistake team either consider external pdf files could loaded consider problem fix looks proper fix external pdf files outside origin longer loaded executed
CVE-2017-15390,embargoed url spoofing omnibox
CVE-2010-4482,vulnerability chrome able open webpage pop which abused malicious users generate unwanted pages bypassing pop blocker using cross site scripting extension cross origin scripting chrome check whether input generated actual user basically example improper input validation mistake concerned design issues processing input design failed account input checking whether user actually initiated input inserted script fix appropriate developers whitelisted input
CVE-2015-6769,code triggers unloading window allows remote attackers bypass origin policy aka sop using delay window proxy clearing coding mistake extra line code ran script gave attacker time execute attack
CVE-2015-8479,vulnerability exists handling audio output device device ability communicate processes supposed disabled device unauthorized however communication never actually closed unauthorized device remains registered means attacker cause denial service corrupting memory outside bounds execution bug description describes heap use free researching vulnerability appears case someone going back fixing mistake code ipc stream closed audio output device unauthorized fix one line seems like could called coding mistake programmer simply forgot write line deleted accident however could also considered design mistake programmer plan include safety precaution first place noticed potential security risk later stream properly closed would possible attacker corrupt heap memory causing potential denial service attack however closing stream audio output device longer authorized fixes issue
CVE-2017-5096,user information leak via android intents url used navigate http file e googlechrome navigate url file sdcard download html
CVE-2013-0910,google chrome previously properly manage browser interactions browsers renderers issue occurs plug ins loaded validated authorized attackers use bypass access restrictions blocked plug ins due exposed rendering process renderer loads plug ins browser exposed enough theoretically compromised renderer compromised longer restricitions type plug ins loaded attacker could use load nefarious plug vulnerability found bug security oversight someone discovered potential vulnerability could corrected ever issue practice think many mistakes made avoidable someone experience java plug ins noticed section code could improved google responded accordingly mistakes made would design phase also might able considered maintainability issue technologies evolved stay upgrade feature accordingly far mitigations go one mentioned cwe page use authentication framework library however entirely relevant concerned user authentication authentication renderer unique problem one solved default library fix looks like pretty good solution problem common
CVE-2011-1122,webgl implementation google chrome VERVER allows remote attackers cause denial service bounds read via unspecified vectors believe code question handles rendering browser using opengl opengl es2 transitioning opengl es2 initialized buffer needed opengl opengl es2 specific circumstances buffer could overflow lead bounds memory access
CVE-2015-1300,bug blink chrome rendering engine allowed malicious actors read cross domain urls browser redirect iframe vulnerability actually present browsers time firefox ie chrome demo exploited website http vwzq net lab xreadurl given safe assume vulnerability result assumption browser developers made design flaw
CVE-2017-5110,ui spoofing payments dialog paymentrequestapi shows native payment ui attacker change origin payment screen basically spoof payment screen changes payment screen comes allows abuser use spoofing change paid main mistake realizing data vulnerable layer layer could removed replaced interchangeablely malicious surface possibility interchangeable parts allowed system spoofing problem however make inherent software design wrong instead means software design considered fact may need swap layer future security aspect considered architecture choosing phase
CVE-2017-5091,use free indexeddb normal scenarios cursor created passed callback function however callbacks cursor gets destructed pointer remains within system
CVE-2017-5078,possible command injection mailto handling
CVE-2017-15419,embargoed cross origin leak redirect url blink
CVE-2017-15406,embargoed stack overflow v8
CVE-2017-5101,url spoofing omnibox changing location hash calling modal dialog time user focuses omnibox possible spoof url https lock spoof user tries interact webpage url return normal circumvented putting user fullscreen first click
CVE-2017-5033,bypass content security policy blink loading new document using window open blank document write ing blank circumvent csp restrictions put document js code running reach sites
CVE-2009-1412,error related handling urls containg chromehtml protocol could allow attacker run malicious scripts search files local disk visiting attacker controlled web page internet explorer could launch google chrome open multiple tabs load scripts run navigating url attacker choice argument injection vulnerabilty allows universal cross site scripting vulnerability seemed stem result another vulnerabilty handled properly chromehtml feature seemed giving team problems months ultimately completely removed end would easily categorized maintainabilty mistake chromehtml feature maintainable
CVE-2014-3172,debugger extension api validate tab url allowing attacker get root access bypass chrome security appears vulnerability case accessing tab permissions may overlooked although particular steps invovled reproducing vulnerability exploit would huge disaster attacker would able wiretap user microphone disable touchpad dos steal private keys etc although steps reproduce exploit requires expert knowledge exploit would caused distrust chrome
CVE-2017-5056,embargoed use free blink
CVE-2016-5136,referencing memory freed lead variety behaviors including crashing corrupting data specific cve extension loaded unloaded application content scripts unregistered happens middle injection freed addresses unregistered scripts accessed causing use free vulnerability causing crash spending time reading discussions held bug well looking plethora commits feel like roughly design mistake led vulnerability code really deleted another variable added file along lines deal said variable terms handling script also feel lot use free vulnerabilities caused combination coding mistakes design mistakes specifically design code functions account easy code way leaves room vulnerability happen
CVE-2017-5105,url spoofing omnibox spoofing occurs inserting u 0650 url
CVE-2016-1628,vulnerability existed handling jpeg2000 images properly crafted jpeg2000 image could embedded inside pdf force chrome read memory past end allocated object would allow attacker execute arbitrary code jpeg2000 image format improves compression performance image quality lack jpeg format widely used contributed implementation vulnernability definitely coding mistake allowed execution arbitrary code run intended see oliver chang mentions code review agree png gt function overflow might able happen let slide used based comment leads believe fix properly implemented pdfium side function gets used without proper checks could lead overflow errors maintainability also problem became apparent build fail commits
CVE-2017-15401,embargoed bounds memory access v8
CVE-2017-15396,embargoed stack overflow v8
CVE-2017-5088,bounds read v8 v8 wasm module decoder discloses sensitive information heap
CVE-2017-5062,embargoed use free chrome apps
CVE-2015-1276,use free vulnerability indexeddb implementation google chrome allowed remote attackers cause denial service possibly unspecified impact leveraging abort action certain write operation
CVE-2011-1812,chrome VERVER allows remote attackers bypass intended access restictions certain extensions tabs permissions defined manifest file chrome extensions could bypassed webpage spoofed think vulnerability introduced edge cases thought conversation developers discussing vuln shows scenario specific issue exists within permissions extentions
CVE-2011-1108,function meant handle javascript dialog cleanup properly implemented would lead site crash meant attacker means invoke site crash denial service attack vulnerability also left application open arbitrary code execution though instances reported vulnerability caused bad code implementation also lack testing unit tests put place would clear function working designed since tests put place function stayed even multiple different patches cwe chosen cwe 710 developers followed better coding standards implemented testing catch logic functionality errors
CVE-2016-1635,chrome extensions vulnerability discovered project committer vulnerability allowed malcious extensions use memory previously freed closing writing page uing function referenced previous pointer flaw normally created architechture implementation phases developer fails consider paths associated pointer reviewer discovered bug also provided patch fix creation vulnerability appears due oversight initial developer failure caught course code review
CVE-2017-15424,embargoed url spoof omnibox
CVE-2017-15415,embargoed pointer information disclosure ipc call
CVE-2017-5112,embargoed heap buffer overflow webgl
CVE-2017-5031,use free angle
CVE-2010-3112,versions chrome prior VERVER properly implement file dialogs allowing attackers cause denial service attacks
CVE-2017-5130,embargoed heap overflow libxml2
CVE-2010-2299,certain objects read dispatchobject function clipboard objects one types objects could read function cbf smbitmap exact contains information points shared memory object someone normally access shared memory object obtains access could potentially modify object which may affect processes using dangerous process normally okay since methods make secure however particular instance said methods used resulting unsecure use cbf smbitmap object seems main cause issue small oversight developers developers could run possible clipboard objects run dispatchobject function done would realized one objects leads vulnerability likewise due fact likely minor oversight developers vulnerability also something able caught looking code review bit closely
CVE-2017-15402,embargoed privilege escalation pagestate
CVE-2011-1198,vulnerability present google chrome video feature could cause denial service attack allowed remote attackers execute arbitrary code causing bounds error crashing system due code miscounts thread numbers unaccounting threads addition bound errors depending thread count additionally high security bug required team fix early rather waiting another release
CVE-2017-5035,incorrect security ui omnibox
CVE-2009-3263,cross site scripting xss vulnerability google chrome 2 x 3 x VERVER allows remote attackers inject arbitrary web script html via 1 rss 2 atom feed related rendering application rss xml content type xml active content
CVE-2017-5087,sandbox escape indexeddb indexeddb transaction created indexed db connection cc stores map transaction id unique ptr containing indexeddbtransaction schedules actions raw pointer compromised renderer create new transaction id leading uaf one raw pointers accessed
CVE-2017-5036,embargoed use free pdfium
CVE-2017-15416,embargoed bounds read blink
CVE-2011-1439,vulnerability related incomplete sandboxing around chrome renderer process chrome extensions tracing process ids messages would possible attacker spoof parts chrome execute arbitrary code vulnerability effect windows linux possible attackers escape sandbox install extensions remotely linux specific linux possible sandboxed processes interfere due requirements chrome crash reporting system breakpad unclear chrome bug reporting whether vector attack directly breakpad interprocess communication breakpad allows improper information disclosure process ids exposes system spoofing vulnerability seems issue design mistakes maintainability appears design renderer breakpad functionality properly account sandboxing supposed happen processes intention make processes secure clearly follow lacking maintainability aspect mistake comes large part vulnerability interaction external libraries dependencies like breakpad linux kernal signals dependencies evolved code upkept bug reports team mentions lack signal verifiability stems directly failure amend code new features added vulnerability falls squarely cwe 265 category privelege sandbox issues vulnerability closely aligns cwe 250 execution unnecessary priveleges vulnerability caused unnessary exposure process ids which led conditions sandboxed process could unsafely execute code break sandbox another cwe which relates VERVER privelege defined unsafe actions vulnerability code used privleges improperly unsafely exposed process ids mitigation mentioned VERVER explicitly manage trust zones software which appears route google took
CVE-2016-5137,webkit schemematches function content security policy apply http port VERVER policies https port VERVER urls apply websocket ws port VERVER policies websocketsecure wss port VERVER urls content security policy security measure added site restrict resources loaded browser schemematches function treat image resources identically protocol attacker set content security policy restricts images http ws protocols attacker monitor response time resources determine user visited image domain previously response time quick image cached sniffing browser history coding mistake chromium developers defined proper requirements design which apparent mitigation efforts missed specific cases dealing explicitly defined port numbers
CVE-2016-1697,attackers able create javascript code would escape html specific html element known iframe allowing access different page untrusted origin execute javascript code target page vulnerability primarily result oversight product design nobody considered frame navigations could used exploit weakess product top since frame navigations necessary function point execution good design choice would disabled default suggested mitigation type cross site scripting minimize attack surface disabling frame navigatons detatching frame completely cuts portion attack surface exploited vulnerability fix completely mitigates exploit since frame navigations exploited entirely disabled change however applied one part code may worthwhile review similar areas attack surface determine whether security default applied areas code prevent similar exploits happening future
CVE-2016-5156,c event binder would fail add event matcher list filtered events failing events would still processed missing event would never run missing event followed another event required memory freed previous event next event sequence would never run event waiting memory freed would cause denial service sitting waiting indefinitely coding mistake made assumed events would always matched properly due event matchers occasionally linking properly events unexpected unhandled edge case stopped system kind check linking begin code would failed securely vulnerability would happened
CVE-2017-5119,embargoed use uninitialized value skia
CVE-2015-1245,use free vulnerability openpdfinreaderview update function browser ui views location bar open pdf reader view cc google chrome VERVER might allow user assisted remote attackers cause denial service heap memory corruption possibly unspecified impact triggering interaction pdfium open pdf reader button invalid tab association allow malicious web site cause user redirected different page opening link original page open pdf reader button cause user information stolen
CVE-2017-15398,embargoed stack buffer overflow quic
CVE-2011-2851,video conversion transformations properly handled which could allow remote attackers cause denial service vulnerability result accessing array x 1 x VERVER coding mistake made overlooking possible bad inputs main functions file added author failed recognize certain inputs could break code fix implemmented single line which terminated function problem inputs entered
CVE-2017-5074,embargoed use free apps bluetooth
CVE-2010-2652,vulnerability pertains availability browser exploited chromium web browser would crash websites create allow user view javascript dialogs dialogs queued another may pop one closes crash would occur dialog queue closes order multiple tabs must opened browser pages open dialog simultaniously would trigger vulnerability design mistake initial implementation lacked checking validate modals expected orginal author likely aware modal queues working functionality cwe doesnt mention obvious ways mitigate issue situation author done research functionality dialogs
CVE-2017-5077,heap buffer overflow skia
CVE-2017-5068,race condition webrtc new iframe inserted order frames page becomes ambiguous
CVE-2017-5104,ui spoofing browser secure secure label next url could spoofed mac os
CVE-2017-15388,embargoed bounds read skia
CVE-2013-6656,vulnerability webkit xss auditor which built function designed mitigate xss attacks identifies query parameters contain malicious javascript block response believes payloads injected response xss auditor processing post request chain page redirects single final destination page initializes url destination page body initial request page means body request page still accessible thru xss auditor brute forcing character character post body initial request however occur original request url script tag make xss auditor suspicious initialize pairing exploit login form attacker get body form user inputs values gain access passwords sensitive information honestly think vulnerability came typo solution one liner worth 500 changed formdata httpbody documentloader originalrequest httpbody formdata httpbody documentloader request httpbody notice difference which request function used gives xss auditor access certain http bodies form fill login attempt request http body contain user input original request body vulnerability went long undiscovered mostly security obscurity due specificity prerequesites inputs since vulnerability introduced entirely new code along larger featueset think original developer mistyped chose wrong request function thinking consequences choosing one syntactically similar
CVE-2017-15423,embargoed issue spake implementation boringssl
CVE-2015-1271,pdfium memory conditions properly handled allows remote attackers cause denial service potential attacks heap based buffer overflow results heap buffer overflow large memory allocation crafted pdf document main factors lead vulnerability miscommunication coding mistakes think clear looking comments clear task force solving error many notes inserted progress clear mutliple comments back forth issue trying solve bug multiple months issue discovered solution solved people agreed orginal idea first comment would work devloper commented fix causing bug open months also exceeded 60 day deadline fixing high severity security vulnerability google developers follow chromium also coding mistake checking alloc first
CVE-2017-5054,heap buffer overflow v8
CVE-2015-6785,hostnames formatted x accepted valid x pattern enabling users bypass access restrictions faulty code test cases resulted vulnerability test cases expected opposite behavior occured allowed vulnerability exist VERVER years found fix code well unit tests appears sufficient correct
CVE-2017-15394,embargoed url spoofing extensions ui
CVE-2017-5066,incorrect signature handing networking certificate declared signature algorithm identifier e g sha1withrsaencryption different actually used signature algorightm identifier e g sha256withrsaencryption certificate rejected however chrome accepts certificate without warning
CVE-2017-5089,domain spoofing omnibox character u 0f8c used domain name chrome looks like space abused spoof legitimate domain followed chain character mac os specific vulnerability
CVE-2016-5147,cve 2016 5147 known blink attack uses deferred page loadings inject web scripts malicious html
CVE-2017-5098,use free v8
CVE-2015-1240,vulnerability which allowed remote attackers cause denial service bounds read via crafted webgl program triggers state inconsistency words attacker writing webgl program aware bug may force integer bounds read which may halt break webgl operation largest mistakes led vulnerability problems validating parameters executing functions webgl programs case improper restriction operations within bounds memory buffer overall simply oversight developer consider first issue left unknown hacker discovered issue end put validation measures order avoid bounds errors case considered solved believe solution held time issue since
CVE-2016-1624,heap based buffer overflow discovered brotli open source compression library although vulnerability categorized heap based buffer overflow caused integer overflow within function brotli library allowing remote attackers cause denial service google chrome uses compression library buffer overwritten allocated memory use malloc vulnerability caused third party library therefore google responsible even though review third party software used internally potential mitigation bound checking performed buffers apply defense depth prevention
CVE-2017-15425,embargoed url spoof omnibox
CVE-2016-5151,certain early builds software pdfium chrome mishandles timers allowing remote attackers cause denial service trying reference memory already freed system unspecified issue use created pdf document
CVE-2015-6762,vulnerability example circumvention origin implementation google chrome vulnerability occurred manner google chrome handled cascading style sheets css specifically occurred code fetched fonts resource web page omission use cross origin resource sharing cors algorithm allows attacker bypass single origin policy javascript requests font redirect google chrome panel believe vulnerability bypassed anything drm defect caused vulnerability primarily coding mistake according bug reports commit messages evident cors handling remote fonts requirement additionally fix require significant rework code therefore significant oversight system architecture original author misunderstanding effectively implement cors
CVE-2011-1120,webgl implementation google chrome allowed remote attackers cause denial service bounds read via unspecified vectors means application verifying inputs system properly attacker could utilized vulnerability crash application perform advanced exploits vulnerability presented ran specific command line flag handling webgl versions system certain checks performed flag set inconsistencies implementation webgl led cause vulnerability discovered edge cases tested vulnerability essentially buffer overflow allowed lack verification inputs methods utilize webgl fix sufficient dealing problem
CVE-2017-5120,embargoed potential https downgrade redirect navigation
CVE-2015-1241,mobile click events able fire outside scope created exploited use tapjacking tapjacking concept attacker listen taps screen overlay sniff data passed underlying application even include credit card data passwords case specific vulnerability trigger page redirect victim page ideal circumstances events fired across domain boundaries would give attackers access input single clicks perform simple tasks like buying something posting something anythig single button seems like requirements mistake commit introduced vulnerability seemed introduced carelessly without knowing consequences changed proper requirements could cleared misunderstanding could miscommunication puzzling introduced seems like changed seemingly reason changed back caused issue interesting know going original developers heads maybe something story requirements could added prevent could something verbose taps must execute belong must go outside scope could helped eliminate issue make sense taps travel subsystems separate web pages
CVE-2011-1811,large number forms webpage would cause browser crash original programmers think extreme cases code put obvious limit chrome form autofills fix around VERVER fix common sense code originally making fix pretty trivial obvious
CVE-2002-1156,remote attackers potentially view apache source code one cgi scripts directing post request directory webdav cgi enabled easy vulnerability exploit considerable impact confidentiality vulnerability due fundamental flaw design cgi generation system fortunately bug addressed quickly however would taken much technical knowledge take advantage vulnerability major breach confidentiality could prevented proper code reviews new systems forcing teams spend time architecture design
CVE-2004-0751,vulnerability occurs char buffer read function mod ssl module allows segmentation fault char buffer read function reverse proxying ssl server malicious ssl server force httpd child process crash sending specially crafted response header result remote attacker cause denial service attack vulnerability classified low impact since allow execution arbitrary code represent significant denial service attack requests handled apache child processes one crash vulnerability result coding mistake which check memory consumption running speculative mode possible mitigation check make sure buffer large enough read data
CVE-2009-1191,http requests containing non zero content length header value containing body cause apache serve content intended another user use second malformed http request vulnerability caused coding mistake incomplete request received which contained non zero content length header field connection kept alive reused instead closed
CVE-2002-1593,module handles remote web content authoring operations module looking versioning hooks which versions content using pointer pointer checked existence therefore null pointer could attempted used would cause system crash crash system would cause denial service issue coding mistake made caused vulnerability seemed simple missed check null pointer general error check getting value pointer held checked pointer existed first place assumed pointer existed maintainability wise code fixed non backwards compatabile apache release never work around bug longer needs specifically worried unless something using apache 2 0 42
CVE-2013-2249,mod session dbd session fixation flaw vulnerability caused incorrectly handling user sessions web application user session usually tracked cookie which assigned user visits page web application first time flaw mod session dbd caused proceed save operations session without considering dirty flag requirement new session id major mistake led vulnerability design error executed save operations session without considered dirty flag invalidated exsit session identifier would gave attacker opportunity steal authenticated sessions
CVE-2007-6388,server status page enabled cross site scripting vulnerability possible numbers viable input code could injected implementation mistake case added input verify input expected value fix looks proper seems like obvious thing look test hopefully whole system scrutiny imagine since fixing commit created VERVER years ago
CVE-2013-1896,http protocol grown years gained multiple extentions serve different purposes one extention webdav web distributed authoring versioning which extends http protocol add request methdos copy move etc allow remotely interacting servers resources documents one place webdav used version control http opposed ssh appache httpd one web servers native support webdav one thing must ensured implementing webdav uris modified context webdav must server implements webdav depending implementation forgetting check webdav uri trying access cause issues could used attacker specifically try make request involving uri webdav crash server although core patch originally coding mistake placed wrong function overall architectural design mistake patch simply adding single statement check specific case real possibility places include uris could added future means uris used make webdav requests checked one much stronger architecture would one subsystem dedicated making webdav requests trust input subsystem handles webdav requests
CVE-2004-0811,cve involves internal structure apache httpd software controls authentication directives used password protection access directives interact particular case internal structure broken request could result access granted despite configured authentication user discovered found requests ordered certain way vulnerability could happen seems somewhat simple coding mistake way satisfy directives aggregated memory htaccess file vulnerability never actually public since specific revision never publicly released
CVE-2006-5752,module apache activated public page shows diagnostic data server number requests cpu usage attack would able inject malicious html code due browser detecting charset instead specifying one mistake team give existing functionality passover new technologies implemented case charset detection lessons could learn emerging technology expose vulnerabilities existing code notes looking previous iterations code specifying charset seemed teams minds originally believe oversight team
CVE-2009-3095,vulnerability allowed authorized attacks send commands ftp server due inadequate input validation attack involved sending special characters server would cause unintended behavior parsed allowed attacks bypass access restrictions target ftp servers capable executing arbitrary commands mistake lead vulnerability simple coding mistake specifically lapse requirements input validation
CVE-2014-3583,apache description bounds memory read found mod proxy fcgi malicious fastcgi server could send carefully crafted response which could lead crash reading past end heap memory stack buffer issue affects version VERVER apache httpd server sent long http header fastcgi server potential buffer overflow error apache httpd read long headers end reading memory past end header sent caused denial service issues due potential segmentation faults buffer overflow fastcgi protocol similar http protocol allows servers execute cgi common gateway interface scripts web server cgi used middleware allow servers pass data application web server example cgi could used send data database web server coding mistake extent design mistake apache initially writing function assumed header coming another server would include buffer end character 0 null character mechanism stops c reading memory past end string c every string allocated includes null character end however vulnerability specifically relates large headers coming specficially remote fastcgi server one good principal secure coding trust input validity coming outside trust boundary case apache developers placed much trust assumption header would include null character lead writing code relied solely existence end character input prevent overflow errors developers trusted validity outside input placed checks prevent memory read fix extremely simple check length incoming string read length string good fix since reliance outside input headers checked received another potential fix apache could consider implementing simply limit length headers since vulnerability specifically appears headers certain length drawback approach may temporary http standards always changing longer headers may norm future fix eventually fixed properly future mistake also considered design mistake interesting see vulnerability affected module specifically http headers unique fastcgi come everywhere question becomes many modules http header parsing would module specifically affected may prudent apache consider single http header parser entire code base reference one uniform parser
CVE-2010-2068,vulnerability information disclosure unintended recipients timeout detection flaw allow response sent request belonging different user timeout flaw apache connected tomcat server apache configured timeout tomcat putting connection pool mistakenly given another user information disclosure vulnerability vcc code low level protection returning response incorrect user lack testing also mistake vulnerability code tests except proxy subsystem lot changes made fix vcc without testing which likely reason vulnerability get caught sooner
CVE-2016-2161,remote attacker could write malicious input data stream would cause server crash server crashed subsequently valid requests continue crash server vulnerability result coding mistake specifically missed edge case used maliciously dos attack vulnerability created single commit allocation functions rewritten times previously appear prior functions covered edge case either vulnerability falls availability category cia model classified high threat due ability bring system fix appeals input validation strategy distrusts memory allocation another function stepping memory ensure adequate space exists shared memory
CVE-2002-0392,vulnerability caused lack error checking which could allow httpd use invalid size memory allocation potentially causing denial service availability failure using available memory apache daemon 64 bit systems elevation privilege attack allowing attackers execute arbitrary code altering return addresses system stack issue may mitigated system included additional unit test cases test suite failed include case which evaluated particular type invalid input brought vulnerability issue particular avenue attack never brought mind vulnerability passed unnoticed
CVE-2009-1195,options includesnoexec configuration apache http server handled properly allowoverride directive default code allowed local user execute code language used naming option counter intuitive vulnerability led local user able execute code could escalate privileges help attack system design mistake since system defaulting secure options rather configuration option keep local users executing file inputs solution opted add code allowoverride permit includes exec enabled configured c file user input code execute files also made semantic changes opt includes default exec using instead without makes clear think important thing semantic change honors security default helps avoid user error
CVE-2005-3357,component httpd user specific type secure socket layer ssl created custom error page could cause denial serivce making application crash done submitting unsupported request certain type port which would cause null pointer expection main mistake vulnerability lack handling ssl null team never accounted non ssl request made ssl port ssl currently use seem written requests came ssl port would go ssl control check regardless state ssl fix implemented seems effectively eliminate problem immediately stops problem arising chance raise npe changed checking ssl protocol verifying ssl acutally use null otherwise would stop longer relevant
CVE-2010-0425,apache mod isapi module implements internet server extension api allows internet server extensions module forced unload specific library processing request complete resulting memory corruption vulnerability may allow remote attacker execute arbitrary code vulnerability due developers overlooking quite understanding happening piece code fix vulnerability simply deleting VERVER lines code which unloaded isapi dll module middle request which created oprhaned callback pointers based fix seems unloading isapi dll method call point code completely unecessary system seemed work completely fine without biggest takeaway vulnerability important add unnecessary pieces code system understand unintended consequences adding additional functionality system
CVE-2004-0942,request sent contains tons whitespace http header server consumes excessive amount cpu memory various sources disagree which maybe attempting parse unfortunately appears public discussion bug quietly fixed VERVER days report thus difficult tell led vulnerability appears simple coding mistake caught either author two code reviewers notable mistake commit 3d5263 commit fixed inital vulnerability lots whitespace however fully fix issue instead changed lots whitespace lots lines indicated aware vulnerability still consider code could exploited vulnerability could likely fixed commit june rather november author reviewers tried think like hacker try break code
CVE-2014-8109,apache http server support configuration contained lua authorization provider used twice different arguments different context would allow attackers bypass intended access restrictions specific circumstances multiple require arguments separating auth provider arguments passed issue avoided common mistake accounting specific case input data name another input causing issues acquisition vulnerabilities hopefully thought considering defensive coding practices inputs like good canidates unit cases catch potential edge cases like
CVE-2004-0488,issue cve buffer overflow apache http server VERVER using user trusted ca certificate authority remote attacker could execute arbitrary code via client certificate subject dn distinguished name which exceeds 6k length cause error likely design flaw whoever wrote code account trusted user exploit buffer overflow lack foresight led vulnerability
CVE-2006-3747,vulnerability affected people used apache httpd versions VERVER VERVER VERVER vulnerability allowed malicious users perform remote attacks cause denial service random code executions vulnerability makes use one error which data added stack overwrites extra bit situation able happen certain functions rewrite module used lightweight directory access protocol ldap urls rewrite module capable manipulating urls requests one url sent another url data overflows past intended boundaries allows next section code stack execute could even crash whole program seems like fault code fix simple change decreasing variable statement VERVER considering change simple fix editing one line code cause likely due accidently overlooking size limit code made vulnerabilities size boundaries easily overlooked which think additional boundary checking done boundary tests always check extreme cases like maximum inputs
CVE-2017-7668,parsing http request headers ap find token function apache httpd server would overrun string buffer searching specific token line searched contained nul 0 character last token string function would continue read past end string resulting buffer overrun occurs ap find token function searched beginning token nul character found function would skip past continue processing memory beyond nul character concious documented decision made check nul characters searching start token input string working c string parsing ripe target buffer overruns raised alarms normal http headers never contain nul characters one shows somewhere expected server treat malformed request stop attempting process normally workarounds implemented case nul character encountered middle string something happening first place additionally software widespread apache httpd implementing non standard behavior encourages nonconformity established standards
CVE-2017-7659,httpd open source web server unix like systems http 2 requests could crafted way could cause mod http2 module dereference null pointer crash server process code causing vulnerability attempting dereference pointer checking ensuring null request null pointer crashed process http 2 requests refer http 2 0 which revision http network protocol sure simple seems think replacing module reused could mistake sure development team valid reasons time cant help wonder felt need replaced module seem belong third party which meant control future avoid kind vulnerability outside input must always validated inner components put use
CVE-2004-0174,apache http servers VERVER contain race condition handling short lived connections connection rarely used socket cause new connections blocked leaving dead code long without sort testing socket causing issue rarely used barely touched since initial implementation maintenance testing done issue may never occured
CVE-2004-0493,component involved parsing http headers used remote denial service attack triggering memory leak using long header lines large amount space tab characters design mistake developer factor need http header certain syntax
CVE-2005-1268,vulnerability http processing certificate revocation lists debugging mode ssl module mod ssl problem mod ssl allocates buffer n bytes tells bio read read n bytes text buffer bio read returns count many bytes read function uses count append null character end text however returned value n which used index n 1th index buffer hold could lead memory corruption even segmentation fault would bring httpd vulnerability contributing commit vcc buffer allocated reading size n 1 bio read told could read n bytes thus always space null terminator background certificate revocation lists used revoke certificate case private key compromised keys used sign mistake simple coding mistake made cleanup entire portion ssl callback sslverify crl performs debug printing rewritten developer forgot account null terminator allocating size buffer copied data cwe entry gives one mitigation use correct size copying data which fix
CVE-2007-1862,using http communication headers included contain information data sent due changes memory allocation apache would copy header data response header sometimes tried copy location memory already cleared new data could put old location data could sensitive would result data user entering viewing potentially getting leaked header which would necessarily secure seems began using apr memory pool made incorrect assumption long data would remain table automated testing may eventually caught understandable manual tests might missed nothing appears wrong get lucky nothing else takes freed location memory better understanding tools using automated tests could helped catch prevent cwe 825 lists mitigations useful situation use language manages memory automatically set pointers null freeing position stop using c code cwe site points complex data structures like new apr memory pool reduces effectiveness setting pointers null
CVE-2014-3581,flaw module handled content type headers service would crash lead denial service attack attackers supplied empty content type header since would null pointer dereference lead application crash mistake lead vulnerability likely improper testing lack maintainability since start project code involved vulnerability present caught around VERVER years content type headers assumed contain something deferenced code certain point lead vulnerability
CVE-2014-3523,flaw found winwt mpm httpd VERVER VERVER using default acceptfilter platform buffer cleared potentially filled attacker may send requests leak memory cause denial service mistake made vulnerability coding mistake developers remember free buffer full particular area code which led memory leaks denial service vulnerability fixed simple statement entered freed buffer followed mitigation ensuring protocols specific limits scale placed
CVE-2004-0747,application fails validate length user inputed strings form httaccess httpd conf config files which malicious cause buffer overflow string parsed expanded copied finite buffer affect environment variable gives user elevated privledges locally mistakes made primarily coding mistakes code written worked intended failed check boundary cases which overflows could occur lots changes made vcc fix even patch fix made appears lot factors considered initially lifetime vulnerability different developers keep coming back logic seems like simple miscommunication cover tracks looking solution appears opted implementation mitigation cwe 119 rewrote logic function question adding length checks casting etc check extraneous inputs avoid harmful overflows fix needed one patch handle different use case function separate issue miscommunication since function moved different file modified reasons appears solution ultimately proper
CVE-2011-3192,vulnerability involves denial service resource exhaustion leading denial service due improper handling overlapping byte ranges http requests eventual fix nearly VERVER years later involved reducing memory used requests byteranges validated ensure reasonable context request main mistake seems result coding errors design problems ability specify overlapping byteranges header allows countless exhaustion issues lacking proper validation restriction inputs opens door major issues could impact countless sites relying httpd
CVE-2012-0031,local users cause denial service attack modifying certain field within scoreboard shared memory segment resulting invalid free call seems like coding mistake cwe entry vulnerability list mitigations
CVE-2007-3847,httpd which open source web server unix like systems remote servers cause denial service using threaded mpm sending malicious date header triggers buffer read threaded mpm refers using multi processing modules handle tasks binding network ports accepting requests triggered buffer read refers code attempts read adjacent memory beyond current buffer sensitive data could stored supposed accessed date input causing issue seems trusted without proper validation checking using mentioned earlier believe vulnerability could avoided boundary checks performed prevent vulnerabilities kind future component supposed distrust outside inputs perform necessary validations reject bad inputs
CVE-2003-0253,mpm multi processing modules which used bind network ports machine accept requests handle requests vulnerability occurs mpm binds specific uncommonly used network port c accept method accepts connection socket called would return error causing temporary denial service lot factors came allow vulnerability occur original author wasnt confident comments code would work time edge cases code properly met possible confusion requirements task wasnt descriptive enough working unit tests made ensure code worked intended mitigations fix cwe run fault injection tests tests applied fix one reason vulnerability appear
CVE-2007-5000,attacker could inject malicious html javascript code input image mapping function program order compromise integrity system vulnerability works module enabled imagemap files publicly available think coding mistake since code first written sort string escaping mitigate xss attacks even though start think mitigation looks proper since follows input validation mitigation cwe entry
CVE-2004-0809,webdav undergoes indirect lock wrong memory address accessed results segmentation fault could cause system crash fix presented make seem like coding mistake interpret typo causing wrong memory address altered looking commits realize whole way system designed lot faults definitely design flaws way locking worked
CVE-2004-1834,mod disk cache tag sets program use disk based storing cashes casheing included client headers users local hard disk users potentially access information retreiving sensitive data which includes authentication information initial developers understand either funcionality tools using cacheing full content header which caching
CVE-2014-0098,attacker would able send specific truncated cookie would cause crash would open vector denial service threaded mpm issue one cookie logging files improperly truncated cookies seems like edge case mistakes made implementing failsafe code ended fixing bug statements ensuring cookie name value matched addresses properly performed truncation way would enable denial service attack types vulnerabilities difficult spot often one specific string may break something likely would thought developer testing code
CVE-2016-1546,vulnerability effects apache http server VERVER VERVER relevant mod http2 enabled issue limits simultaneous stream workers put place meaning client craft request results high numbers stream workers cause denial service stream processing starving system resources lack testing review vulnerability introduces add feature checks put place could see make sure new features introduce new bugs
CVE-2004-0113,accessing ssl enabled server port plain http request would cause memory leak due bug mod ssl implementation vulnerability opens possibility denial service attacks sending many plain http requests vulnerability due two mistakes poor judgement call avoid reimplement fix feature longer worked assumption memory something would eventually freed sometime somewhere else instead proper place freed fix looks proper lack testing done around issue leads believe probably plenty similar identical issues present code base
CVE-2005-2088,vulnerability occured http server acting http proxy vulnerability allowed remote attackers perform attack known http request smuggling essentially attackers could send http request proxy two kinds headers transfer encoding chunked header content length header caused apache process body request way forward receiveing server would process seperate request opened vulnerability cross site scripting mistake seems design flaw core rather coding mistake also could series misscommunication truly needed parrt project flaw http request smuggling four mitigations suggested cwe use ssl communication use strict http parsing terminating client request seems like three inital fix back VERVER termanting client mitigation used avoided future making sure think forwarded dealing data comes outside world
CVE-2005-2970,makes apache http server widely used robustness ability support plethora various platforms environments facilitates use multi process modules aka mpms mpms responsible binding network ports taking requests releasing children handle requests webmasters choose which mpms load onto server depending platform environment cve pertains worker mpm worker mpm supports multi process multi threaded server capable handling multitude requests keep multiple processes open process possessing multiple threads failure properly close processes leads memory released longer needed attackers remotely take advantage constantly aborting connections without closing causes memory depletion eventually longer memory available reused future connections rendering denial service lack tests seems mistake may led vulnerability something led vulnerability found later could mention tests readme tests cover various bits apache httpd repo extensive perhaps exclusive tests publicized
CVE-2008-0005,upon sending html web pages software specify text encoding browsers auto detect encoding meant encode could effectively used includes utf 7 which uses characters deliminate characters special meanings order construct certain characters characters may therefore written utf 7 without using actual characters means anyone knew way around utf 7 could create cross site script run arbitrary javascript code appears oversight inception specifying content types addressed someone proved vulnerability true even though several commits reworked way content types set mitigation taken quite straighforward charset explicitly specified iso 8859 1 prevents encoding used may sanitized much effectively
CVE-2016-5387,httpd sets environment variable http proxy based proxy field received http request header done pass proxy information cgi scripts abused execute mitm attack cause httpd send requests arbitrary server design mistake environment variables probably used pass proxy information cgi scripts especially true proxy information provided remote unauthenticated user
CVE-2005-2700,using mod ssl required certificates web server client certifcates enforced configuration virtual host specifies client authication optional mistake design mistake failed verify client certificates certain configuration appears different virtual hosts would effect verification set optional mistake could prevented seperation privledge hosts
CVE-2008-2364,flaw discovered server would handle excessive interim responses situation user using proxy tricked visiting malicious web server proxy would need use stack heap memory continually done could exhaust stack heap space crash server oversight design probably occured simply never discussed somewhere planning phase must diagram depicting interaction proxy web server consideration system could harmed given proxy used communicate malicious web server vulnerability falls availability category cia model could used exhaust stack heap space create dos attack fix vulnerability simple flag which checked amount interim responses done forward proxy
CVE-2004-0885,possible remote clients bypass restrictions resources using apache sslciphersuite directive done using cipher suite recognized server vulnerability occured developers misinterpreted software packages using would handle events fault lie packages using misunderstood system would react specific series events occured order prevent occuring developers thoroughly study packages documentation even minute detail especially security factor
CVE-2007-6422,sites specific setting mod proxy balancer enabled remote users could craft request would cause process handling crash server site also multi threaded would lead denial service attack site correctly checking possible requests could come server large chunk data sanitize input allowing users take server also think outliers situation mod proxy balancer multi threaded servers default build security around also cve considered low priority many sites combo solution put check correct balancer name which fix specific issue better fix may sanitize inputs first place add statement every time issue arises
CVE-2014-0117,http connection headers left blank like connection parser get empty string skip semi colon place value variable connection makes code proxy token used uses logic based whitespaces deliniated commas semi colons vulnerability use inherent assumption input passed already sanitized compatible think simple error thorough enough tests empty connection header seem like complicated input test understand niche situation use proxy module proxy servers niche think need extend unit tests test data passing modules well
CVE-2003-0020,certain terminals susceptible exploits form harmful inputs take example escape sequences escape sequence starts ascii escape character followed arguments particular vulnerability caused failure filter escape sequences terminal outputting error logs attackers able intentionally inject escape sequences terminals which caused certain malicious behavior vulnerability caused code written decades ago years software vulnerabilities well known today easy imagine original author code simply unaware possibility escape sequence injection error logs popular mitigation type vulnerability input validation recommended mitigation cwe 150 specifically whitelist input validation however author wrote fix vulnerability chose implement code akin blacklist rather whitelist which explicitly recommended mitigation
CVE-2008-0456,httpd serving static files static files extraneous crlfs inject headers http response redhat says issue since nasty files first place also seems like httpd actually errors gives either VERVER 300 vulnerability modify seemingly fine responses cause errors mainly lack review automated testing need smaller commits reviewed better
CVE-2016-8743,uncommon whitespace patterns accepted requests included responses server working backends proxies servers properly handle whitespace special meaning whitespace multiple responses could generated cause backends wrongly associate one response different request causing cache pollution serious problems chain issue primarily design flaw original request parser rather simply ignore combination whitespace validating specific required common patterns used collaborative components controlled project could accept input without issue vulnerability easily fixed validating input meets whitespace criteria cases sanitizing components servers essentially done case except configuration modes added strict validation takes place default unsafe mode preserves old behavior time parser originally introduced repository VERVER fix applied VERVER parsing logic remained largely exception moving back forth modules interesting commits listed
CVE-2007-6420,cross site request forgery csrf vulnerability balancer manager mod proxy balancer file apache http server 2 2 x allows remote attackers gain privileges via unspecified vectors vulnerability due insufficient authentication checks requests balancer manager web interface attacker could exploit vulnerability convincing user follow link malicious website visited site could send malicious http requests balancer manager interface behalf user vulnerability seen medium severity exploited could cause denial services however find records vulnerability exploited mentions fact malicious user would need authenticated perform exploit probably vulnerability exploited since less likely happen time also saw documents stted need authentication bug exploited entirely sure actual case also found fix placed urgently rather addressed later release looking logs seemed like much done order combat bug early fix placed VERVER flaw shows code needs tested extensively released lot code bases relied particular servlet turn affected assume may place quick fixes adopting fixed version
CVE-2017-7679,cve describes vulnerability related mod mime module which responsible associating meta data file requested server meta data includes behaviors attributes language encoding character set mime type file vulnerability states module able read one byte past end buffer sending malicious content type response header words user sends http request unexpected content type field apache server attempt read one byte additional memory next content requested user leads buffer overread error mod mime module which handled properly potential impact availability server crashing dos violating integrity data read without error returned user potentially sensitive data currently documentation points potential denial services biggest threat researching purpose module looking function vulnerability exists greater context file fairly confident simple coding mistake led vulnerability end day vulnerability fixed simply removing one null check adding another null check
CVE-2010-1623,httpd processes non ssl unencrypted traffic way process data flawed allowed memory fill carefully timed packets attacker could make httpd process fill memory cause denial service logic timeout policies enforced across core multiple modules httpd subsystem mod reqtimeout designed convenient way set timeouts minimum data rates receiving requests timeout occur data rate low corresponding connection closed server https httpd apache org docs trunk mod mod reqtimeout html filtering module which works httpd bucket brigade model accepting parsing network data httpd quickly vulnerability policy loose allowing VERVER seconds linger connection scheduled closing gives ample time attackers send crafted packets fill ram instead policy changed VERVER seconds along big rewrite policies enforced fix vulnerability signifiant rewrite original functionality issue small coding mistake poor algorithm choice poor defaults integration testing would helped especially memory management tool like valgrind
CVE-2002-0840,apache server side include cross site scripting vulnerability input validation error input request headers http 1 1 host improperly filtered possible maliciously hijack web sessions compromise servers injecting javascript following url demonstrate attack http 3cimg 20src 3d 22 22 20onerror 3d 22alert 28document2ecookie 29 22 3 VERVER mistake made trusting input validating
CVE-2005-2728,non limited byte range weakness cause denial service attack byte range buffer size input attacker decided fill http header large amount information cause memory consumption increase exponentially memory leak eventually lead crash servers resource allocation opinion mistake negligence think lesson yagni really applies comments code talking knew range limit could added check make sure end input however vulnerability existed due negligence according cwe mitigating correctly implementing input validation
CVE-2014-0231,cgi common gateway interface protocol used web servers runs command line interface scripts response client requests apache http server module mod cgid which responsible running cgi scripts cve 2014 0231 vulnerability apache http server mod cgid module users could create denial service attack causing process which ran scripts hang indefinitely mod cgid timeout feature attacker found request caused one server cgi scripts hosted mod cgid halt would deny service users server cgi scripts particularly interesting case finding way make system fail gracefully issue process responsible running cgi scripts hanging indefinitely issue occurs script fails handle certain inputs properly failure anticipate handle special case left open opportunity dos attack system lack unit testing probably clear mistake unit test suite project whole relatively sparse issue like rare failure case difficult anticipate without thorough testing
CVE-2008-2939,cross site scripting vulnerability which allowed attackers inject javascript html via wildcard last pathname ftp uri vulnerabilities proxy ftp c mod proxy ftp c files mistake made coding mistake design developers think validate input coming requests apace http servers attacker needed compose one wildcard charater last directory component path use vunerability exploit always distrust input validation
CVE-2017-9798,users able corrupt global methods table setting limit directive htaccess file httpd conf unexpected configurations results unpredictable behavior allows attackers read data process memory access attacker deliberately trigger vulnerability attempt access data freed memory good explanation found https blog fuzzing project org 60 optionsbleed http options method leak apaches server memory html vulnerability caused design error cwe suggests choosing language provides automatic memory managaement freeign pointers setting null implementation applied fix instead fix sought prevent htaccess exploits allowing methods registered initialization
CVE-2005-3352,vulnerability exploited attacker using cross site scripting imagemap processing module cause referer header output without escaped html attacker able influence referer header able use cross site scripting attack vulnerability seems result design mistakes lack maintainability consider scenario designing project fix problem applicable aspects project would say maintainability fairly low well cwe 80 basic xss software correctly neutralize special characters case referer header escaped html special characters handled correctly mitigation checking input data request including hidden fields cookies headers url forth must checked particular situation added conditional vulnerabilities fix seem maintainable patch apply everwhere software understood repairable enhanceable considered maintainable fact patch applied everywhere implies software understood repairable overall seems like fix effective even though apply everywhere know remove referer apply seems like solution ideal working alright
CVE-2016-8740,specific module modhttp2 module offer data length restriction request headers means malicious sources could potentially send large amounts information block threads stopping others able use could lead denial service attack one biggest mistake lack integration unit tests verify strange inputs weird situations addition better coding practices like quality assurance testing would go long way resolving issue overall better design verify input size could assisted
CVE-2015-3183,http server improperly parsed headers which allowed remote attackers ability execute http request smuggling attack tell issue directly stem code solution something else happened implemented
CVE-2010-1452,caching webdav modules enabled specific configuration process crash triggered sending request without path component caused invalid read which assumes path present request issue seems attributable coding mistake affected areas consider case which path segment could parsed request
CVE-2002-0661,vulnerability simple example directory traversal strings sanitized nothing else allowed attackers user instead bypass sanitization paired could used traverse directory access whatever files attacker wishes code mistake made checking sanitizing potential path traversal vulnerability try put minds developers imagine likely mostly unix experience simply consider backslashes could used path traversal operating systems even one developer looked commented code question vcc fix catch issue release shows importance thoroughly testing viewing software different perspectives which might reveal new problems
CVE-2003-0083,lack filter terminal escape sequences writing access logs cause vulnerabilities certain circumstances logs viewed terminal emulator vulnerabilites related escape sequences failure sanitization identify special characters importance likely requirements error
CVE-2013-2071,vulnerability stemmed lack exception handling objects would like notified event occurs therefore listening event situation one listeners threw runtime exception web request associated event would properly recycled resulted subsequent requests information previous request information present available mistake overlooking potential asynchronous listener implementation throw runtime exception error handling implemented course two commits expected error ioexception handling proved narrow discussion bug report clear implementer believe asynchronous listener ever throw runtime exception however tomcat protect case application chooses assumption runtime exceptions thrown led unexpected behavior within tomcat behavior ultimately created security vulnerability form leak information
CVE-2010-1157,portion tomcat handles http authentication via digest basic strategies potential allow viewing local name ip address server running tomcat header authentication via strategies includes realm name element realm name element specified application one configuration files used however realm name specified tomcat generate realm name circumstances expose local host name ip address machine running tomcat seems vulnerability oversight regards configuration authentication code interacted fix provide default realm name contain sensitive data instead generating string used actual hostname port lead vulnerability likely simple ignorance value server hostname information
CVE-2014-0050,software package offered apache tomcat hosting websites allowed attackers consume near 100 host cpu creating denial service attack exploit involved attacker crafting http content type header uploading file server changing boundary VERVER caused system enter infinite loop mistake led vulnerability likely occured implementation looking code implementation failed fulfill design implmentation edge case missed software packages fix generally easy make identified time vulnerabilty present software order prevent mistake like occuring future apache invest testing edge cases often
CVE-2017-5650,cve describes denial service attack done network via malicious http requests which responsible enabling communication client server specifically flaw encountered http 2 goaway frame component responsible initiating shutdowns betweeen connections exploited associated streams waiting closure allowing application write data waiting streams consumed thread therefore attacker could generate dos attack malicious client constructed series http 2 requests would consume available processing thread thus bringing system vulnerability could easily avoided proper penetration testing making sure evaluate different edge cases applications software imperative software caliber security design avoids kind attacks thankfully fix involved lines code addressed issue without concerns strict testing approach would avoided issue
CVE-2018-1336,use supplementary characters found certain international keyboards lead overflow causing infinite loop causes denial service implementation mistake cwe 153 says characters manipulated ensure valid expected appropriate input processed system fix looks proper looks like rather managing characters managing overflow caused characters would say falls expected portion mitigation advice
CVE-2017-12617,vulnerability affected people used apache tomcat versions VERVER VERVER VERVER VERVER vulnerability allowed people upload java server page jsp file server java servlet http put enabled setting called readonly set false jsp file written java allows web server execute code produce html user sees file able get uploaded servlet sent specially crafted request users request file intentionally unintentionally cause server execute code jsp file which malicious really call mistake find strange setting readonly parameter since people would want set true guessing relevant past need maintain setting previous technologies would say form miscommunication since people exposing exploit complete understanding settings lesson learned always review code introducing new systems update documentation users understand configuration even may considerd old relevant
CVE-2009-2693,vulnerability allows attacker create modify delete files using specially crafted web application resource war file tomcat fails check directory traversal commands directory paths using attacker uses craft war file war file deployed tomcat server directory traversal command used modify files outside web root directory files created modified deleted secure information web server could moved sccope key file server could deleted which could cause denial service mistake made simple developer neglected consider someone might try navigate outside root directory never put test cases exceptions happens since lack unit testing directory traversal never tested stayed code unnoticed exactly mistake oversight developers part vulnerability fixed adding checks path constructed
CVE-2017-5651,vulnerability occurs http request results send file action mistaken removal http processor cleanup step refactoring makes possible http processor used another request could result user receiving response intended another user potentially disclosing confidential information request received resulting send file action http processor popped cache another thread completes send file action pushes http processor back cache milliseconds later thread popped http processor pushes back cache causing http processor cache twice may lead unexpected errors response mixup which may disclose priviliged information vulnerability oversight terms preserving program behavior refactoring http processor recycle step mistakenly forgotton vcc reimplemented fix considering use concurrency extra caution taken refactoring
CVE-2011-0013,interface apache software controls html manager interface vulnerable affected someone injecting script url which alters appearance data manager page followed user administrator privileges seems filtering input overlooked forgotten developing security addressed design manager subsystem could caught may due agile development process which focused feature implementation rather security fix look proper since raw input sent user filtered filter function
CVE-2016-0763,method set global context system publicly available called web appliction could potentially set malicious global context think simply oversight likely ran scenario wanted complete action without authentication rather legwork properly authenticate instead authentication function stripped classify coding mistake design mistake sense literal typo rather system critically thought security thought scope setting something called global context set alarm bells hope
CVE-2018-1305,security constraints applied servelet loaded means applied url pattern depending order servlets loaded could cause constraints applied leaves open holes exploits elevated privilege instead need servlets load first security constraints taken care seems issue design mistake bit oversight part initally back VERVER believed wanted able deploy servlets different times still true think future servlets would secuirty constraints placed order would exploitable mitigated risk forcing servlets run security checks web application start instead time solution seems wise timing really matter happening application launches
CVE-2011-3376,tomcat includes component provides administrative functions web applications deployment reloading starting stopping application called manager manager restrict untrusted web apps ability access servlets allowed untrusted applications use functionality manager application things like run deploy additional applications without consent server owner vulnerability primarily concern environments shared hosting clients web applications considered trusted vulnerability seems ultimately design flaw affected class designed include checks ensure applications access trusted mitigation servers administrators could perform resolve users shared hosting environment could execute arbitrary actions tomcat manager without impediment fix vulnerability appears work intended code creating trust boundary access trusted untrusted applications explicitly checking trust status web applications
CVE-2010-4476,method used java runtime environment one responsible parsing converting double binary floating point numbers may lead infinite loop estimations converting example attempting convert number 2 2250738585072012e 308 method exploit enable denial service remote attacker using crafted string trigger infinite loop causing hang repeatable crash affected programs obscure vulnerability find works small range numbers magic number may found chance breaking php led others trying languages original bug php potentially would ever found fix looks proper avoids infinite loop checking good quality parsed number parsing
CVE-2012-0022,apache tomcat open source implementation java servlet 5 5 x use proper approach handling large number parameters limit size request attackers could utilize cause denial service via requests contained many parameters which turn caused large amount cpu used vulnerability handled making tomcat parameter handling code efficiently process large numbers parameters parameter values seen seems like design mistake led vulnerability appears created original code account possibly large excessive parameters could due fact developer never anticipated system could abused way also found interesting vulnerability found investigating another vulnerability shows important consider VERVER vulnerability may applied affect another part system
CVE-2017-12615,adding onto end file extension apache tomcat bypass file extension checks therefore leaving gap exploit vulnerability server would run code file appended opinion big coding design mistake designing system planned impact attack one portion code would impact portions also sanitized urls input file could put url input would sanitized would prevented simple fixable mistake code
CVE-2011-2526,apache tomcat 5 5 x VERVER 6 x VERVER 7 x validate certain request attributes which allows local users bypass intended file access restrictions cause denial service infinite loop jvm crash leveraging untrusted web application lack input sanitization get caught since edge case
CVE-2012-3439,entry involved several issues allowed authenticator bypassed prior fix client nonces random number issued authentication tracked instead server nonces allowing attackers bypass authentication reusing valid requests replay attacks attacks valid requests repeated delayed made possible system cached information user sessision state check correct credentials stale nonce values vulnerability likely made due design mistake exploit high probability occurrence considered design architecture mitigations listed suggest utilizing sequences time stamping along checksum ensure messages parsed fix addresses using server nonce values instead client nonce values well checking stale nonce values forcing reauthentication fix appears complete addressing problem areas exploit occur
CVE-2014-0095,content length explicitly set VERVER particular type request thread handling request hang far tell vulnerability triggered normal use system abuse even misuse simply manifest normal use happens accidental dos thus better application security checking would quite possibly prevented discovered fixed vulnerability see two mistakes first case content length zero apparently correctly checked vcc second opinion interesting mistake unit test case never made first mistake standard coding error mostly unavoidable second seems like important detail overlooked perhaps code review would caught mistake two preemtive mitigations cwe could helpful implemented ensure program fails gracefully use system limits would make error noticable also making consume entire thread would still result bug would need fixed bug would exploitable dos vulnerability
CVE-2009-2902,vulnerability allows user network create specially crafted war web application resource including jar files javaserver pages static files etc file could deployed authorized user war could potentially overwrite files system running apache tomcat work engine name hostname directory vulnerability example improper limitation pathname restricted directory user without access system violate integrity files access opinion coding mistake could prevented thorough code review knowledgable software engineer familiar common software security vulnerabilities seasoned engineer familiar software security could caught vulnerability made production code
CVE-2017-7674,apache tomcat add http vary header origin parameter cors responses which could result cache poisoning attack one origin could manipulate cached response another origin responding cross origin resource sharing cors requests apache tomcat add http vary header response would indicate response could different based origin header request since cors requests made multiple different origins server could different response based origin making request example resource requested image text image returned response may different french english versions page different versions could served different origins www example fr www example com including vary header cors response tells caching server needs cache different responses based specific parameter case content origin header request without vary header caching server cache single response origins allow anyone making request one origin load invalid response cache users origins major mistake led vulnerability design error adding new filter author consider use vary header make sure caching servers interacted server properly oversight seen original bugzilla report requesting cors filter added https bz apache org bugzilla show bug cgi id 55046 linked diagram showing operation cors filter https bz apache org bugzilla show bug cgi id 55046 bugs difficult find complex code bug difficult find complex systems case multiple different systems interact together architecture authors may originally considered intended
CVE-2011-1475,http piplining handled properly apache tomcat version gives remote attackers ability read responses intended clients examine application http packets seemed mistake result simple coding mistakes personally believe certain agile methods programming like paired programming proper testing could easily fixedthis issue started interesting see simply misplacing processor calls leaving try catch blocks implemented could leave sufficiently sized vulnerability
CVE-2016-3092,multipart stream area system check length boundary string means user potentially use extremely long boundary string cause denial service attack think coding mistake getting string input good practice check length string make sure cause problems think fix looks proper sets buffer size boundary length times two boundary string large helps prevent dos vulnerability think another good fix would directly append prefixes
CVE-2015-5351,apache tomcat includes web application called manager tool used deploy new web applications undeploy currently deployed web applications reload existing web applications perform operations change monitor availability user web applications another web application included apache tomcat host manager host manager used manage different virtual hosts server sharing wesites user tomcat server cve 2015 5351 refers vulnerability manager host manager web applications unauthenticated user attempting accessing index page either web applications would issued redirect server valid csrf token attacker may use token send requests web application which would considered invalid without token inclusion worth noting applications intended managing user apache server usually exposed internet changes made file housing vulnerability time introduction correction vulnerability finally fixed done person introduced VERVER years prior seems like one issues may lead bug lack eyes code component many maintainers maintainers interact often bugs contains likely last long time bug also good illustration damage caused technology secure default case jsps which create session client default regardless whether one needed
CVE-2018-11784,default servlet certain apache tomcat versions returned redirect directory e g redirecting foo user requested foo specially crafted url could used cause redirect generated uri attackers choice lack validation sanitization url left opening attackers exploit could extend url form url which user would redirected overall coding mistake specifically err assumptions pretty simple fix which shows something could avoided extensive tests written executed
CVE-2011-3190,certain versions apache tomcat vulnerable data breach due lack input sanitation processing requests ajp protocol connectors attacker create another request within existing message body allowing bypass authentication occurs specifically debug mode enabled developer test code edge cases may put system invalid state which ultimately caused design mistake
CVE-2017-5648,investigating bug VERVER noticed calls application listeners use appropriate facade object running untrusted application security manager possible application retain references request response objects thereby acces modify information associated another web application error page mechanism tomcat default servlet crafted http request could cause undesired side effects possibly including removal replacement custom error page major mistake led vulnerability design mistake exposes resource wrong control sphere providing unintened actors inappropriate access resource resources files directories may inadvertently exposed mechanisms insecure permissions program accidentally operates wrong object
CVE-2011-2729,jsvc abstraction layer allows java applications run unix easily vulnerablity service allow applications access files belonging superuser could password files superuser logs sysystem configuration etc requirements wrapper clearly specified proper unit tests could developed requirements wrapper inputs outputs associated data types ranges requirements also include error handled unit tests could include type safety guaranteed unit test could inject broad range bad data bad data types ensure unexpected behaviors bad data could include bad data types range values pointers point sections memory routines encapsulated programs malware
CVE-2016-6817,http 2 header parser found entered infinite loop header larger available buffer means denial service attack possible opinion coding mistake specific vulnerability based edge case time developers think would ever occur founder vulnerability barney2k7 discovered edge case trying parse header 30kb fix vulnerability involves increasing buffer size capacity less size header cwe entry mitigations which fix follows fix checks make sure size larger capacity increase capacity
CVE-2010-3718,tomcat web applications normally allowed access particular work directory user system applications granted read write permissions directory able use temporary files tomcat attribute dictates location directory prevent web applications changing work directory able modify attribute however result vulnerability applications able change attribute which meant malicious web applications could read write area user file system main mistake lead vulnerability lack testing author aware necessary set work directory attribute read however due way implemented actual code set attribute read ineffective fairly simple test able catch issue one potential mitigations cwe 269 carefully manage handling privileges fix created vulnerability seems employ mitigation proper way fortunately vulnerability fairly low impact exploitability scores confidentiality availability affected whatsoever result vulnerability however integrity affected since attacker able modify user files known reports vulnerability exploited since tomcat security team discovered issue able fix became bigger issue
CVE-2018-8037,async request completed time async timeout race condition existed could result user seeing response intended different user additional issue present connectors correctly track closure connection async request completed application timed container time could also result user seeing response intended another user essentially race condition timeout request undefined behavior responses would observed coding mistake accounting undefined edge case async request completed time async timeout fixes proper account async behavior interesting code bug bug fix surrounding code written one man must missed condition making sure async code exists tomcat covers async race condition crucial prevent similar bugs future
CVE-2009-3555,regulation transfer data within network open man middle remote attacks allow attacker inject data secure communication two parties remote attacker masquerade original party initiates communication allows attacker execute requests behalf victim sensitive data may compromised due inadequate inconsistent verification identities relation tomcat tomcat encrypts data along communication channel two parties tomcat supports renegotiation which allows user interact system authentication change status authenticated user also saving user activity data etc vulnerability comes remote attacker intercepts renegotiation poses user attacker able modify communication vulnerability product variety mistakes seemed lack testing commits mentioned testing general would ensure something works way intended work also coding mistakes resulted either end communications channel fully authenticated design mistake potentially factor could access entity properly checked authority
CVE-2011-1183,basic configurations tomcat web application set web xml file file includes config called login config which sets level security application whitelisting url based user role bug occurred configuration set configuration called metadata complete set true unintentionally allowing users bypass intended access restrictions http requests mistake seems mostly maintainability issue project reason say vulnerability introduced fix two completely seperate issues combination old logic given code produce unexpected new problems bug fixes leads beleive code difficult maintain especially given size number contributors prject
CVE-2011-1184,attackers look messages sent server client get autheticated information attacker use repeatedly sending server information server moment would authenticate attacker message sent correct username password server seen message used already old dropped message case server give attacker autheticated privlidges think problem comes coding mistake seems nonce usually sent authenticated default security libraries developer went around implement functionality could also design mistake design authentication planned idea nonce never came tell never came added full function check nonce end fix problem since user never able reuse authenticated message
CVE-2011-1088,apache tomcat java servlet container system helping run java servlets java servlets simple additions basic server help exend functionality tomcat uses two separete methods allowing developers enforce permissions urls one which servletsecurity annotation tomcat VERVER VERVER annotations ignored allowing user access route protected annotations freely accessable without protections authentication mostly coding bug annotations simply forgetten version VERVER tomcat security permissions enforced defined xml tomcat properly parse servletsecurity annotations within code security settings annotations enforced result shows oversight moving tomcat VERVER previous versions unaffected bug
CVE-2017-15706,documentation algorithm used module common gateway interface servlet match existing functionality could cause scripts execute expected caused scripts may executed unexpectedly caused previous fix bug mapping requests script paths documentation updated incorrectly biggest mistake seems simply proofreading documentation check documentation matches functionality system rewriting documentation quick complete way fixing issue
CVE-2009-2901,default tomcat automatically deploys directories placed host appbase behaviour controlled autodeploy attribute host which defaults true event failure encountered undeploying cleaning files remaining files left cleaned deployed result autodeployment process depending circumstances files normally protected one security constraints may deployed without security constraints making accessible without authentication issue affects windows platforms looks simple coding mistake developers assumed solid undeployment strategy logging validation verify war correctly stopping getting cleaned fix relates cwe 212 believe much better job verifying war related artifacts properly cleaned
CVE-2013-4444,vulnerability allows attackers upload execute javascript programs tomcat server tomcat security team views vulnerability important rather critical circumstances required occur limited implementation allowed unrestricted reading files obvious files checked scripting may allow remote code execution attackers using javascript files even research clear happened lead vulnerability checking edge cases might cause vulnerabilities outdated versions languages frameworks might compatible software built addition interesting fix focused fixing issue instead overall code cleanup included fix
CVE-2011-2204,apache tomcat use memoryuserdatabase load defined users groups roles memory data structure way tomcat implemented functionality mbean java management extensions jmx jmx built java technology provides architecture dynamically managing resources making overall system configurable context mbean managed bean used represent memory database users memoryuserdatabasembean older versions tomcat using memoryuserdatabase create users unauthorized local user access sensitive user information e g passwords local logs sensitive user data filtered logging error information fact entire user object written log file event runtime error result malicious local user obtain sensitive information causing runtime error reading log file though vulnerability discloses sensitive information logs server side attacker able gain local file access server means able exploit tomcat file reading vulnerability could feasibly read log file unauthorized access sensitive user information opinion mistake made developer simple straightforward coding requirements oversight generally logging developer want much useful information possible help debug likely developer assumed would fine write entire user object log event runtime error instead writing username mean often would exception thrown would even try read logs developers would know look developer likely think possibilities went conceptually simpler print whole object approach instead taking time consider logging information needed
CVE-2016-8747,regression introduced java class refactored use standard bytebuffer class rather byte array issue cleanup code which prepares buffer next http request faulty cleanup logic information could leak http requests coding mistake resulted refactor using regular java array byte type bytebuffer introduced java VERVER seem sufficient justification change bytebuffer significant performance enhancing features unfortunately seems case developer well versed new technology performing refactoring hinted follow commits author author attempted drop new code place old notice subsequent operations required manipulate bytearray class pointers
CVE-2017-7675,vulnerability involves processing http request one path parameters url ability traverse outside folder module pointing depending url string user passes server ultimately happens particular parameter maybe others number existing security checks skipped implementation based comments surrounding original implementation well brief history commits revolving around chunk code containing vulnerability lack targeted unit tests vulnerability certainly caused lack proper risk assessment comment like almost certainly wrong needs decoded seems like part code receive proper amount attention determine may lead vulnerabilities properly tested
CVE-2017-12616,use class virtualdircontext which intended expose multiple directories filesystem single webapp made possible attacker insert specially crafted request would enable bypass security constraints view source code javaserver pages enough testing able catch unexpected behavior fix upgrade latest release which seems like reasonable solution since vulnerability patch requires minor release upgrade thing made vulnerability particularly bad since gave access source code opened jsps attacks
CVE-2009-3548,windows installer apache tomcat uses blank default password administrative user which allows remote attackers gain privileges easily obviously aggergious gives anyone admin access without provide credentials appears design issue way engineers designed system vulnerability inherent keep mind core security principle secure default someone investigating security found issue VERVER years later patched even mentioned response vulnerability report system behaved contrary described docs contrast actual system behavior docs clear midcommunication within team mitigation simply modify default password blank mitigation seems sufficient within scope vulnerability
CVE-2016-4461,vulnerability stems improper input validation within apache struts relation ognl formally known object graph navigation language ognl expression language used access mutate java object properties well interact forms metadata instance ognl expression evaluation operator used force double evaluation struts data object attribute double evaluation expression string evaluated code output also evaluated code without defined base case process recurse indefinitely respect apache struts malicious actor provide string containing evaluated later point time forces double evaluation event malicious actor encodes program instructions within provided string input vulnerability allows arbitrary code execution within system important note vulnerability stems incomplete solution prior issue apache version VERVER classified s2 029 apache wiki cve 2016 0785 overall vulnerability stems failure consider security principle secure default failure consider malicious use ognl language especially forcing expression evaluations using syntax shows adequate threat modeling done preparation integrating feature likewise failure account potential malicious inputs executing expressions signifies lack consideration increased attack surface results complex inputs considering predecessor issue s2 029 supposed fixed version VERVER release fact issue appeared s2 036 proves lack understanding regards core issue
CVE-2018-1327,struts rest plugin uses library called xstream serialization deserialization java objects xstream library vulnerable dos attacks malicious request sent crafted xml file vulnerability affects struts versions VERVER VERVER mistake apache struts developers made fully distrusting isolating third party library ever implement library project inherit vulnerabilities library future important input libraries properly validated sanitized
CVE-2016-3087,instead writing action every method user could map character method name suffix prefix enabled allowed remote attackers execute arbitrary code via vectors related operator rest plugin mistake made implementation developer simply validate user input sequential remote attackers allowed toexecute arbitrary code via vectors related operatot rest plugin
CVE-2014-0050,vulnerability allows infinite loop occur meaning program thus vulnerable dos denial service attack exploit would come form sending http request content type header extremely high length would say would coding mistake implementation piece code author mentioned git log attempted account sneaky boundary cases goes show sneaky bug stemming input certain length said difficult blame programmer given vulnerability could exploited attack vector specifically meant strange unlikely
CVE-2016-3082,application allows parsing arbitrary stylesheet provided path stylesheet implementation allowed sheet location included parameter http request using parameter request path resource allowed potential remote code execution vulnerability appears result security oversight providing way http request pass location stylesheet kind issue mitigated future validating document type content uploaded files specific case ability pass file location http request determined unnecessary code blindly used path provided location parameter request removed
CVE-2016-2162,apache struts framework uses i18ninterceptor allow users developers switch language used framework application built top problem interceptor perform validation user input accepting arbitrary strings which used developer display language selected user however framework expose value directly ui means vulnerability exploitable developer explicitly puts string locale object onto page seems like design issue developer account method contracts java locale library since locale perform validation automatically developers also user input left unchecked carried rest program led developer using struts vulnerable xss access locale object directly ui code
CVE-2017-9805,cve 2017 9805 security vulnerability could allow execution arbitrary code xml read system vulnerable module received xml payload properly validate means could receive malicious payload could execute arbitrary code vulnerability mostly design mistake developer consider input could potentially malicious could dangerous deserialized xml handler properly validate input deserialization occurs leading potential execution arbitrary code page cwe 502 suggests validating input creating new object store deserialized data fix vulnerability involved 1 upgrading dependancy used xml deserializing 2 creating whitelist allowed class names whitelist validates input trustworthy creating object class instance attempting created list trusted class names created interesting vulnerability found demonstration security service automatically queries open source repositories security vulnerabilities quickly fixed also annouce vulnerability fixed public bug reports anything signify existed also missing security tests could prevented vulnerability occuring first place
CVE-2013-2134,using wildcard matching using generic case match specific case provided attacker execute inject java code source code think mistake made lack consideration unsanitized inputs consideration fact wildcard action would allow attackers send unsanitized unmonitored inputs developers would coded defensively begin short design mistake allow layer code directly interacting inputs sanitized design phase defense layer inputs could get sanitized sent rest code brought
CVE-2014-0116,fix applied previous update account wildcard operator missing operator appropriate blacklist disallowed inputs allowed attackers bypass safeguards place craft exploits system correct sanitization regex pattern present another class parametersintercepter reimplemented incorrectly cookieinterceptor code smell duplicate code suggests lack due diligance developer search pre existing solutions communicating effectively team members issue went unnoticed large part due robust unit tests bad inputs vulnerabilities like prevented future following principles like dry repeat creating extra tests vulnerabilities discovered
CVE-2017-12611,rce remote code execution attack possible developer using wrong construction freemarker tags freemarker template engine used generate html good example code problematic mean obvious code implemented VERVER show problematic VERVER simple fix could implemented VERVER class developed seems small write mean become big later
CVE-2013-2251,action redirect parameters added streamline navigation buttons within forms however methods took unsafe client side input executed without sanitization allows malicious actor execute arbitrary object graph navigation language ognl expressions remote code execution vulnerability inputs sanitized defense depth applied lead remote code execution completely unacceptable developers introduced additional inputs previous code yet sanitization done done previous inputs future developers look security practices implemented similar portions project projects
CVE-2011-3923,apache struts parameterinterceptor class properly handle specific user supplied inputs http requests improper handling requests allowed remote user bypass security measures perform exploit vulnerability using ognl object graph navigation language expressions modify server side resources potentially run arbitrary java code target system feel mistakes made led vulnerability based coding developers simply forgot handle edge case which presence parentheses construct make ogln calls chosen cwe vulnerability cwe 94 marks input validation testing couple possible mitigations case cve struts development team already degree required handle vulnerability tests existed area code characters also blacklisted requests characters needed fully elminiate possbility malicious ogln code execution
CVE-2015-5209,struts server performing adequate input validation request parameters allowed remote user create request referencing object represents root execution context remote user could use root object bypass security restrictions perform remote code execution struts server includes modifying internal state target application affecting container settings altering user sessions mistake made led vulnerability likely requirements misunderstanding omission actual code input validation appears work expected since processing request parameters allows access critical application state cleverly made request could access modify state fix made vulnerability looks proper additional unit tests check specific vulnerability future could prevented designing system allow reflection http parameters explicitly specified code require parameters conform framework defined whitelisted format well defined blacklist contains critical objects could accessed project performing input validation well attack surface validation knowing check request parameters well cookies
CVE-2016-6795,url provided user fully validated which could cause server let attacker go locations permitted view even inject code execute remotely looks like coding mistake validating valid secure url hard something checking one first things teams checked upadating validator tell one commit code merged master without fully checked commit found interesting commits section
CVE-2016-0785,vulnerability allows remote arbitrary code execution apache struts uses language called object graph navigation language ognl ognl open source expression language allows easy manipulation properties setting default properies struts one property assigned multiple times forced apache struts perform double evaluation value attributes assigned certain tags allowed remote attackers send crafted attribute data would evaluated twice allows execution arbitrary code code would system privileges target service mistakes led vulnerability first one simple coding mistake line code written twice different commits duplicate line committed author likely see first line could copy paste mistake well second mistake sanitizing attributes associated tags design flaw fixes vulnerability appear fixed error
CVE-2017-7672,vulnerability may overload server process specially crafted url special url put form field validated using struts built urlvalidator validation may cause dos url validation done using regular expressions vulnerability affects struts versions VERVER VERVER checkout cve 2017 9804 cve 2016 8738 similar cves believe mistake design unit tests designed well enough cover possibilities dos see cve 2016 8738 cve 2017 9804 information
CVE-2017-5638,apache struts utilizes multipart parsers handle http post requests two types available jakarta pell jakarta multiparser one vulnerability generates exception parsing content type raises exception includes invalid data error message parsing input treating parsed result ognl expression potential remote code execution coding mistake lead vulnerability introduced one commit mistake introducing new code testing completely quick fix update different version struts code fix implemented exploited attackers original author pushed code intended improve error handling introducing new class store handle error unit tests updated test potential remote code execution
CVE-2014-0094,apache struts could allow remote attacker bypass security restrictions caused error excluded parameters accessable user input attacker could invoke specific method remote java server specifying url java objects getclass method returns object class which unauthenticated attacker could access manipulate disclosing private class information possibly load malicious class file mistakes reported design flaw maintainability design flaw years development parameters users able access changed security measures ment protect user input must stay date avoid allowing users access unintended functionality users allowed input parameters intended use importantly parameters blocked accessed unintended times
CVE-2012-4386,validation which checks tokens struts insufficient allowing malicious user craft csrf attack adding token choosing url token would saved system without error checking thing stuck vulnerability attack vector come user parameter attack occurs user takes value set developer name url query parameter hijacks setting new specially crafted value which creates cross site request forgery important note even though developer chooses query parameter names modified simple keystrokes browser address bar also validated
CVE-2016-4465,apache struts VERVER potential denial service attack due unhandled exception vulnerability occurs built url validator attacker chooses input null value url field cause server process overload crash due unhandled exception definitely coding mistake whoever created regular expression attempt sanitize input urls forgot able check possible improper inputs cwe recommended mitigation vulnerability sanitize incoming input strings allow null bytes null characters get trouble originally due complex nature possible valid urls meaning creating regular expression check improper urls fairly daunting task prevent issue similiar situations future would recommend create list blacklisted symbols phrases possible malicious inputs test one created regex verify sanitizes input correctly
CVE-2010-1870,vulnerability allows remote attackers modify server side context objects allowed permissive whitelist http parameters which converted java code using open source expression language whitelist disallowed which sensitive character context variables issue whitelist account java unicode representation u0023
CVE-2013-1966,url requests containing parameters properly handled sanitized allowed malicious code apache object graph navigation language ognl executed typing commands url parameters two major mistakes likely led vulnerability created first importing xwork files without fully considering vulnerabilities may create second input url parameters which easily modifiable properly sanitized which allowed code executed easily which major problem software systems
CVE-2014-7809,due ineffective random number generator observing previous authentication token allows attackers predict next authentication token effectively bypass cross site request forgery protections would classify issue simple coding mistake developers likely went non cryptographically secure random number generator habit perhaps realize potential risk associated using normal pseudorandom number generator also think fix proper simple issue simple fix used
CVE-2013-4316,struts VERVER introduced new feature called dynamic method invocation dmi allowed developers call specific public methods passing url exclamation point opened possibilty users call methods abusing feature abusing simple modifying url request http example com route method1 would call function method1 http example com route method2 would call method2 instead opening many potential attack vectors dmi defaulted struts versions VERVER VERVER users warned potential security risks leaving enabled big mistake contributed defaulting potentially insecure configuration option defaulting dynamic method invocation users prior warning vulnerabilities potentially introduced defaulted whitelist included default users would still opt insecure option
CVE-2015-1831,issue cve input validation checking user types apache version VERVER specifically excludeparams function added overrode patterens another function called defaultexcludedpatternschecker allowed attackers input expressions gain access excluded classes package names could compromise internal state appliction problem caused poor design mistake example choice excludeparams function override patterens defaultexcludedpatternschecker caused issue likely missed due lack oversight code reviews would helped catch issue
CVE-2011-1772,multiple vulnerabilities allowed attackers execute xss attacks executing potentially harmful outside scripts using input contains existing action method name request parameters used dynamically generate action name escaped raw input parsed code way leaves attack vectors open vulnerabilities addition bug underlying xwork code added system code thoroughly tested analyzed vulnerabilities added project
CVE-2017-15707,struts using outdated library order read process json files result special type json file could created could cause denial service dos attack since library outdated longer supported problem would never resolved main mistake made keeping around old outdated libraries still using despite receiving security updates team began using library VERVER stop using discovered user could cause dos attack team seems taken proper initiatve replacing old library new one jackson still worked receiving security updates take time switch things using jackson though seen later commits showing switching jackson two months initial switch made also noted instead fully removing ability use outdated json lib library instead leave optional thing jackson acting defualt json reader seem making proper steps towards preventing vulnerability still work mention removing json lib optional team good reason keep json lib though may applications teams developed use struts json lib
CVE-2013-1965,vulnerability xwork core library struts VERVER ognl code expression language which get set fields call methods java could injected parameter name although partially handled earlier bug fixes s2 003 s2 005 s2 009 fixes account specific case which parameter name could still evaluated ognl code redirect sort double evaluation problem which caused vulnerability one design conclusion eventually reached ognl evaluation xwork core simply easily implemented secure manner multiple attempts sanitize input solution disable ognl evaluation default additionally multiple attempts fixes show testing may thorough enough push fixes production new edge cases kept popping requiring small adjustments final solution reached
CVE-2014-0112,excluded parameter pattern intoduced earlier apache version block access getclass method detailed enough special requests could allow attacker circumnavigate blocker also cookieintercrptor object vulnerable kind attack configured accept cookies exists incomplete previous fix biggest issue vulnerability previous vulnerability fix tested thoroughly vulnerability cve 2014 0094 cause multiple vulnerabilties afterward cve 2014 0112 cve 2014 0113 cve 2014 0114 name showed lack unit testing acceptance testing addition bug fix thankfully researching take long vulnerabilities started finished ensure testing done thoroughly future multiple reviewers code could implemented put multiple eyes fixes thus increasing chances bugs like caught
CVE-2017-9793,vulnerability located rest plugin apache struts which provides ability interface web applications rest plugin using outdated xstream library provides serializing objects xml vulnerable dos dos achieved crafted xml payload vulnerability affects apache struts versions VERVER VERVER VERVER VERVER see cve 2018 1327 cve 2017 9805 similar vulnerabilities vulnerability exploited due outdated library dependency rest plugin application utilizes ideal scenario avoid sort vulnerability restrict use third party dependencies mitigated either redesigning architecture plugin attempting design internal library thorougly tested production always important wary third party dependencies which constantly targeted attackers especially open source software like struts addition trust boundaries implemented application would validate input affects critical system functions deny anything trustful type vulnerability could avoided
CVE-2013-4310,struts VERVER controls actions using special prefix parameter body requests information read directly without validation providing correct information prefix parameter lead bypassing security security addressed design mapping actions specifically considering cross site scripting vulnerabilities may caused lack security requirements miscommunication since parts struts already implemented filtering mechanisms prevent happening developers could standardize reviewing code cross site scripting vulnerabilities enforce security reviews relevant commits
CVE-2018-11776,vulnerability allows remote code execution apache struts framework attackers inject namespace parameter http request attacker inject string complied struts object graph navigation language struts ognl language allows behavior struts highly customizable apache VERVER versions VERVER VERVER affected vlnerbility believe biggest lesson learned vulnerability take caution merging outside code distrust code like would distrust library framework use means understanding framework library works well putting trust boundaries merged code discovering vulnerability believe fix done properly fix properly sanitizes validates namespace which prevents injection taking place
CVE-2017-9804,vulnerability due uncomplete fix cve 2017 7672 crafted url overload server process validated using urlvalidator see cve 2017 7672 information vulnerability also similar cve 2016 8738 apache struts versions VERVER VERVER VERVER VERVER affected believe biggest lesson learn vulnerability make sure unit testing complete complete coverage every possible input impossible testing cover much possible fix unit tests covered potential cases dos another lesson learned careful regex regex exremely powerful make sure know exactly difficult becomes long like case urlvalidator
CVE-2017-9791,using struts actionmessage development team recommended use string concatenation get resource key akin os command injection sql injection string concatenation leads modifying underlying instructions vulnerability never patched development team simply put bulletin along code example educate developers fix vcc website possible perform rce attack malicious field value using struts VERVER struts VERVER plugin struts VERVER action value part message presented user e using untrusted input part error message actionmessage class
CVE-2016-4433,properly made request struts allow attacker bypass permissions conduct redirection attack redirection attack attacker control page redirect user may example redirect fake login page intended harvest username password user likely trust fake page given came trusted page looking fix notice disallowing arithmetic expressions perhaps plus symbols expanded spaces later example causing issues looking test added fix commit expects method call booscope myclass default scope bootscope init fail given syntax appears allow arbitrary method calls remote source seems like use design flaw apache forever plugging holes system instead app required define input paths instead letting client whatever wants real way think avoid future feature like ognl instead require app define endpoints like spring app
CVE-2013-2135,struts performing adequate input validation mapping requests controllers certain configurations request url included crafted input form templating language used struts ognl would unintentionally evaluated evaluation allowed arbitrary java code execution occur vulnerability made possible lack input validation double evaluation issue templating language parser two issues involved vulnerability seem fall two different mistake categories lack input validation likely design issue considering dynamic inputs double evaluation issue falls coding mistake made possible implementation error parser
CVE-2016-8738,vulnerability may overload server process specially crafted url special url put form field validated using struts built urlvalidator validation may cause dos url validation done using regular expressions vulnerability affects struts versions VERVER VERVER checkout cve 2017 9804 cve 2016 7672 similar cves believe biggest lesson learn vulnerability make sure unit testing complete complete coverage every possible input impossible testing cover much possible especially case creating fix vulnerability fixed completely led cve 2017 7672 cve 2017 9804 always create new tests make fix done correctly another lesson learned careful regex regex exremely useful make sure know exactly difficult becomes long like case urlvalidator
CVE-2016-4430,vulnerability cross site request forgery vulnerability which allow attackers perform arbitrary code execution regular expression used validate urls given user input allowed multiple characters present culprit character commonly used xsrf properly denied url could lack knowledge condition developer forgot fix proper limited character used certain way
CVE-2012-4387,request parameters handled struts VERVER effectively treated ognl expressions which may take time process sufficiently complex possible dos attacker might craft requests struts VERVER based application extremely long parameter names ognl evaluation parameter name consume significant cpu cycles thus promoting effectiveness dos attack caused properly validating user inputs translated complex expressions potential exploitation which would classify coding mistake critical overall function application extra care needed taken handle sensitive inputs number test cases written test different scenarios which completed aside redesign treats inputs differently appropriate solution problem
CVE-2013-2248,vulnerability struts allowed attacker use certain url parameters special meanings redirect redirectaction set value website automatically redirect user website vulnerability fixed removing code performed redirect actions entirely design mistake actions allowing redirects url parameters without requiring authentication dangerous given solution entirely remove behavior could said reduced attack surface noted user could reimplement behavior copy pasting pre fix code custom action mapper class vulnerability fundamentally still exists system however likely impossible remove behavior without disallowing desired functionality
CVE-2016-3081,remote user able execute arbitrary code targeted system possible dynamic method invocation enabled performed method prefix provides attacker ability pass malicious expression user input gain access system due lack sanitization case dynamic method invocation http parameters prefixed method words attacker specify method system execute specified url vulnerability classified high severity solved disabling dynamic method invocation possible think vulnerability result design mistake vulnerability occurs attackers execute command gives capability otherwise would attacker submits malicious expression system successful could execute arbitrary code dynamic method invocation particular problem disabling dynamic method invocation solve problem general mitigation assume input malicious use accept known good input strategy reject input conform specifications modify something
CVE-2016-3090,type attack specifically targeting flexible nature expression languages inject execute arbitrary code system expression language scripting like language allows access java methods similar way would normally e syntax apache made expression language mainly meant access data within object using getters setters called ognl object graph navigation language ognl built framework called antlr which parser help create simple languages issue ognl expression languages flexible prone injection attacks place types languages used often templating languages like jsp jsp allows use ognl access internal object data injected html created jsp typically issue injection attacks becaues user input affect templating languages anything else using expression languages however possible developer evaluate ognl user provided variables string concatenation done sanitization input becomes complicated hard determine actually sanitized precise sanitization depends project although hard find example type injection used vulerability underlying antlr framework ognl exploitable language used carefully even played equifax breach cve 2017 5638 issue presented mainly issue due adding classes sensitive information future without remembering update list sanitized inputs method access information based inputs overall design mistake list sensitive data updated separately isntead maintained senstive data added way might use annotations list sanitized data automatically determined based annotated fields object accessed could great feature ognl ignoring fields getters setters annotated certain annotation issue sanitization might even issue may however fix issue since hard know exactly type input caused vulnerability first place based new unit tests added fix
CVE-2016-4438,attacker execute code application possible passing malicious expression work denial service would ensue malicious expression could added chaining expression another means code would try execute one expressions ends input validation error input validation error user enter code excute arbitraury code failure code lead denial service seems classic case improper input validation lack input sanitization code input validation account chained expressions could avoided future testing greater range possible expressions
CVE-2013-2115,specially crafted request parameter could used inject arbitrary code which could used request parameter url anchor tag url anchor tag tries resolve every parameter present original request lets malicious users put arbitrary statements request parameter evaluated enable method execution execute arbitrary methods which bypasses library protections vulnerability introduced partial fix previously identified bug vulnerability due fundamental flaw design url rendering system subsequent fix VERVER fully address possible attack vectors rearchitecting url rendering subsystem pass vulnerable parameters changing allowstaticmethodaccess property immutable seemed completely fix original vulnerability reported 2010
CVE-2017-9787,specific type proxy could used make many connections launch denial service attacks struts believe missed looks like simple check prevent proxy connections rather coding mistake seems design totally neglected handling proxies differently catch every vulnerability one must slipped risk assessment cwe 284 mentions carefully handling permissions trust boundaries seems bug proxy user may need restricted access none dos attacks significant risk
CVE-2014-0113,cookieinterceptor apache struts wildcard cookiesname value used properly restrict access getclass method which allows remote attackers manipulate classloader execute arbitrary code via crafted request seems like inherent design mistake cookieinterceptor class created keep clear idea permissions possibly private methods writing code mitigation besides updating VERVER replacing previous class related pattern class list excludeparams future testing permissions well code effected could help mitigate possible repeat mistake
